
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e0  080047e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e8  080047e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000078  08004868  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08004868  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000877d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179e  00000000  00000000  00028825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00029fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021c8  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f6b  00000000  00000000  0002d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865a5  00000000  00000000  00035f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002904  00000000  00000000  000bc568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004490 	.word	0x08004490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004490 	.word	0x08004490

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000598:	b08a      	sub	sp, #40	; 0x28
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fbfc 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f8ee 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f9ac 	bl	8000900 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f956 	bl	8000858 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ac:	f000 f97e 	bl	80008ac <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("*****Bootloader Started*****\r\n");
 80005b0:	485d      	ldr	r0, [pc, #372]	; (8000728 <main+0x194>)
 80005b2:	f002 fac3 	bl	8002b3c <puts>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //turn on led
 80005b6:	2201      	movs	r2, #1
 80005b8:	2120      	movs	r1, #32
 80005ba:	485c      	ldr	r0, [pc, #368]	; (800072c <main+0x198>)
 80005bc:	f001 f8d6 	bl	800176c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fc5a 	bl	8000e7c <HAL_Delay>
  char pdat[] = "UART data received sandesh \n";
 80005c8:	4b59      	ldr	r3, [pc, #356]	; (8000730 <main+0x19c>)
 80005ca:	463c      	mov	r4, r7
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005d6:	c407      	stmia	r4!, {r0, r1, r2}
 80005d8:	7023      	strb	r3, [r4, #0]


  status_of_GPIO = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4855      	ldr	r0, [pc, #340]	; (8000734 <main+0x1a0>)
 80005e0:	f001 f8ac 	bl	800173c <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b53      	ldr	r3, [pc, #332]	; (8000738 <main+0x1a4>)
 80005ea:	701a      	strb	r2, [r3, #0]
  if(status_of_GPIO == GPIO_PIN_RESET){
 80005ec:	4b52      	ldr	r3, [pc, #328]	; (8000738 <main+0x1a4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f040 8082 	bne.w	80006fa <main+0x166>


	  HAL_UART_Receive(&huart6, (uint8_t*)temp, (uint16_t)sizeof(temp), 15000);
 80005f6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80005fa:	2210      	movs	r2, #16
 80005fc:	494f      	ldr	r1, [pc, #316]	; (800073c <main+0x1a8>)
 80005fe:	4850      	ldr	r0, [pc, #320]	; (8000740 <main+0x1ac>)
 8000600:	f001 fe5f 	bl	80022c2 <HAL_UART_Receive>
	  temp[sizeof(temp) - 1] = '\0';
 8000604:	4b4d      	ldr	r3, [pc, #308]	; (800073c <main+0x1a8>)
 8000606:	2200      	movs	r2, #0
 8000608:	73da      	strb	r2, [r3, #15]
	  printf("Received data : %s \r \n", temp);
 800060a:	494c      	ldr	r1, [pc, #304]	; (800073c <main+0x1a8>)
 800060c:	484d      	ldr	r0, [pc, #308]	; (8000744 <main+0x1b0>)
 800060e:	f002 fa0f 	bl	8002a30 <iprintf>


	  if (strncmp((char *)temp, "START", 5) == 0) {
 8000612:	2205      	movs	r2, #5
 8000614:	494c      	ldr	r1, [pc, #304]	; (8000748 <main+0x1b4>)
 8000616:	4849      	ldr	r0, [pc, #292]	; (800073c <main+0x1a8>)
 8000618:	f002 fb09 	bl	8002c2e <strncmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d112      	bne.n	8000648 <main+0xb4>
	      // "START" command received
	      if (sscanf(temp, "START%d", &numPackets) == 1) {
 8000622:	4a4a      	ldr	r2, [pc, #296]	; (800074c <main+0x1b8>)
 8000624:	494a      	ldr	r1, [pc, #296]	; (8000750 <main+0x1bc>)
 8000626:	4845      	ldr	r0, [pc, #276]	; (800073c <main+0x1a8>)
 8000628:	f002 fa90 	bl	8002b4c <siscanf>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d106      	bne.n	8000640 <main+0xac>
	          // numPackets now contains the number of packets received
	          printf("Received Start Bit for Firmware Update. Number of Packets: %d\r\n", numPackets);
 8000632:	4b46      	ldr	r3, [pc, #280]	; (800074c <main+0x1b8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	4846      	ldr	r0, [pc, #280]	; (8000754 <main+0x1c0>)
 800063a:	f002 f9f9 	bl	8002a30 <iprintf>
 800063e:	e003      	b.n	8000648 <main+0xb4>

	          // Now you can use the numPackets value to handle the firmware update process.
	      } else {
	          // Handle parsing error
	          printf("Error parsing the number of packets.\r\n");
 8000640:	4845      	ldr	r0, [pc, #276]	; (8000758 <main+0x1c4>)
 8000642:	f002 fa7b 	bl	8002b3c <puts>
	          goto run_bootloader_while_loop;
 8000646:	e05d      	b.n	8000704 <main+0x170>
	      }
	  }

	  for(int i=0;i<=numPackets;i++)
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	e04d      	b.n	80006ea <main+0x156>
	  {

		  HAL_UART_Receive(&huart6, (uint8_t*)pdata, (uint16_t)sizeof(pdata), 15000);
 800064e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000656:	4941      	ldr	r1, [pc, #260]	; (800075c <main+0x1c8>)
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <main+0x1ac>)
 800065a:	f001 fe32 	bl	80022c2 <HAL_UART_Receive>
		  if (strstr((char*)pdata, "STOP") != NULL) {
 800065e:	4940      	ldr	r1, [pc, #256]	; (8000760 <main+0x1cc>)
 8000660:	483e      	ldr	r0, [pc, #248]	; (800075c <main+0x1c8>)
 8000662:	f002 faf8 	bl	8002c56 <strstr>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d003      	beq.n	8000674 <main+0xe0>
			  printf("Firmware Updated");
 800066c:	483d      	ldr	r0, [pc, #244]	; (8000764 <main+0x1d0>)
 800066e:	f002 f9df 	bl	8002a30 <iprintf>
			  break;
 8000672:	e03f      	b.n	80006f4 <main+0x160>
		  }
		  else{
			  printf("Packet Received");
 8000674:	483c      	ldr	r0, [pc, #240]	; (8000768 <main+0x1d4>)
 8000676:	f002 f9db 	bl	8002a30 <iprintf>
			  /*Flash_Write_Data((uint32_t)(update_firmware_address), pdata, sizeof(pdata));
			  update_firmware_address=update_firmware_address+1024;
			  HAL_UART_Transmit(&huart6,(uint8_t *) "OK", sizeof("OK"), 15000);*/

			  HAL_FLASH_Unlock();
 800067a:	f000 fd5d 	bl	8001138 <HAL_FLASH_Unlock>

			  while(sofar<1024){
 800067e:	e020      	b.n	80006c2 <main+0x12e>
				  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, update_firmware_address, pdata[sofar]) == HAL_OK)
 8000680:	4b3a      	ldr	r3, [pc, #232]	; (800076c <main+0x1d8>)
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <main+0x1dc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a34      	ldr	r2, [pc, #208]	; (800075c <main+0x1c8>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2200      	movs	r2, #0
 8000690:	4698      	mov	r8, r3
 8000692:	4691      	mov	r9, r2
 8000694:	4642      	mov	r2, r8
 8000696:	464b      	mov	r3, r9
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fcf9 	bl	8001090 <HAL_FLASH_Program>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10a      	bne.n	80006ba <main+0x126>
						 {
							 update_firmware_address++;  // use StartPageAddress += 2 for half word and 8 for double word
 80006a4:	4b31      	ldr	r3, [pc, #196]	; (800076c <main+0x1d8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <main+0x1d8>)
 80006ac:	6013      	str	r3, [r2, #0]
							 sofar++;
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <main+0x1dc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <main+0x1dc>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	e003      	b.n	80006c2 <main+0x12e>
						 }
						 else
						 {
						   /* Error occurred while writing data in Flash memory*/
							 return HAL_FLASH_GetError ();
 80006ba:	f000 fd6f 	bl	800119c <HAL_FLASH_GetError>
 80006be:	4603      	mov	r3, r0
 80006c0:	e02c      	b.n	800071c <main+0x188>
			  while(sofar<1024){
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <main+0x1dc>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006ca:	dbd9      	blt.n	8000680 <main+0xec>
						 }
			  }
			  sofar = 0;
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <main+0x1dc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit(&huart6,(uint8_t *) "OK", sizeof("OK"), 15000);
 80006d2:	f643 2398 	movw	r3, #15000	; 0x3a98
 80006d6:	2203      	movs	r2, #3
 80006d8:	4926      	ldr	r1, [pc, #152]	; (8000774 <main+0x1e0>)
 80006da:	4819      	ldr	r0, [pc, #100]	; (8000740 <main+0x1ac>)
 80006dc:	f001 fd5f 	bl	800219e <HAL_UART_Transmit>
			  HAL_FLASH_Lock();
 80006e0:	f000 fd4c 	bl	800117c <HAL_FLASH_Lock>
	  for(int i=0;i<=numPackets;i++)
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	3301      	adds	r3, #1
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <main+0x1b8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f0:	429a      	cmp	r2, r3
 80006f2:	ddac      	ble.n	800064e <main+0xba>

		  }
	  }
	  HAL_Delay(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 fbc1 	bl	8000e7c <HAL_Delay>
  //run_application();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void (*firmware_update_applicaiton)(void) = (void*)(*(volatile uint32_t*)(0X08060000+4));
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <main+0x1e4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	623b      	str	r3, [r7, #32]
  firmware_update_applicaiton();
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	4798      	blx	r3
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart6, (uint8_t*)pdat , sizeof(pdat), 1000);
	  printf("*****Inside Bootloader While Loop*****\r\n");
 8000704:	481d      	ldr	r0, [pc, #116]	; (800077c <main+0x1e8>)
 8000706:	f002 fa19 	bl	8002b3c <puts>
	  HAL_Delay(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070e:	f000 fbb5 	bl	8000e7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000712:	2120      	movs	r1, #32
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <main+0x198>)
 8000716:	f001 f842 	bl	800179e <HAL_GPIO_TogglePin>
	  printf("*****Inside Bootloader While Loop*****\r\n");
 800071a:	e7f3      	b.n	8000704 <main+0x170>
	  //(uint32_t *)application_address = 0x080600004;


  }
  /* USER CODE END 3 */
}
 800071c:	4618      	mov	r0, r3
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000726:	bf00      	nop
 8000728:	080044e0 	.word	0x080044e0
 800072c:	40020000 	.word	0x40020000
 8000730:	080045e8 	.word	0x080045e8
 8000734:	40020800 	.word	0x40020800
 8000738:	20000000 	.word	0x20000000
 800073c:	20000494 	.word	0x20000494
 8000740:	200004f0 	.word	0x200004f0
 8000744:	08004500 	.word	0x08004500
 8000748:	08004518 	.word	0x08004518
 800074c:	200004a4 	.word	0x200004a4
 8000750:	08004520 	.word	0x08004520
 8000754:	08004528 	.word	0x08004528
 8000758:	08004568 	.word	0x08004568
 800075c:	20000094 	.word	0x20000094
 8000760:	08004590 	.word	0x08004590
 8000764:	08004598 	.word	0x08004598
 8000768:	080045ac 	.word	0x080045ac
 800076c:	20000004 	.word	0x20000004
 8000770:	200004a8 	.word	0x200004a8
 8000774:	080045bc 	.word	0x080045bc
 8000778:	08060004 	.word	0x08060004
 800077c:	080045c0 	.word	0x080045c0

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 f946 	bl	8002a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0xd0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <SystemClock_Config+0xd0>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd4>)
 80007ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f4:	2310      	movs	r3, #16
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000802:	2307      	movs	r3, #7
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4618      	mov	r0, r3
 800080c:	f000 ffe2 	bl	80017d4 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000816:	f000 f8e1 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fa44 	bl	8001cc4 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000842:	f000 f8cb 	bl	80009dc <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART1_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000890:	f001 fc38 	bl	8002104 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f000 f89f 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200004ac 	.word	0x200004ac
 80008a8:	40011000 	.word	0x40011000

080008ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART6_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART6_UART_Init+0x4c>)
 80008e4:	f001 fc0e 	bl	8002104 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f875 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200004f0 	.word	0x200004f0
 80008fc:	40011400 	.word	0x40011400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a25      	ldr	r2, [pc, #148]	; (80009d0 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <MX_GPIO_Init+0xd4>)
 800098c:	f000 feee 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_GPIO_Init+0xd8>)
 80009a6:	f000 fd45 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009aa:	2320      	movs	r3, #32
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_GPIO_Init+0xd4>)
 80009c2:	f000 fd37 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020800 	.word	0x40020800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 fafe 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <HAL_UART_MspInit+0xe8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12d      	bne.n	8000ab6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a30      	ldr	r2, [pc, #192]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481e      	ldr	r0, [pc, #120]	; (8000b28 <HAL_UART_MspInit+0xf0>)
 8000ab0:	f000 fcc0 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <HAL_UART_MspInit+0xf4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d12b      	bne.n	8000b18 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f003 0320 	and.w	r3, r3, #32
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_UART_MspInit+0xec>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	23c0      	movs	r3, #192	; 0xc0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <HAL_UART_MspInit+0xf8>)
 8000b14:	f000 fc8e 	bl	8001434 <HAL_GPIO_Init>
}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40011400 	.word	0x40011400
 8000b30:	40020800 	.word	0x40020800

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f95c 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <ITM_SendChar+0x48>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <ITM_SendChar+0x48>)
 8000b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b9c:	6013      	str	r3, [r2, #0]

    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <ITM_SendChar+0x4c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <ITM_SendChar+0x4c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]

    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 8000baa:	bf00      	nop
 8000bac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f8      	beq.n	8000bac <ITM_SendChar+0x24>

    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;
 8000bba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000edfc 	.word	0xe000edfc
 8000bd4:	e0000e00 	.word	0xe0000e00

08000bd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00a      	b.n	8000c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bea:	f3af 8000 	nop.w
 8000bee:	4601      	mov	r1, r0
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	60ba      	str	r2, [r7, #8]
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf0      	blt.n	8000bea <_read+0x12>
  }

  return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e009      	b.n	8000c38 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ffab 	bl	8000b88 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf1      	blt.n	8000c24 <_write+0x12>
  }
  return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_close>:

int _close(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c72:	605a      	str	r2, [r3, #4]
  return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_isatty>:

int _isatty(int file)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f001 fe72 	bl	80029cc <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20018000 	.word	0x20018000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	20000534 	.word	0x20000534
 8000d1c:	20000570 	.word	0x20000570

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 fe31 	bl	80029d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc0d 	bl	8000594 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d88:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 8000d8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d90:	2000056c 	.word	0x2000056c

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f931 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe0c 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f93b 	bl	8001076 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f911 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000010 	.word	0x20000010
 8000e38:	2000000c 	.word	0x2000000c

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	20000538 	.word	0x20000538

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000538 	.word	0x20000538

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000010 	.word	0x20000010

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff47 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5c 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_FLASH_Program+0xa0>)
 80010a4:	7e1b      	ldrb	r3, [r3, #24]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_FLASH_Program+0x1e>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e03b      	b.n	8001126 <HAL_FLASH_Program+0x96>
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_FLASH_Program+0xa0>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010b8:	f000 f87c 	bl	80011b4 <FLASH_WaitForLastOperation>
 80010bc:	4603      	mov	r3, r0
 80010be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d12b      	bne.n	800111e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80010cc:	783b      	ldrb	r3, [r7, #0]
 80010ce:	4619      	mov	r1, r3
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f000 f927 	bl	8001324 <FLASH_Program_Byte>
 80010d6:	e016      	b.n	8001106 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	68b8      	ldr	r0, [r7, #8]
 80010e4:	f000 f8fa 	bl	80012dc <FLASH_Program_HalfWord>
 80010e8:	e00d      	b.n	8001106 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d105      	bne.n	80010fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f000 f8cf 	bl	8001298 <FLASH_Program_Word>
 80010fa:	e004      	b.n	8001106 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80010fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f000 f897 	bl	8001234 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001106:	f24c 3050 	movw	r0, #50000	; 0xc350
 800110a:	f000 f853 	bl	80011b4 <FLASH_WaitForLastOperation>
 800110e:	4603      	mov	r3, r0
 8001110:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_FLASH_Program+0xa4>)
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_FLASH_Program+0xa4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_FLASH_Program+0xa0>)
 8001120:	2200      	movs	r2, #0
 8001122:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000053c 	.word	0x2000053c
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_FLASH_Unlock+0x38>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da0b      	bge.n	8001162 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_FLASH_Unlock+0x38>)
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_FLASH_Unlock+0x3c>)
 800114e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_FLASH_Unlock+0x38>)
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_FLASH_Unlock+0x40>)
 8001154:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_FLASH_Unlock+0x38>)
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	da01      	bge.n	8001162 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001162:	79fb      	ldrb	r3, [r7, #7]
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40023c00 	.word	0x40023c00
 8001174:	45670123 	.word	0x45670123
 8001178:	cdef89ab 	.word	0xcdef89ab

0800117c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_FLASH_Lock+0x1c>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_FLASH_Lock+0x1c>)
 8001186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_FLASH_GetError+0x14>)
 80011a2:	69db      	ldr	r3, [r3, #28]
}  
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000053c 	.word	0x2000053c

080011b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <FLASH_WaitForLastOperation+0x78>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80011c6:	f7ff fe4d 	bl	8000e64 <HAL_GetTick>
 80011ca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011cc:	e010      	b.n	80011f0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d00c      	beq.n	80011f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <FLASH_WaitForLastOperation+0x38>
 80011dc:	f7ff fe42 	bl	8000e64 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d201      	bcs.n	80011f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e019      	b.n	8001224 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <FLASH_WaitForLastOperation+0x7c>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e8      	bne.n	80011ce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <FLASH_WaitForLastOperation+0x7c>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <FLASH_WaitForLastOperation+0x7c>)
 800120a:	2201      	movs	r2, #1
 800120c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <FLASH_WaitForLastOperation+0x7c>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800121a:	f000 f8a5 	bl	8001368 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
  
}  
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000053c 	.word	0x2000053c
 8001230:	40023c00 	.word	0x40023c00

08001234 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <FLASH_Program_DoubleWord+0x60>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <FLASH_Program_DoubleWord+0x60>)
 8001246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800124a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <FLASH_Program_DoubleWord+0x60>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <FLASH_Program_DoubleWord+0x60>)
 8001252:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001256:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <FLASH_Program_DoubleWord+0x60>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <FLASH_Program_DoubleWord+0x60>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800126a:	f3bf 8f6f 	isb	sy
}
 800126e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	000a      	movs	r2, r1
 800127e:	2300      	movs	r3, #0
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	3104      	adds	r1, #4
 8001284:	4613      	mov	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40023c00 	.word	0x40023c00

08001298 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <FLASH_Program_Word+0x40>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <FLASH_Program_Word+0x40>)
 80012a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <FLASH_Program_Word+0x40>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <FLASH_Program_Word+0x40>)
 80012b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <FLASH_Program_Word+0x40>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <FLASH_Program_Word+0x40>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023c00 	.word	0x40023c00

080012dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <FLASH_Program_HalfWord+0x44>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <FLASH_Program_HalfWord+0x44>)
 80012ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <FLASH_Program_HalfWord+0x44>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <FLASH_Program_HalfWord+0x44>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <FLASH_Program_HalfWord+0x44>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <FLASH_Program_HalfWord+0x44>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	801a      	strh	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <FLASH_Program_Byte+0x40>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <FLASH_Program_Byte+0x40>)
 8001336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800133a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <FLASH_Program_Byte+0x40>)
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <FLASH_Program_Byte+0x40>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <FLASH_Program_Byte+0x40>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <FLASH_Program_Byte+0x40>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <FLASH_SetErrorCode+0xc4>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 8001382:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <FLASH_SetErrorCode+0xc4>)
 8001386:	2210      	movs	r2, #16
 8001388:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <FLASH_SetErrorCode+0xc4>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 80013fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <FLASH_SetErrorCode+0xc4>)
 80013fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001402:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <FLASH_SetErrorCode+0xc4>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <FLASH_SetErrorCode+0xc8>)
 800141a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <FLASH_SetErrorCode+0xc4>)
 800141e:	2202      	movs	r2, #2
 8001420:	60da      	str	r2, [r3, #12]
  }
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40023c00 	.word	0x40023c00
 8001430:	2000053c 	.word	0x2000053c

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e159      	b.n	8001704 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8148 	bne.w	80016fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a2 	beq.w	80016fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b54      	ldr	r3, [pc, #336]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x202>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x1fe>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a47      	ldr	r2, [pc, #284]	; (800172c <HAL_GPIO_Init+0x2f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x1fa>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a46      	ldr	r2, [pc, #280]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x1f6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a45      	ldr	r2, [pc, #276]	; (8001734 <HAL_GPIO_Init+0x300>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x1f2>
 8001622:	2304      	movs	r3, #4
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001626:	2307      	movs	r3, #7
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x204>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x204>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <HAL_GPIO_Init+0x304>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a24      	ldr	r2, [pc, #144]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f aea2 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e001      	b.n	800175e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b0:	887a      	ldrh	r2, [r7, #2]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	041a      	lsls	r2, r3, #16
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	400b      	ands	r3, r1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e267      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d075      	beq.n	80018de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017f2:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d00c      	beq.n	8001818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b85      	ldr	r3, [pc, #532]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001806:	2b08      	cmp	r3, #8
 8001808:	d112      	bne.n	8001830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001816:	d10b      	bne.n	8001830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b7e      	ldr	r3, [pc, #504]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d05b      	beq.n	80018dc <HAL_RCC_OscConfig+0x108>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d157      	bne.n	80018dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e242      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x74>
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xb0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x98>
 8001852:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6f      	ldr	r2, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xb0>
 800186c:	4b69      	ldr	r3, [pc, #420]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a68      	ldr	r2, [pc, #416]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a65      	ldr	r2, [pc, #404]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff faea 	bl	8000e64 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fae6 	bl	8000e64 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e207      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xc0>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fad6 	bl	8000e64 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fad2 	bl	8000e64 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1f3      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0xe8>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x152>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1c7      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff fa8b 	bl	8000e64 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fa87 	bl	8000e64 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1a8      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4925      	ldr	r1, [pc, #148]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fa6a 	bl	8000e64 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fa66 	bl	8000e64 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e187      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_RCC_OscConfig+0x248>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff fa4a 	bl	8000e64 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fa46 	bl	8000e64 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e167      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_OscConfig+0x240>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x200>
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_OscConfig+0x248>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fa33 	bl	8000e64 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	e00e      	b.n	8001a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff fa2f 	bl	8000e64 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d907      	bls.n	8001a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e150      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470000 	.word	0x42470000
 8001a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ea      	bne.n	8001a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8097 	beq.w	8001b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a7c      	ldr	r2, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b7a      	ldr	r3, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <HAL_RCC_OscConfig+0x474>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a76:	4b74      	ldr	r3, [pc, #464]	; (8001c48 <HAL_RCC_OscConfig+0x474>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a73      	ldr	r2, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x474>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f9ef 	bl	8000e64 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f9eb 	bl	8000e64 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e10c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_OscConfig+0x474>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x2ea>
 8001ab0:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a63      	ldr	r2, [pc, #396]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x324>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x30c>
 8001ac6:	4b5f      	ldr	r3, [pc, #380]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a5e      	ldr	r2, [pc, #376]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x324>
 8001ae0:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a54      	ldr	r2, [pc, #336]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f9b0 	bl	8000e64 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f9ac 	bl	8000e64 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0cb      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCC_OscConfig+0x334>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f99a 	bl	8000e64 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f996 	bl	8000e64 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0b5      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a1 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d05c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d141      	bne.n	8001c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_OscConfig+0x478>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f96a 	bl	8000e64 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f966 	bl	8000e64 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e087      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	491b      	ldr	r1, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x478>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff f93f 	bl	8000e64 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff f93b 	bl	8000e64 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e05c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x416>
 8001c08:	e054      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x478>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f928 	bl	8000e64 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f924 	bl	8000e64 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e045      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x444>
 8001c36:	e03d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e038      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4ec>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d028      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d121      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d11a      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d111      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0cc      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d90c      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d044      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e067      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4934      	ldr	r1, [pc, #208]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7ff f856 	bl	8000e64 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff f852 	bl	8000e64 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e04f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d20c      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f821 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	490a      	ldr	r1, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	5ccb      	ldrb	r3, [r1, r3]
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ffb6 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00
 8001e80:	40023800 	.word	0x40023800
 8001e84:	08004614 	.word	0x08004614
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e94:	b094      	sub	sp, #80	; 0x50
 8001e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea8:	4b79      	ldr	r3, [pc, #484]	; (8002090 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	f200 80e1 	bhi.w	800207c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec2:	e0db      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ec8:	e0db      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eca:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ece:	e0d8      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_GetSysClockFreq+0x200>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
 8001efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f02:	4622      	mov	r2, r4
 8001f04:	462b      	mov	r3, r5
 8001f06:	f04f 0000 	mov.w	r0, #0
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	0159      	lsls	r1, r3, #5
 8001f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f14:	0150      	lsls	r0, r2, #5
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	1a51      	subs	r1, r2, r1
 8001f1e:	6139      	str	r1, [r7, #16]
 8001f20:	4629      	mov	r1, r5
 8001f22:	eb63 0301 	sbc.w	r3, r3, r1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f34:	4659      	mov	r1, fp
 8001f36:	018b      	lsls	r3, r1, #6
 8001f38:	4651      	mov	r1, sl
 8001f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3e:	4651      	mov	r1, sl
 8001f40:	018a      	lsls	r2, r1, #6
 8001f42:	4651      	mov	r1, sl
 8001f44:	ebb2 0801 	subs.w	r8, r2, r1
 8001f48:	4659      	mov	r1, fp
 8001f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f62:	4690      	mov	r8, r2
 8001f64:	4699      	mov	r9, r3
 8001f66:	4623      	mov	r3, r4
 8001f68:	eb18 0303 	adds.w	r3, r8, r3
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	462b      	mov	r3, r5
 8001f70:	eb49 0303 	adc.w	r3, r9, r3
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f82:	4629      	mov	r1, r5
 8001f84:	024b      	lsls	r3, r1, #9
 8001f86:	4621      	mov	r1, r4
 8001f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	024a      	lsls	r2, r1, #9
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f96:	2200      	movs	r2, #0
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fa0:	f7fe f976 	bl	8000290 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fac:	e058      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4611      	mov	r1, r2
 8001fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fc8:	4642      	mov	r2, r8
 8001fca:	464b      	mov	r3, r9
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	0159      	lsls	r1, r3, #5
 8001fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fda:	0150      	lsls	r0, r2, #5
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fe6:	4649      	mov	r1, r9
 8001fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002000:	ebb2 040a 	subs.w	r4, r2, sl
 8002004:	eb63 050b 	sbc.w	r5, r3, fp
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	00eb      	lsls	r3, r5, #3
 8002012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002016:	00e2      	lsls	r2, r4, #3
 8002018:	4614      	mov	r4, r2
 800201a:	461d      	mov	r5, r3
 800201c:	4643      	mov	r3, r8
 800201e:	18e3      	adds	r3, r4, r3
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	464b      	mov	r3, r9
 8002024:	eb45 0303 	adc.w	r3, r5, r3
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002036:	4629      	mov	r1, r5
 8002038:	028b      	lsls	r3, r1, #10
 800203a:	4621      	mov	r1, r4
 800203c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002040:	4621      	mov	r1, r4
 8002042:	028a      	lsls	r2, r1, #10
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204a:	2200      	movs	r2, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	61fa      	str	r2, [r7, #28]
 8002050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002054:	f7fe f91c 	bl	8000290 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4613      	mov	r3, r2
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800207a:	e002      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetSysClockFreq+0x204>)
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002084:	4618      	mov	r0, r3
 8002086:	3750      	adds	r7, #80	; 0x50
 8002088:	46bd      	mov	sp, r7
 800208a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	00f42400 	.word	0x00f42400
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08004624 	.word	0x08004624

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08004624 	.word	0x08004624

08002104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e03f      	b.n	8002196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fc84 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9cb 	bl	80024e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800215c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800216c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800217c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	; 0x28
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d17c      	bne.n	80022b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_UART_Transmit+0x2c>
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e075      	b.n	80022ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Transmit+0x3e>
 80021d8:	2302      	movs	r3, #2
 80021da:	e06e      	b.n	80022ba <HAL_UART_Transmit+0x11c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe fe37 	bl	8000e64 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220c:	d108      	bne.n	8002220 <HAL_UART_Transmit+0x82>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e003      	b.n	8002228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002230:	e02a      	b.n	8002288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f8e2 	bl	8002406 <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e036      	b.n	80022ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	3302      	adds	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e007      	b.n	800227a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1cf      	bne.n	8002232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	; 0x40
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f8b2 	bl	8002406 <UART_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	; 0x28
 80022c6:	af02      	add	r7, sp, #8
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	f040 808c 	bne.w	80023fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_UART_Receive+0x2e>
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e084      	b.n	80023fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Receive+0x40>
 80022fe:	2302      	movs	r3, #2
 8002300:	e07d      	b.n	80023fe <HAL_UART_Receive+0x13c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2222      	movs	r2, #34	; 0x22
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231e:	f7fe fda1 	bl	8000e64 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002338:	d108      	bne.n	800234c <HAL_UART_Receive+0x8a>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d104      	bne.n	800234c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e003      	b.n	8002354 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800235c:	e043      	b.n	80023e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	2120      	movs	r1, #32
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f84c 	bl	8002406 <UART_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e042      	b.n	80023fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	b29a      	uxth	r2, r3
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	3302      	adds	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e01f      	b.n	80023d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d007      	beq.n	80023b2 <HAL_UART_Receive+0xf0>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10a      	bne.n	80023c0 <HAL_UART_Receive+0xfe>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e008      	b.n	80023d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1b6      	bne.n	800235e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b090      	sub	sp, #64	; 0x40
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4613      	mov	r3, r2
 8002414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002416:	e050      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d04c      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <UART_WaitOnFlagUntilTimeout+0x30>
 8002426:	f7fe fd1d 	bl	8000e64 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002432:	429a      	cmp	r2, r3
 8002434:	d241      	bcs.n	80024ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	330c      	adds	r3, #12
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002456:	637a      	str	r2, [r7, #52]	; 0x34
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800245c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e5      	bne.n	8002436 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3314      	adds	r3, #20
 8002470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	613b      	str	r3, [r7, #16]
   return(result);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800248a:	623a      	str	r2, [r7, #32]
 800248c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	69f9      	ldr	r1, [r7, #28]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	e841 2300 	strex	r3, r2, [r1]
 8002496:	61bb      	str	r3, [r7, #24]
   return(result);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e5      	bne.n	800246a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e00f      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4013      	ands	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d09f      	beq.n	8002418 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3740      	adds	r7, #64	; 0x40
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b0c0      	sub	sp, #256	; 0x100
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	ea40 0301 	orr.w	r3, r0, r1
 800250c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	431a      	orrs	r2, r3
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800253c:	f021 010c 	bic.w	r1, r1, #12
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800254a:	430b      	orrs	r3, r1
 800254c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800254e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800255a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255e:	6999      	ldr	r1, [r3, #24]
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	ea40 0301 	orr.w	r3, r0, r1
 800256a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b8f      	ldr	r3, [pc, #572]	; (80027b0 <UART_SetConfig+0x2cc>)
 8002574:	429a      	cmp	r2, r3
 8002576:	d005      	beq.n	8002584 <UART_SetConfig+0xa0>
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b8d      	ldr	r3, [pc, #564]	; (80027b4 <UART_SetConfig+0x2d0>)
 8002580:	429a      	cmp	r2, r3
 8002582:	d104      	bne.n	800258e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002584:	f7ff fdaa 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8002588:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800258c:	e003      	b.n	8002596 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800258e:	f7ff fd91 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8002592:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a0:	f040 810c 	bne.w	80027bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	1891      	adds	r1, r2, r2
 80025bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80025be:	415b      	adcs	r3, r3
 80025c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025c6:	4621      	mov	r1, r4
 80025c8:	eb12 0801 	adds.w	r8, r2, r1
 80025cc:	4629      	mov	r1, r5
 80025ce:	eb43 0901 	adc.w	r9, r3, r1
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025e6:	4690      	mov	r8, r2
 80025e8:	4699      	mov	r9, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	eb18 0303 	adds.w	r3, r8, r3
 80025f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025f4:	462b      	mov	r3, r5
 80025f6:	eb49 0303 	adc.w	r3, r9, r3
 80025fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800260a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800260e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002612:	460b      	mov	r3, r1
 8002614:	18db      	adds	r3, r3, r3
 8002616:	653b      	str	r3, [r7, #80]	; 0x50
 8002618:	4613      	mov	r3, r2
 800261a:	eb42 0303 	adc.w	r3, r2, r3
 800261e:	657b      	str	r3, [r7, #84]	; 0x54
 8002620:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002628:	f7fd fe32 	bl	8000290 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <UART_SetConfig+0x2d4>)
 8002632:	fba3 2302 	umull	r2, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	011c      	lsls	r4, r3, #4
 800263a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263e:	2200      	movs	r2, #0
 8002640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002644:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002648:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800264c:	4642      	mov	r2, r8
 800264e:	464b      	mov	r3, r9
 8002650:	1891      	adds	r1, r2, r2
 8002652:	64b9      	str	r1, [r7, #72]	; 0x48
 8002654:	415b      	adcs	r3, r3
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002658:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800265c:	4641      	mov	r1, r8
 800265e:	eb12 0a01 	adds.w	sl, r2, r1
 8002662:	4649      	mov	r1, r9
 8002664:	eb43 0b01 	adc.w	fp, r3, r1
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002674:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800267c:	4692      	mov	sl, r2
 800267e:	469b      	mov	fp, r3
 8002680:	4643      	mov	r3, r8
 8002682:	eb1a 0303 	adds.w	r3, sl, r3
 8002686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800268a:	464b      	mov	r3, r9
 800268c:	eb4b 0303 	adc.w	r3, fp, r3
 8002690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026a8:	460b      	mov	r3, r1
 80026aa:	18db      	adds	r3, r3, r3
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
 80026ae:	4613      	mov	r3, r2
 80026b0:	eb42 0303 	adc.w	r3, r2, r3
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
 80026b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026be:	f7fd fde7 	bl	8000290 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <UART_SetConfig+0x2d4>)
 80026ca:	fba3 2301 	umull	r2, r3, r3, r1
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2264      	movs	r2, #100	; 0x64
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	1acb      	subs	r3, r1, r3
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <UART_SetConfig+0x2d4>)
 80026e0:	fba3 2302 	umull	r2, r3, r3, r2
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026ec:	441c      	add	r4, r3
 80026ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	1891      	adds	r1, r2, r2
 8002706:	63b9      	str	r1, [r7, #56]	; 0x38
 8002708:	415b      	adcs	r3, r3
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002710:	4641      	mov	r1, r8
 8002712:	1851      	adds	r1, r2, r1
 8002714:	6339      	str	r1, [r7, #48]	; 0x30
 8002716:	4649      	mov	r1, r9
 8002718:	414b      	adcs	r3, r1
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002728:	4659      	mov	r1, fp
 800272a:	00cb      	lsls	r3, r1, #3
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002732:	4651      	mov	r1, sl
 8002734:	00ca      	lsls	r2, r1, #3
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	4603      	mov	r3, r0
 800273c:	4642      	mov	r2, r8
 800273e:	189b      	adds	r3, r3, r2
 8002740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002744:	464b      	mov	r3, r9
 8002746:	460a      	mov	r2, r1
 8002748:	eb42 0303 	adc.w	r3, r2, r3
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800275c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002764:	460b      	mov	r3, r1
 8002766:	18db      	adds	r3, r3, r3
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	4613      	mov	r3, r2
 800276c:	eb42 0303 	adc.w	r3, r2, r3
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002776:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800277a:	f7fd fd89 	bl	8000290 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <UART_SetConfig+0x2d4>)
 8002784:	fba3 1302 	umull	r1, r3, r3, r2
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	2164      	movs	r1, #100	; 0x64
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	3332      	adds	r3, #50	; 0x32
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <UART_SetConfig+0x2d4>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	f003 0207 	and.w	r2, r3, #7
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4422      	add	r2, r4
 80027aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027ac:	e105      	b.n	80029ba <UART_SetConfig+0x4d6>
 80027ae:	bf00      	nop
 80027b0:	40011000 	.word	0x40011000
 80027b4:	40011400 	.word	0x40011400
 80027b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027c0:	2200      	movs	r2, #0
 80027c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027ce:	4642      	mov	r2, r8
 80027d0:	464b      	mov	r3, r9
 80027d2:	1891      	adds	r1, r2, r2
 80027d4:	6239      	str	r1, [r7, #32]
 80027d6:	415b      	adcs	r3, r3
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
 80027da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027de:	4641      	mov	r1, r8
 80027e0:	1854      	adds	r4, r2, r1
 80027e2:	4649      	mov	r1, r9
 80027e4:	eb43 0501 	adc.w	r5, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	00eb      	lsls	r3, r5, #3
 80027f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f6:	00e2      	lsls	r2, r4, #3
 80027f8:	4614      	mov	r4, r2
 80027fa:	461d      	mov	r5, r3
 80027fc:	4643      	mov	r3, r8
 80027fe:	18e3      	adds	r3, r4, r3
 8002800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002804:	464b      	mov	r3, r9
 8002806:	eb45 0303 	adc.w	r3, r5, r3
 800280a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800281a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800282a:	4629      	mov	r1, r5
 800282c:	008b      	lsls	r3, r1, #2
 800282e:	4621      	mov	r1, r4
 8002830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002834:	4621      	mov	r1, r4
 8002836:	008a      	lsls	r2, r1, #2
 8002838:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800283c:	f7fd fd28 	bl	8000290 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <UART_SetConfig+0x4e4>)
 8002846:	fba3 2302 	umull	r2, r3, r3, r2
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	011c      	lsls	r4, r3, #4
 800284e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002852:	2200      	movs	r2, #0
 8002854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800285c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002860:	4642      	mov	r2, r8
 8002862:	464b      	mov	r3, r9
 8002864:	1891      	adds	r1, r2, r2
 8002866:	61b9      	str	r1, [r7, #24]
 8002868:	415b      	adcs	r3, r3
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002870:	4641      	mov	r1, r8
 8002872:	1851      	adds	r1, r2, r1
 8002874:	6139      	str	r1, [r7, #16]
 8002876:	4649      	mov	r1, r9
 8002878:	414b      	adcs	r3, r1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002888:	4659      	mov	r1, fp
 800288a:	00cb      	lsls	r3, r1, #3
 800288c:	4651      	mov	r1, sl
 800288e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002892:	4651      	mov	r1, sl
 8002894:	00ca      	lsls	r2, r1, #3
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	4603      	mov	r3, r0
 800289c:	4642      	mov	r2, r8
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028a4:	464b      	mov	r3, r9
 80028a6:	460a      	mov	r2, r1
 80028a8:	eb42 0303 	adc.w	r3, r2, r3
 80028ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028c8:	4649      	mov	r1, r9
 80028ca:	008b      	lsls	r3, r1, #2
 80028cc:	4641      	mov	r1, r8
 80028ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d2:	4641      	mov	r1, r8
 80028d4:	008a      	lsls	r2, r1, #2
 80028d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028da:	f7fd fcd9 	bl	8000290 <__aeabi_uldivmod>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <UART_SetConfig+0x4e4>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	2164      	movs	r1, #100	; 0x64
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	3332      	adds	r3, #50	; 0x32
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <UART_SetConfig+0x4e4>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002902:	441c      	add	r4, r3
 8002904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002908:	2200      	movs	r2, #0
 800290a:	673b      	str	r3, [r7, #112]	; 0x70
 800290c:	677a      	str	r2, [r7, #116]	; 0x74
 800290e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002912:	4642      	mov	r2, r8
 8002914:	464b      	mov	r3, r9
 8002916:	1891      	adds	r1, r2, r2
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	415b      	adcs	r3, r3
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002922:	4641      	mov	r1, r8
 8002924:	1851      	adds	r1, r2, r1
 8002926:	6039      	str	r1, [r7, #0]
 8002928:	4649      	mov	r1, r9
 800292a:	414b      	adcs	r3, r1
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800293a:	4659      	mov	r1, fp
 800293c:	00cb      	lsls	r3, r1, #3
 800293e:	4651      	mov	r1, sl
 8002940:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002944:	4651      	mov	r1, sl
 8002946:	00ca      	lsls	r2, r1, #3
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	4603      	mov	r3, r0
 800294e:	4642      	mov	r2, r8
 8002950:	189b      	adds	r3, r3, r2
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
 8002954:	464b      	mov	r3, r9
 8002956:	460a      	mov	r2, r1
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	663b      	str	r3, [r7, #96]	; 0x60
 8002968:	667a      	str	r2, [r7, #100]	; 0x64
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002976:	4649      	mov	r1, r9
 8002978:	008b      	lsls	r3, r1, #2
 800297a:	4641      	mov	r1, r8
 800297c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002980:	4641      	mov	r1, r8
 8002982:	008a      	lsls	r2, r1, #2
 8002984:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002988:	f7fd fc82 	bl	8000290 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <UART_SetConfig+0x4e4>)
 8002992:	fba3 1302 	umull	r1, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2164      	movs	r1, #100	; 0x64
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	3332      	adds	r3, #50	; 0x32
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <UART_SetConfig+0x4e4>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	f003 020f 	and.w	r2, r3, #15
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4422      	add	r2, r4
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029c0:	46bd      	mov	sp, r7
 80029c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c6:	bf00      	nop
 80029c8:	51eb851f 	.word	0x51eb851f

080029cc <__errno>:
 80029cc:	4b01      	ldr	r3, [pc, #4]	; (80029d4 <__errno+0x8>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000014 	.word	0x20000014

080029d8 <__libc_init_array>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4d0d      	ldr	r5, [pc, #52]	; (8002a10 <__libc_init_array+0x38>)
 80029dc:	4c0d      	ldr	r4, [pc, #52]	; (8002a14 <__libc_init_array+0x3c>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	2600      	movs	r6, #0
 80029e4:	42a6      	cmp	r6, r4
 80029e6:	d109      	bne.n	80029fc <__libc_init_array+0x24>
 80029e8:	4d0b      	ldr	r5, [pc, #44]	; (8002a18 <__libc_init_array+0x40>)
 80029ea:	4c0c      	ldr	r4, [pc, #48]	; (8002a1c <__libc_init_array+0x44>)
 80029ec:	f001 fd50 	bl	8004490 <_init>
 80029f0:	1b64      	subs	r4, r4, r5
 80029f2:	10a4      	asrs	r4, r4, #2
 80029f4:	2600      	movs	r6, #0
 80029f6:	42a6      	cmp	r6, r4
 80029f8:	d105      	bne.n	8002a06 <__libc_init_array+0x2e>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a00:	4798      	blx	r3
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7ee      	b.n	80029e4 <__libc_init_array+0xc>
 8002a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0a:	4798      	blx	r3
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7f2      	b.n	80029f6 <__libc_init_array+0x1e>
 8002a10:	080047e8 	.word	0x080047e8
 8002a14:	080047e8 	.word	0x080047e8
 8002a18:	080047e8 	.word	0x080047e8
 8002a1c:	080047ec 	.word	0x080047ec

08002a20 <memset>:
 8002a20:	4402      	add	r2, r0
 8002a22:	4603      	mov	r3, r0
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d100      	bne.n	8002a2a <memset+0xa>
 8002a28:	4770      	bx	lr
 8002a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2e:	e7f9      	b.n	8002a24 <memset+0x4>

08002a30 <iprintf>:
 8002a30:	b40f      	push	{r0, r1, r2, r3}
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <iprintf+0x2c>)
 8002a34:	b513      	push	{r0, r1, r4, lr}
 8002a36:	681c      	ldr	r4, [r3, #0]
 8002a38:	b124      	cbz	r4, 8002a44 <iprintf+0x14>
 8002a3a:	69a3      	ldr	r3, [r4, #24]
 8002a3c:	b913      	cbnz	r3, 8002a44 <iprintf+0x14>
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f000 fb1c 	bl	800307c <__sinit>
 8002a44:	ab05      	add	r3, sp, #20
 8002a46:	9a04      	ldr	r2, [sp, #16]
 8002a48:	68a1      	ldr	r1, [r4, #8]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f000 ff09 	bl	8003864 <_vfiprintf_r>
 8002a52:	b002      	add	sp, #8
 8002a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a58:	b004      	add	sp, #16
 8002a5a:	4770      	bx	lr
 8002a5c:	20000014 	.word	0x20000014

08002a60 <_puts_r>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	460e      	mov	r6, r1
 8002a64:	4605      	mov	r5, r0
 8002a66:	b118      	cbz	r0, 8002a70 <_puts_r+0x10>
 8002a68:	6983      	ldr	r3, [r0, #24]
 8002a6a:	b90b      	cbnz	r3, 8002a70 <_puts_r+0x10>
 8002a6c:	f000 fb06 	bl	800307c <__sinit>
 8002a70:	69ab      	ldr	r3, [r5, #24]
 8002a72:	68ac      	ldr	r4, [r5, #8]
 8002a74:	b913      	cbnz	r3, 8002a7c <_puts_r+0x1c>
 8002a76:	4628      	mov	r0, r5
 8002a78:	f000 fb00 	bl	800307c <__sinit>
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <_puts_r+0xd0>)
 8002a7e:	429c      	cmp	r4, r3
 8002a80:	d120      	bne.n	8002ac4 <_puts_r+0x64>
 8002a82:	686c      	ldr	r4, [r5, #4]
 8002a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a86:	07db      	lsls	r3, r3, #31
 8002a88:	d405      	bmi.n	8002a96 <_puts_r+0x36>
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	0598      	lsls	r0, r3, #22
 8002a8e:	d402      	bmi.n	8002a96 <_puts_r+0x36>
 8002a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a92:	f000 fb91 	bl	80031b8 <__retarget_lock_acquire_recursive>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	0719      	lsls	r1, r3, #28
 8002a9a:	d51d      	bpl.n	8002ad8 <_puts_r+0x78>
 8002a9c:	6923      	ldr	r3, [r4, #16]
 8002a9e:	b1db      	cbz	r3, 8002ad8 <_puts_r+0x78>
 8002aa0:	3e01      	subs	r6, #1
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60a3      	str	r3, [r4, #8]
 8002aac:	bb39      	cbnz	r1, 8002afe <_puts_r+0x9e>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da38      	bge.n	8002b24 <_puts_r+0xc4>
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f000 f8e4 	bl	8002c84 <__swbuf_r>
 8002abc:	3001      	adds	r0, #1
 8002abe:	d011      	beq.n	8002ae4 <_puts_r+0x84>
 8002ac0:	250a      	movs	r5, #10
 8002ac2:	e011      	b.n	8002ae8 <_puts_r+0x88>
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <_puts_r+0xd4>)
 8002ac6:	429c      	cmp	r4, r3
 8002ac8:	d101      	bne.n	8002ace <_puts_r+0x6e>
 8002aca:	68ac      	ldr	r4, [r5, #8]
 8002acc:	e7da      	b.n	8002a84 <_puts_r+0x24>
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <_puts_r+0xd8>)
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	bf08      	it	eq
 8002ad4:	68ec      	ldreq	r4, [r5, #12]
 8002ad6:	e7d5      	b.n	8002a84 <_puts_r+0x24>
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4628      	mov	r0, r5
 8002adc:	f000 f936 	bl	8002d4c <__swsetup_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d0dd      	beq.n	8002aa0 <_puts_r+0x40>
 8002ae4:	f04f 35ff 	mov.w	r5, #4294967295
 8002ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aea:	07da      	lsls	r2, r3, #31
 8002aec:	d405      	bmi.n	8002afa <_puts_r+0x9a>
 8002aee:	89a3      	ldrh	r3, [r4, #12]
 8002af0:	059b      	lsls	r3, r3, #22
 8002af2:	d402      	bmi.n	8002afa <_puts_r+0x9a>
 8002af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002af6:	f000 fb60 	bl	80031ba <__retarget_lock_release_recursive>
 8002afa:	4628      	mov	r0, r5
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da04      	bge.n	8002b0c <_puts_r+0xac>
 8002b02:	69a2      	ldr	r2, [r4, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dc06      	bgt.n	8002b16 <_puts_r+0xb6>
 8002b08:	290a      	cmp	r1, #10
 8002b0a:	d004      	beq.n	8002b16 <_puts_r+0xb6>
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	6022      	str	r2, [r4, #0]
 8002b12:	7019      	strb	r1, [r3, #0]
 8002b14:	e7c5      	b.n	8002aa2 <_puts_r+0x42>
 8002b16:	4622      	mov	r2, r4
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f000 f8b3 	bl	8002c84 <__swbuf_r>
 8002b1e:	3001      	adds	r0, #1
 8002b20:	d1bf      	bne.n	8002aa2 <_puts_r+0x42>
 8002b22:	e7df      	b.n	8002ae4 <_puts_r+0x84>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	250a      	movs	r5, #10
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	6022      	str	r2, [r4, #0]
 8002b2c:	701d      	strb	r5, [r3, #0]
 8002b2e:	e7db      	b.n	8002ae8 <_puts_r+0x88>
 8002b30:	08004650 	.word	0x08004650
 8002b34:	08004670 	.word	0x08004670
 8002b38:	08004630 	.word	0x08004630

08002b3c <puts>:
 8002b3c:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <puts+0xc>)
 8002b3e:	4601      	mov	r1, r0
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	f7ff bf8d 	b.w	8002a60 <_puts_r>
 8002b46:	bf00      	nop
 8002b48:	20000014 	.word	0x20000014

08002b4c <siscanf>:
 8002b4c:	b40e      	push	{r1, r2, r3}
 8002b4e:	b510      	push	{r4, lr}
 8002b50:	b09f      	sub	sp, #124	; 0x7c
 8002b52:	ac21      	add	r4, sp, #132	; 0x84
 8002b54:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002b58:	f854 2b04 	ldr.w	r2, [r4], #4
 8002b5c:	9201      	str	r2, [sp, #4]
 8002b5e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002b62:	9004      	str	r0, [sp, #16]
 8002b64:	9008      	str	r0, [sp, #32]
 8002b66:	f7fd fb3b 	bl	80001e0 <strlen>
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <siscanf+0x50>)
 8002b6c:	9005      	str	r0, [sp, #20]
 8002b6e:	9009      	str	r0, [sp, #36]	; 0x24
 8002b70:	930d      	str	r3, [sp, #52]	; 0x34
 8002b72:	480b      	ldr	r0, [pc, #44]	; (8002ba0 <siscanf+0x54>)
 8002b74:	9a01      	ldr	r2, [sp, #4]
 8002b76:	6800      	ldr	r0, [r0, #0]
 8002b78:	9403      	str	r4, [sp, #12]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	9311      	str	r3, [sp, #68]	; 0x44
 8002b7e:	9316      	str	r3, [sp, #88]	; 0x58
 8002b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b84:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002b88:	a904      	add	r1, sp, #16
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	f000 fcc8 	bl	8003520 <__ssvfiscanf_r>
 8002b90:	b01f      	add	sp, #124	; 0x7c
 8002b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b96:	b003      	add	sp, #12
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	08002bc7 	.word	0x08002bc7
 8002ba0:	20000014 	.word	0x20000014

08002ba4 <__sread>:
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bac:	f001 fa70 	bl	8004090 <_read_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	bfab      	itete	ge
 8002bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bb8:	181b      	addge	r3, r3, r0
 8002bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bbe:	bfac      	ite	ge
 8002bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bc2:	81a3      	strhlt	r3, [r4, #12]
 8002bc4:	bd10      	pop	{r4, pc}

08002bc6 <__seofread>:
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	4770      	bx	lr

08002bca <__swrite>:
 8002bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bce:	461f      	mov	r7, r3
 8002bd0:	898b      	ldrh	r3, [r1, #12]
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	4616      	mov	r6, r2
 8002bda:	d505      	bpl.n	8002be8 <__swrite+0x1e>
 8002bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be0:	2302      	movs	r3, #2
 8002be2:	2200      	movs	r2, #0
 8002be4:	f000 faea 	bl	80031bc <_lseek_r>
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfe:	f000 b893 	b.w	8002d28 <_write_r>

08002c02 <__sseek>:
 8002c02:	b510      	push	{r4, lr}
 8002c04:	460c      	mov	r4, r1
 8002c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c0a:	f000 fad7 	bl	80031bc <_lseek_r>
 8002c0e:	1c43      	adds	r3, r0, #1
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	bf15      	itete	ne
 8002c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c1e:	81a3      	strheq	r3, [r4, #12]
 8002c20:	bf18      	it	ne
 8002c22:	81a3      	strhne	r3, [r4, #12]
 8002c24:	bd10      	pop	{r4, pc}

08002c26 <__sclose>:
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 b8fd 	b.w	8002e28 <_close_r>

08002c2e <strncmp>:
 8002c2e:	b510      	push	{r4, lr}
 8002c30:	b17a      	cbz	r2, 8002c52 <strncmp+0x24>
 8002c32:	4603      	mov	r3, r0
 8002c34:	3901      	subs	r1, #1
 8002c36:	1884      	adds	r4, r0, r2
 8002c38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002c3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002c40:	4290      	cmp	r0, r2
 8002c42:	d101      	bne.n	8002c48 <strncmp+0x1a>
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d101      	bne.n	8002c4c <strncmp+0x1e>
 8002c48:	1a80      	subs	r0, r0, r2
 8002c4a:	bd10      	pop	{r4, pc}
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d1f3      	bne.n	8002c38 <strncmp+0xa>
 8002c50:	e7fa      	b.n	8002c48 <strncmp+0x1a>
 8002c52:	4610      	mov	r0, r2
 8002c54:	e7f9      	b.n	8002c4a <strncmp+0x1c>

08002c56 <strstr>:
 8002c56:	780a      	ldrb	r2, [r1, #0]
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	b96a      	cbnz	r2, 8002c78 <strstr+0x22>
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d109      	bne.n	8002c76 <strstr+0x20>
 8002c62:	460c      	mov	r4, r1
 8002c64:	4605      	mov	r5, r0
 8002c66:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f6      	beq.n	8002c5c <strstr+0x6>
 8002c6e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002c72:	429e      	cmp	r6, r3
 8002c74:	d0f7      	beq.n	8002c66 <strstr+0x10>
 8002c76:	3001      	adds	r0, #1
 8002c78:	7803      	ldrb	r3, [r0, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ef      	bne.n	8002c5e <strstr+0x8>
 8002c7e:	4618      	mov	r0, r3
 8002c80:	e7ec      	b.n	8002c5c <strstr+0x6>
	...

08002c84 <__swbuf_r>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	460e      	mov	r6, r1
 8002c88:	4614      	mov	r4, r2
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	b118      	cbz	r0, 8002c96 <__swbuf_r+0x12>
 8002c8e:	6983      	ldr	r3, [r0, #24]
 8002c90:	b90b      	cbnz	r3, 8002c96 <__swbuf_r+0x12>
 8002c92:	f000 f9f3 	bl	800307c <__sinit>
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <__swbuf_r+0x98>)
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	d12b      	bne.n	8002cf4 <__swbuf_r+0x70>
 8002c9c:	686c      	ldr	r4, [r5, #4]
 8002c9e:	69a3      	ldr	r3, [r4, #24]
 8002ca0:	60a3      	str	r3, [r4, #8]
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	071a      	lsls	r2, r3, #28
 8002ca6:	d52f      	bpl.n	8002d08 <__swbuf_r+0x84>
 8002ca8:	6923      	ldr	r3, [r4, #16]
 8002caa:	b36b      	cbz	r3, 8002d08 <__swbuf_r+0x84>
 8002cac:	6923      	ldr	r3, [r4, #16]
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	1ac0      	subs	r0, r0, r3
 8002cb2:	6963      	ldr	r3, [r4, #20]
 8002cb4:	b2f6      	uxtb	r6, r6
 8002cb6:	4283      	cmp	r3, r0
 8002cb8:	4637      	mov	r7, r6
 8002cba:	dc04      	bgt.n	8002cc6 <__swbuf_r+0x42>
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f000 f948 	bl	8002f54 <_fflush_r>
 8002cc4:	bb30      	cbnz	r0, 8002d14 <__swbuf_r+0x90>
 8002cc6:	68a3      	ldr	r3, [r4, #8]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60a3      	str	r3, [r4, #8]
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	6022      	str	r2, [r4, #0]
 8002cd2:	701e      	strb	r6, [r3, #0]
 8002cd4:	6963      	ldr	r3, [r4, #20]
 8002cd6:	3001      	adds	r0, #1
 8002cd8:	4283      	cmp	r3, r0
 8002cda:	d004      	beq.n	8002ce6 <__swbuf_r+0x62>
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	07db      	lsls	r3, r3, #31
 8002ce0:	d506      	bpl.n	8002cf0 <__swbuf_r+0x6c>
 8002ce2:	2e0a      	cmp	r6, #10
 8002ce4:	d104      	bne.n	8002cf0 <__swbuf_r+0x6c>
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f000 f933 	bl	8002f54 <_fflush_r>
 8002cee:	b988      	cbnz	r0, 8002d14 <__swbuf_r+0x90>
 8002cf0:	4638      	mov	r0, r7
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <__swbuf_r+0x9c>)
 8002cf6:	429c      	cmp	r4, r3
 8002cf8:	d101      	bne.n	8002cfe <__swbuf_r+0x7a>
 8002cfa:	68ac      	ldr	r4, [r5, #8]
 8002cfc:	e7cf      	b.n	8002c9e <__swbuf_r+0x1a>
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <__swbuf_r+0xa0>)
 8002d00:	429c      	cmp	r4, r3
 8002d02:	bf08      	it	eq
 8002d04:	68ec      	ldreq	r4, [r5, #12]
 8002d06:	e7ca      	b.n	8002c9e <__swbuf_r+0x1a>
 8002d08:	4621      	mov	r1, r4
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f000 f81e 	bl	8002d4c <__swsetup_r>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d0cb      	beq.n	8002cac <__swbuf_r+0x28>
 8002d14:	f04f 37ff 	mov.w	r7, #4294967295
 8002d18:	e7ea      	b.n	8002cf0 <__swbuf_r+0x6c>
 8002d1a:	bf00      	nop
 8002d1c:	08004650 	.word	0x08004650
 8002d20:	08004670 	.word	0x08004670
 8002d24:	08004630 	.word	0x08004630

08002d28 <_write_r>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4d07      	ldr	r5, [pc, #28]	; (8002d48 <_write_r+0x20>)
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	4608      	mov	r0, r1
 8002d30:	4611      	mov	r1, r2
 8002d32:	2200      	movs	r2, #0
 8002d34:	602a      	str	r2, [r5, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f7fd ff6b 	bl	8000c12 <_write>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_write_r+0x1e>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_write_r+0x1e>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	20000568 	.word	0x20000568

08002d4c <__swsetup_r>:
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <__swsetup_r+0xcc>)
 8002d4e:	b570      	push	{r4, r5, r6, lr}
 8002d50:	681d      	ldr	r5, [r3, #0]
 8002d52:	4606      	mov	r6, r0
 8002d54:	460c      	mov	r4, r1
 8002d56:	b125      	cbz	r5, 8002d62 <__swsetup_r+0x16>
 8002d58:	69ab      	ldr	r3, [r5, #24]
 8002d5a:	b913      	cbnz	r3, 8002d62 <__swsetup_r+0x16>
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f000 f98d 	bl	800307c <__sinit>
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <__swsetup_r+0xd0>)
 8002d64:	429c      	cmp	r4, r3
 8002d66:	d10f      	bne.n	8002d88 <__swsetup_r+0x3c>
 8002d68:	686c      	ldr	r4, [r5, #4]
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d70:	0719      	lsls	r1, r3, #28
 8002d72:	d42c      	bmi.n	8002dce <__swsetup_r+0x82>
 8002d74:	06dd      	lsls	r5, r3, #27
 8002d76:	d411      	bmi.n	8002d9c <__swsetup_r+0x50>
 8002d78:	2309      	movs	r3, #9
 8002d7a:	6033      	str	r3, [r6, #0]
 8002d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	f04f 30ff 	mov.w	r0, #4294967295
 8002d86:	e03e      	b.n	8002e06 <__swsetup_r+0xba>
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <__swsetup_r+0xd4>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d101      	bne.n	8002d92 <__swsetup_r+0x46>
 8002d8e:	68ac      	ldr	r4, [r5, #8]
 8002d90:	e7eb      	b.n	8002d6a <__swsetup_r+0x1e>
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <__swsetup_r+0xd8>)
 8002d94:	429c      	cmp	r4, r3
 8002d96:	bf08      	it	eq
 8002d98:	68ec      	ldreq	r4, [r5, #12]
 8002d9a:	e7e6      	b.n	8002d6a <__swsetup_r+0x1e>
 8002d9c:	0758      	lsls	r0, r3, #29
 8002d9e:	d512      	bpl.n	8002dc6 <__swsetup_r+0x7a>
 8002da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002da2:	b141      	cbz	r1, 8002db6 <__swsetup_r+0x6a>
 8002da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002da8:	4299      	cmp	r1, r3
 8002daa:	d002      	beq.n	8002db2 <__swsetup_r+0x66>
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 fa7d 	bl	80032ac <_free_r>
 8002db2:	2300      	movs	r3, #0
 8002db4:	6363      	str	r3, [r4, #52]	; 0x34
 8002db6:	89a3      	ldrh	r3, [r4, #12]
 8002db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6063      	str	r3, [r4, #4]
 8002dc2:	6923      	ldr	r3, [r4, #16]
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	6923      	ldr	r3, [r4, #16]
 8002dd0:	b94b      	cbnz	r3, 8002de6 <__swsetup_r+0x9a>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ddc:	d003      	beq.n	8002de6 <__swsetup_r+0x9a>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4630      	mov	r0, r6
 8002de2:	f000 fa23 	bl	800322c <__smakebuf_r>
 8002de6:	89a0      	ldrh	r0, [r4, #12]
 8002de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dec:	f010 0301 	ands.w	r3, r0, #1
 8002df0:	d00a      	beq.n	8002e08 <__swsetup_r+0xbc>
 8002df2:	2300      	movs	r3, #0
 8002df4:	60a3      	str	r3, [r4, #8]
 8002df6:	6963      	ldr	r3, [r4, #20]
 8002df8:	425b      	negs	r3, r3
 8002dfa:	61a3      	str	r3, [r4, #24]
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	b943      	cbnz	r3, 8002e12 <__swsetup_r+0xc6>
 8002e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e04:	d1ba      	bne.n	8002d7c <__swsetup_r+0x30>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	0781      	lsls	r1, r0, #30
 8002e0a:	bf58      	it	pl
 8002e0c:	6963      	ldrpl	r3, [r4, #20]
 8002e0e:	60a3      	str	r3, [r4, #8]
 8002e10:	e7f4      	b.n	8002dfc <__swsetup_r+0xb0>
 8002e12:	2000      	movs	r0, #0
 8002e14:	e7f7      	b.n	8002e06 <__swsetup_r+0xba>
 8002e16:	bf00      	nop
 8002e18:	20000014 	.word	0x20000014
 8002e1c:	08004650 	.word	0x08004650
 8002e20:	08004670 	.word	0x08004670
 8002e24:	08004630 	.word	0x08004630

08002e28 <_close_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4d06      	ldr	r5, [pc, #24]	; (8002e44 <_close_r+0x1c>)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	602b      	str	r3, [r5, #0]
 8002e34:	f7fd ff09 	bl	8000c4a <_close>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d102      	bne.n	8002e42 <_close_r+0x1a>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	b103      	cbz	r3, 8002e42 <_close_r+0x1a>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	20000568 	.word	0x20000568

08002e48 <__sflush_r>:
 8002e48:	898a      	ldrh	r2, [r1, #12]
 8002e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	4605      	mov	r5, r0
 8002e50:	0710      	lsls	r0, r2, #28
 8002e52:	460c      	mov	r4, r1
 8002e54:	d458      	bmi.n	8002f08 <__sflush_r+0xc0>
 8002e56:	684b      	ldr	r3, [r1, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	dc05      	bgt.n	8002e68 <__sflush_r+0x20>
 8002e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dc02      	bgt.n	8002e68 <__sflush_r+0x20>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e6a:	2e00      	cmp	r6, #0
 8002e6c:	d0f9      	beq.n	8002e62 <__sflush_r+0x1a>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e74:	682f      	ldr	r7, [r5, #0]
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	d032      	beq.n	8002ee0 <__sflush_r+0x98>
 8002e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	075a      	lsls	r2, r3, #29
 8002e80:	d505      	bpl.n	8002e8e <__sflush_r+0x46>
 8002e82:	6863      	ldr	r3, [r4, #4]
 8002e84:	1ac0      	subs	r0, r0, r3
 8002e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e88:	b10b      	cbz	r3, 8002e8e <__sflush_r+0x46>
 8002e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e8c:	1ac0      	subs	r0, r0, r3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4602      	mov	r2, r0
 8002e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e94:	6a21      	ldr	r1, [r4, #32]
 8002e96:	4628      	mov	r0, r5
 8002e98:	47b0      	blx	r6
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	89a3      	ldrh	r3, [r4, #12]
 8002e9e:	d106      	bne.n	8002eae <__sflush_r+0x66>
 8002ea0:	6829      	ldr	r1, [r5, #0]
 8002ea2:	291d      	cmp	r1, #29
 8002ea4:	d82c      	bhi.n	8002f00 <__sflush_r+0xb8>
 8002ea6:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <__sflush_r+0x108>)
 8002ea8:	40ca      	lsrs	r2, r1
 8002eaa:	07d6      	lsls	r6, r2, #31
 8002eac:	d528      	bpl.n	8002f00 <__sflush_r+0xb8>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	6062      	str	r2, [r4, #4]
 8002eb2:	04d9      	lsls	r1, r3, #19
 8002eb4:	6922      	ldr	r2, [r4, #16]
 8002eb6:	6022      	str	r2, [r4, #0]
 8002eb8:	d504      	bpl.n	8002ec4 <__sflush_r+0x7c>
 8002eba:	1c42      	adds	r2, r0, #1
 8002ebc:	d101      	bne.n	8002ec2 <__sflush_r+0x7a>
 8002ebe:	682b      	ldr	r3, [r5, #0]
 8002ec0:	b903      	cbnz	r3, 8002ec4 <__sflush_r+0x7c>
 8002ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8002ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ec6:	602f      	str	r7, [r5, #0]
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d0ca      	beq.n	8002e62 <__sflush_r+0x1a>
 8002ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d002      	beq.n	8002eda <__sflush_r+0x92>
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f000 f9e9 	bl	80032ac <_free_r>
 8002eda:	2000      	movs	r0, #0
 8002edc:	6360      	str	r0, [r4, #52]	; 0x34
 8002ede:	e7c1      	b.n	8002e64 <__sflush_r+0x1c>
 8002ee0:	6a21      	ldr	r1, [r4, #32]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	47b0      	blx	r6
 8002ee8:	1c41      	adds	r1, r0, #1
 8002eea:	d1c7      	bne.n	8002e7c <__sflush_r+0x34>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0c4      	beq.n	8002e7c <__sflush_r+0x34>
 8002ef2:	2b1d      	cmp	r3, #29
 8002ef4:	d001      	beq.n	8002efa <__sflush_r+0xb2>
 8002ef6:	2b16      	cmp	r3, #22
 8002ef8:	d101      	bne.n	8002efe <__sflush_r+0xb6>
 8002efa:	602f      	str	r7, [r5, #0]
 8002efc:	e7b1      	b.n	8002e62 <__sflush_r+0x1a>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	e7ad      	b.n	8002e64 <__sflush_r+0x1c>
 8002f08:	690f      	ldr	r7, [r1, #16]
 8002f0a:	2f00      	cmp	r7, #0
 8002f0c:	d0a9      	beq.n	8002e62 <__sflush_r+0x1a>
 8002f0e:	0793      	lsls	r3, r2, #30
 8002f10:	680e      	ldr	r6, [r1, #0]
 8002f12:	bf08      	it	eq
 8002f14:	694b      	ldreq	r3, [r1, #20]
 8002f16:	600f      	str	r7, [r1, #0]
 8002f18:	bf18      	it	ne
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	eba6 0807 	sub.w	r8, r6, r7
 8002f20:	608b      	str	r3, [r1, #8]
 8002f22:	f1b8 0f00 	cmp.w	r8, #0
 8002f26:	dd9c      	ble.n	8002e62 <__sflush_r+0x1a>
 8002f28:	6a21      	ldr	r1, [r4, #32]
 8002f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	463a      	mov	r2, r7
 8002f30:	4628      	mov	r0, r5
 8002f32:	47b0      	blx	r6
 8002f34:	2800      	cmp	r0, #0
 8002f36:	dc06      	bgt.n	8002f46 <__sflush_r+0xfe>
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	e78e      	b.n	8002e64 <__sflush_r+0x1c>
 8002f46:	4407      	add	r7, r0
 8002f48:	eba8 0800 	sub.w	r8, r8, r0
 8002f4c:	e7e9      	b.n	8002f22 <__sflush_r+0xda>
 8002f4e:	bf00      	nop
 8002f50:	20400001 	.word	0x20400001

08002f54 <_fflush_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	4605      	mov	r5, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	b913      	cbnz	r3, 8002f64 <_fflush_r+0x10>
 8002f5e:	2500      	movs	r5, #0
 8002f60:	4628      	mov	r0, r5
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	b118      	cbz	r0, 8002f6e <_fflush_r+0x1a>
 8002f66:	6983      	ldr	r3, [r0, #24]
 8002f68:	b90b      	cbnz	r3, 8002f6e <_fflush_r+0x1a>
 8002f6a:	f000 f887 	bl	800307c <__sinit>
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <_fflush_r+0x6c>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d11b      	bne.n	8002fac <_fflush_r+0x58>
 8002f74:	686c      	ldr	r4, [r5, #4]
 8002f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ef      	beq.n	8002f5e <_fflush_r+0xa>
 8002f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f80:	07d0      	lsls	r0, r2, #31
 8002f82:	d404      	bmi.n	8002f8e <_fflush_r+0x3a>
 8002f84:	0599      	lsls	r1, r3, #22
 8002f86:	d402      	bmi.n	8002f8e <_fflush_r+0x3a>
 8002f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f8a:	f000 f915 	bl	80031b8 <__retarget_lock_acquire_recursive>
 8002f8e:	4628      	mov	r0, r5
 8002f90:	4621      	mov	r1, r4
 8002f92:	f7ff ff59 	bl	8002e48 <__sflush_r>
 8002f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f98:	07da      	lsls	r2, r3, #31
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	d4e0      	bmi.n	8002f60 <_fflush_r+0xc>
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	059b      	lsls	r3, r3, #22
 8002fa2:	d4dd      	bmi.n	8002f60 <_fflush_r+0xc>
 8002fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa6:	f000 f908 	bl	80031ba <__retarget_lock_release_recursive>
 8002faa:	e7d9      	b.n	8002f60 <_fflush_r+0xc>
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <_fflush_r+0x70>)
 8002fae:	429c      	cmp	r4, r3
 8002fb0:	d101      	bne.n	8002fb6 <_fflush_r+0x62>
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	e7df      	b.n	8002f76 <_fflush_r+0x22>
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <_fflush_r+0x74>)
 8002fb8:	429c      	cmp	r4, r3
 8002fba:	bf08      	it	eq
 8002fbc:	68ec      	ldreq	r4, [r5, #12]
 8002fbe:	e7da      	b.n	8002f76 <_fflush_r+0x22>
 8002fc0:	08004650 	.word	0x08004650
 8002fc4:	08004670 	.word	0x08004670
 8002fc8:	08004630 	.word	0x08004630

08002fcc <std>:
 8002fcc:	2300      	movs	r3, #0
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8002fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fda:	6083      	str	r3, [r0, #8]
 8002fdc:	8181      	strh	r1, [r0, #12]
 8002fde:	6643      	str	r3, [r0, #100]	; 0x64
 8002fe0:	81c2      	strh	r2, [r0, #14]
 8002fe2:	6183      	str	r3, [r0, #24]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	305c      	adds	r0, #92	; 0x5c
 8002fea:	f7ff fd19 	bl	8002a20 <memset>
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <std+0x38>)
 8002ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <std+0x3c>)
 8002ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <std+0x40>)
 8002ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <std+0x44>)
 8002ffc:	6224      	str	r4, [r4, #32]
 8002ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8003000:	bd10      	pop	{r4, pc}
 8003002:	bf00      	nop
 8003004:	08002ba5 	.word	0x08002ba5
 8003008:	08002bcb 	.word	0x08002bcb
 800300c:	08002c03 	.word	0x08002c03
 8003010:	08002c27 	.word	0x08002c27

08003014 <_cleanup_r>:
 8003014:	4901      	ldr	r1, [pc, #4]	; (800301c <_cleanup_r+0x8>)
 8003016:	f000 b8af 	b.w	8003178 <_fwalk_reent>
 800301a:	bf00      	nop
 800301c:	08002f55 	.word	0x08002f55

08003020 <__sfmoreglue>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2268      	movs	r2, #104	; 0x68
 8003024:	1e4d      	subs	r5, r1, #1
 8003026:	4355      	muls	r5, r2
 8003028:	460e      	mov	r6, r1
 800302a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800302e:	f000 f9a9 	bl	8003384 <_malloc_r>
 8003032:	4604      	mov	r4, r0
 8003034:	b140      	cbz	r0, 8003048 <__sfmoreglue+0x28>
 8003036:	2100      	movs	r1, #0
 8003038:	e9c0 1600 	strd	r1, r6, [r0]
 800303c:	300c      	adds	r0, #12
 800303e:	60a0      	str	r0, [r4, #8]
 8003040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003044:	f7ff fcec 	bl	8002a20 <memset>
 8003048:	4620      	mov	r0, r4
 800304a:	bd70      	pop	{r4, r5, r6, pc}

0800304c <__sfp_lock_acquire>:
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <__sfp_lock_acquire+0x8>)
 800304e:	f000 b8b3 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	2000055d 	.word	0x2000055d

08003058 <__sfp_lock_release>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__sfp_lock_release+0x8>)
 800305a:	f000 b8ae 	b.w	80031ba <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	2000055d 	.word	0x2000055d

08003064 <__sinit_lock_acquire>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__sinit_lock_acquire+0x8>)
 8003066:	f000 b8a7 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 800306a:	bf00      	nop
 800306c:	2000055e 	.word	0x2000055e

08003070 <__sinit_lock_release>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__sinit_lock_release+0x8>)
 8003072:	f000 b8a2 	b.w	80031ba <__retarget_lock_release_recursive>
 8003076:	bf00      	nop
 8003078:	2000055e 	.word	0x2000055e

0800307c <__sinit>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4604      	mov	r4, r0
 8003080:	f7ff fff0 	bl	8003064 <__sinit_lock_acquire>
 8003084:	69a3      	ldr	r3, [r4, #24]
 8003086:	b11b      	cbz	r3, 8003090 <__sinit+0x14>
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800308c:	f7ff bff0 	b.w	8003070 <__sinit_lock_release>
 8003090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003094:	6523      	str	r3, [r4, #80]	; 0x50
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <__sinit+0x68>)
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <__sinit+0x6c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	62a2      	str	r2, [r4, #40]	; 0x28
 800309e:	42a3      	cmp	r3, r4
 80030a0:	bf04      	itt	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	61a3      	streq	r3, [r4, #24]
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 f820 	bl	80030ec <__sfp>
 80030ac:	6060      	str	r0, [r4, #4]
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f81c 	bl	80030ec <__sfp>
 80030b4:	60a0      	str	r0, [r4, #8]
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 f818 	bl	80030ec <__sfp>
 80030bc:	2200      	movs	r2, #0
 80030be:	60e0      	str	r0, [r4, #12]
 80030c0:	2104      	movs	r1, #4
 80030c2:	6860      	ldr	r0, [r4, #4]
 80030c4:	f7ff ff82 	bl	8002fcc <std>
 80030c8:	68a0      	ldr	r0, [r4, #8]
 80030ca:	2201      	movs	r2, #1
 80030cc:	2109      	movs	r1, #9
 80030ce:	f7ff ff7d 	bl	8002fcc <std>
 80030d2:	68e0      	ldr	r0, [r4, #12]
 80030d4:	2202      	movs	r2, #2
 80030d6:	2112      	movs	r1, #18
 80030d8:	f7ff ff78 	bl	8002fcc <std>
 80030dc:	2301      	movs	r3, #1
 80030de:	61a3      	str	r3, [r4, #24]
 80030e0:	e7d2      	b.n	8003088 <__sinit+0xc>
 80030e2:	bf00      	nop
 80030e4:	0800462c 	.word	0x0800462c
 80030e8:	08003015 	.word	0x08003015

080030ec <__sfp>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	4607      	mov	r7, r0
 80030f0:	f7ff ffac 	bl	800304c <__sfp_lock_acquire>
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <__sfp+0x84>)
 80030f6:	681e      	ldr	r6, [r3, #0]
 80030f8:	69b3      	ldr	r3, [r6, #24]
 80030fa:	b913      	cbnz	r3, 8003102 <__sfp+0x16>
 80030fc:	4630      	mov	r0, r6
 80030fe:	f7ff ffbd 	bl	800307c <__sinit>
 8003102:	3648      	adds	r6, #72	; 0x48
 8003104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003108:	3b01      	subs	r3, #1
 800310a:	d503      	bpl.n	8003114 <__sfp+0x28>
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	b30b      	cbz	r3, 8003154 <__sfp+0x68>
 8003110:	6836      	ldr	r6, [r6, #0]
 8003112:	e7f7      	b.n	8003104 <__sfp+0x18>
 8003114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003118:	b9d5      	cbnz	r5, 8003150 <__sfp+0x64>
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <__sfp+0x88>)
 800311c:	60e3      	str	r3, [r4, #12]
 800311e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003122:	6665      	str	r5, [r4, #100]	; 0x64
 8003124:	f000 f847 	bl	80031b6 <__retarget_lock_init_recursive>
 8003128:	f7ff ff96 	bl	8003058 <__sfp_lock_release>
 800312c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003134:	6025      	str	r5, [r4, #0]
 8003136:	61a5      	str	r5, [r4, #24]
 8003138:	2208      	movs	r2, #8
 800313a:	4629      	mov	r1, r5
 800313c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003140:	f7ff fc6e 	bl	8002a20 <memset>
 8003144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800314c:	4620      	mov	r0, r4
 800314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003150:	3468      	adds	r4, #104	; 0x68
 8003152:	e7d9      	b.n	8003108 <__sfp+0x1c>
 8003154:	2104      	movs	r1, #4
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff ff62 	bl	8003020 <__sfmoreglue>
 800315c:	4604      	mov	r4, r0
 800315e:	6030      	str	r0, [r6, #0]
 8003160:	2800      	cmp	r0, #0
 8003162:	d1d5      	bne.n	8003110 <__sfp+0x24>
 8003164:	f7ff ff78 	bl	8003058 <__sfp_lock_release>
 8003168:	230c      	movs	r3, #12
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	e7ee      	b.n	800314c <__sfp+0x60>
 800316e:	bf00      	nop
 8003170:	0800462c 	.word	0x0800462c
 8003174:	ffff0001 	.word	0xffff0001

08003178 <_fwalk_reent>:
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800317c:	4606      	mov	r6, r0
 800317e:	4688      	mov	r8, r1
 8003180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003184:	2700      	movs	r7, #0
 8003186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800318a:	f1b9 0901 	subs.w	r9, r9, #1
 800318e:	d505      	bpl.n	800319c <_fwalk_reent+0x24>
 8003190:	6824      	ldr	r4, [r4, #0]
 8003192:	2c00      	cmp	r4, #0
 8003194:	d1f7      	bne.n	8003186 <_fwalk_reent+0xe>
 8003196:	4638      	mov	r0, r7
 8003198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800319c:	89ab      	ldrh	r3, [r5, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d907      	bls.n	80031b2 <_fwalk_reent+0x3a>
 80031a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a6:	3301      	adds	r3, #1
 80031a8:	d003      	beq.n	80031b2 <_fwalk_reent+0x3a>
 80031aa:	4629      	mov	r1, r5
 80031ac:	4630      	mov	r0, r6
 80031ae:	47c0      	blx	r8
 80031b0:	4307      	orrs	r7, r0
 80031b2:	3568      	adds	r5, #104	; 0x68
 80031b4:	e7e9      	b.n	800318a <_fwalk_reent+0x12>

080031b6 <__retarget_lock_init_recursive>:
 80031b6:	4770      	bx	lr

080031b8 <__retarget_lock_acquire_recursive>:
 80031b8:	4770      	bx	lr

080031ba <__retarget_lock_release_recursive>:
 80031ba:	4770      	bx	lr

080031bc <_lseek_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4d07      	ldr	r5, [pc, #28]	; (80031dc <_lseek_r+0x20>)
 80031c0:	4604      	mov	r4, r0
 80031c2:	4608      	mov	r0, r1
 80031c4:	4611      	mov	r1, r2
 80031c6:	2200      	movs	r2, #0
 80031c8:	602a      	str	r2, [r5, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7fd fd64 	bl	8000c98 <_lseek>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d102      	bne.n	80031da <_lseek_r+0x1e>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	b103      	cbz	r3, 80031da <_lseek_r+0x1e>
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	bd38      	pop	{r3, r4, r5, pc}
 80031dc:	20000568 	.word	0x20000568

080031e0 <__swhatbuf_r>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	460e      	mov	r6, r1
 80031e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e8:	2900      	cmp	r1, #0
 80031ea:	b096      	sub	sp, #88	; 0x58
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	da08      	bge.n	8003204 <__swhatbuf_r+0x24>
 80031f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	602a      	str	r2, [r5, #0]
 80031fa:	061a      	lsls	r2, r3, #24
 80031fc:	d410      	bmi.n	8003220 <__swhatbuf_r+0x40>
 80031fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003202:	e00e      	b.n	8003222 <__swhatbuf_r+0x42>
 8003204:	466a      	mov	r2, sp
 8003206:	f001 f8cf 	bl	80043a8 <_fstat_r>
 800320a:	2800      	cmp	r0, #0
 800320c:	dbf1      	blt.n	80031f2 <__swhatbuf_r+0x12>
 800320e:	9a01      	ldr	r2, [sp, #4]
 8003210:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003214:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003218:	425a      	negs	r2, r3
 800321a:	415a      	adcs	r2, r3
 800321c:	602a      	str	r2, [r5, #0]
 800321e:	e7ee      	b.n	80031fe <__swhatbuf_r+0x1e>
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	2000      	movs	r0, #0
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	b016      	add	sp, #88	; 0x58
 8003228:	bd70      	pop	{r4, r5, r6, pc}
	...

0800322c <__smakebuf_r>:
 800322c:	898b      	ldrh	r3, [r1, #12]
 800322e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003230:	079d      	lsls	r5, r3, #30
 8003232:	4606      	mov	r6, r0
 8003234:	460c      	mov	r4, r1
 8003236:	d507      	bpl.n	8003248 <__smakebuf_r+0x1c>
 8003238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	6123      	str	r3, [r4, #16]
 8003240:	2301      	movs	r3, #1
 8003242:	6163      	str	r3, [r4, #20]
 8003244:	b002      	add	sp, #8
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	ab01      	add	r3, sp, #4
 800324a:	466a      	mov	r2, sp
 800324c:	f7ff ffc8 	bl	80031e0 <__swhatbuf_r>
 8003250:	9900      	ldr	r1, [sp, #0]
 8003252:	4605      	mov	r5, r0
 8003254:	4630      	mov	r0, r6
 8003256:	f000 f895 	bl	8003384 <_malloc_r>
 800325a:	b948      	cbnz	r0, 8003270 <__smakebuf_r+0x44>
 800325c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003260:	059a      	lsls	r2, r3, #22
 8003262:	d4ef      	bmi.n	8003244 <__smakebuf_r+0x18>
 8003264:	f023 0303 	bic.w	r3, r3, #3
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	e7e3      	b.n	8003238 <__smakebuf_r+0xc>
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <__smakebuf_r+0x7c>)
 8003272:	62b3      	str	r3, [r6, #40]	; 0x28
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	6020      	str	r0, [r4, #0]
 8003278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327c:	81a3      	strh	r3, [r4, #12]
 800327e:	9b00      	ldr	r3, [sp, #0]
 8003280:	6163      	str	r3, [r4, #20]
 8003282:	9b01      	ldr	r3, [sp, #4]
 8003284:	6120      	str	r0, [r4, #16]
 8003286:	b15b      	cbz	r3, 80032a0 <__smakebuf_r+0x74>
 8003288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800328c:	4630      	mov	r0, r6
 800328e:	f001 f89d 	bl	80043cc <_isatty_r>
 8003292:	b128      	cbz	r0, 80032a0 <__smakebuf_r+0x74>
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	81a3      	strh	r3, [r4, #12]
 80032a0:	89a0      	ldrh	r0, [r4, #12]
 80032a2:	4305      	orrs	r5, r0
 80032a4:	81a5      	strh	r5, [r4, #12]
 80032a6:	e7cd      	b.n	8003244 <__smakebuf_r+0x18>
 80032a8:	08003015 	.word	0x08003015

080032ac <_free_r>:
 80032ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032ae:	2900      	cmp	r1, #0
 80032b0:	d044      	beq.n	800333c <_free_r+0x90>
 80032b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032b6:	9001      	str	r0, [sp, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f1a1 0404 	sub.w	r4, r1, #4
 80032be:	bfb8      	it	lt
 80032c0:	18e4      	addlt	r4, r4, r3
 80032c2:	f001 f8a1 	bl	8004408 <__malloc_lock>
 80032c6:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <_free_r+0x94>)
 80032c8:	9801      	ldr	r0, [sp, #4]
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	b933      	cbnz	r3, 80032dc <_free_r+0x30>
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	6014      	str	r4, [r2, #0]
 80032d2:	b003      	add	sp, #12
 80032d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032d8:	f001 b89c 	b.w	8004414 <__malloc_unlock>
 80032dc:	42a3      	cmp	r3, r4
 80032de:	d908      	bls.n	80032f2 <_free_r+0x46>
 80032e0:	6825      	ldr	r5, [r4, #0]
 80032e2:	1961      	adds	r1, r4, r5
 80032e4:	428b      	cmp	r3, r1
 80032e6:	bf01      	itttt	eq
 80032e8:	6819      	ldreq	r1, [r3, #0]
 80032ea:	685b      	ldreq	r3, [r3, #4]
 80032ec:	1949      	addeq	r1, r1, r5
 80032ee:	6021      	streq	r1, [r4, #0]
 80032f0:	e7ed      	b.n	80032ce <_free_r+0x22>
 80032f2:	461a      	mov	r2, r3
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	b10b      	cbz	r3, 80032fc <_free_r+0x50>
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	d9fa      	bls.n	80032f2 <_free_r+0x46>
 80032fc:	6811      	ldr	r1, [r2, #0]
 80032fe:	1855      	adds	r5, r2, r1
 8003300:	42a5      	cmp	r5, r4
 8003302:	d10b      	bne.n	800331c <_free_r+0x70>
 8003304:	6824      	ldr	r4, [r4, #0]
 8003306:	4421      	add	r1, r4
 8003308:	1854      	adds	r4, r2, r1
 800330a:	42a3      	cmp	r3, r4
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	d1e0      	bne.n	80032d2 <_free_r+0x26>
 8003310:	681c      	ldr	r4, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	6053      	str	r3, [r2, #4]
 8003316:	4421      	add	r1, r4
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	e7da      	b.n	80032d2 <_free_r+0x26>
 800331c:	d902      	bls.n	8003324 <_free_r+0x78>
 800331e:	230c      	movs	r3, #12
 8003320:	6003      	str	r3, [r0, #0]
 8003322:	e7d6      	b.n	80032d2 <_free_r+0x26>
 8003324:	6825      	ldr	r5, [r4, #0]
 8003326:	1961      	adds	r1, r4, r5
 8003328:	428b      	cmp	r3, r1
 800332a:	bf04      	itt	eq
 800332c:	6819      	ldreq	r1, [r3, #0]
 800332e:	685b      	ldreq	r3, [r3, #4]
 8003330:	6063      	str	r3, [r4, #4]
 8003332:	bf04      	itt	eq
 8003334:	1949      	addeq	r1, r1, r5
 8003336:	6021      	streq	r1, [r4, #0]
 8003338:	6054      	str	r4, [r2, #4]
 800333a:	e7ca      	b.n	80032d2 <_free_r+0x26>
 800333c:	b003      	add	sp, #12
 800333e:	bd30      	pop	{r4, r5, pc}
 8003340:	20000560 	.word	0x20000560

08003344 <sbrk_aligned>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4e0e      	ldr	r6, [pc, #56]	; (8003380 <sbrk_aligned+0x3c>)
 8003348:	460c      	mov	r4, r1
 800334a:	6831      	ldr	r1, [r6, #0]
 800334c:	4605      	mov	r5, r0
 800334e:	b911      	cbnz	r1, 8003356 <sbrk_aligned+0x12>
 8003350:	f000 feb0 	bl	80040b4 <_sbrk_r>
 8003354:	6030      	str	r0, [r6, #0]
 8003356:	4621      	mov	r1, r4
 8003358:	4628      	mov	r0, r5
 800335a:	f000 feab 	bl	80040b4 <_sbrk_r>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	d00a      	beq.n	8003378 <sbrk_aligned+0x34>
 8003362:	1cc4      	adds	r4, r0, #3
 8003364:	f024 0403 	bic.w	r4, r4, #3
 8003368:	42a0      	cmp	r0, r4
 800336a:	d007      	beq.n	800337c <sbrk_aligned+0x38>
 800336c:	1a21      	subs	r1, r4, r0
 800336e:	4628      	mov	r0, r5
 8003370:	f000 fea0 	bl	80040b4 <_sbrk_r>
 8003374:	3001      	adds	r0, #1
 8003376:	d101      	bne.n	800337c <sbrk_aligned+0x38>
 8003378:	f04f 34ff 	mov.w	r4, #4294967295
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	20000564 	.word	0x20000564

08003384 <_malloc_r>:
 8003384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003388:	1ccd      	adds	r5, r1, #3
 800338a:	f025 0503 	bic.w	r5, r5, #3
 800338e:	3508      	adds	r5, #8
 8003390:	2d0c      	cmp	r5, #12
 8003392:	bf38      	it	cc
 8003394:	250c      	movcc	r5, #12
 8003396:	2d00      	cmp	r5, #0
 8003398:	4607      	mov	r7, r0
 800339a:	db01      	blt.n	80033a0 <_malloc_r+0x1c>
 800339c:	42a9      	cmp	r1, r5
 800339e:	d905      	bls.n	80033ac <_malloc_r+0x28>
 80033a0:	230c      	movs	r3, #12
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	2600      	movs	r6, #0
 80033a6:	4630      	mov	r0, r6
 80033a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033ac:	4e2e      	ldr	r6, [pc, #184]	; (8003468 <_malloc_r+0xe4>)
 80033ae:	f001 f82b 	bl	8004408 <__malloc_lock>
 80033b2:	6833      	ldr	r3, [r6, #0]
 80033b4:	461c      	mov	r4, r3
 80033b6:	bb34      	cbnz	r4, 8003406 <_malloc_r+0x82>
 80033b8:	4629      	mov	r1, r5
 80033ba:	4638      	mov	r0, r7
 80033bc:	f7ff ffc2 	bl	8003344 <sbrk_aligned>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	4604      	mov	r4, r0
 80033c4:	d14d      	bne.n	8003462 <_malloc_r+0xde>
 80033c6:	6834      	ldr	r4, [r6, #0]
 80033c8:	4626      	mov	r6, r4
 80033ca:	2e00      	cmp	r6, #0
 80033cc:	d140      	bne.n	8003450 <_malloc_r+0xcc>
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	4631      	mov	r1, r6
 80033d2:	4638      	mov	r0, r7
 80033d4:	eb04 0803 	add.w	r8, r4, r3
 80033d8:	f000 fe6c 	bl	80040b4 <_sbrk_r>
 80033dc:	4580      	cmp	r8, r0
 80033de:	d13a      	bne.n	8003456 <_malloc_r+0xd2>
 80033e0:	6821      	ldr	r1, [r4, #0]
 80033e2:	3503      	adds	r5, #3
 80033e4:	1a6d      	subs	r5, r5, r1
 80033e6:	f025 0503 	bic.w	r5, r5, #3
 80033ea:	3508      	adds	r5, #8
 80033ec:	2d0c      	cmp	r5, #12
 80033ee:	bf38      	it	cc
 80033f0:	250c      	movcc	r5, #12
 80033f2:	4629      	mov	r1, r5
 80033f4:	4638      	mov	r0, r7
 80033f6:	f7ff ffa5 	bl	8003344 <sbrk_aligned>
 80033fa:	3001      	adds	r0, #1
 80033fc:	d02b      	beq.n	8003456 <_malloc_r+0xd2>
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	442b      	add	r3, r5
 8003402:	6023      	str	r3, [r4, #0]
 8003404:	e00e      	b.n	8003424 <_malloc_r+0xa0>
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	1b52      	subs	r2, r2, r5
 800340a:	d41e      	bmi.n	800344a <_malloc_r+0xc6>
 800340c:	2a0b      	cmp	r2, #11
 800340e:	d916      	bls.n	800343e <_malloc_r+0xba>
 8003410:	1961      	adds	r1, r4, r5
 8003412:	42a3      	cmp	r3, r4
 8003414:	6025      	str	r5, [r4, #0]
 8003416:	bf18      	it	ne
 8003418:	6059      	strne	r1, [r3, #4]
 800341a:	6863      	ldr	r3, [r4, #4]
 800341c:	bf08      	it	eq
 800341e:	6031      	streq	r1, [r6, #0]
 8003420:	5162      	str	r2, [r4, r5]
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	4638      	mov	r0, r7
 8003426:	f104 060b 	add.w	r6, r4, #11
 800342a:	f000 fff3 	bl	8004414 <__malloc_unlock>
 800342e:	f026 0607 	bic.w	r6, r6, #7
 8003432:	1d23      	adds	r3, r4, #4
 8003434:	1af2      	subs	r2, r6, r3
 8003436:	d0b6      	beq.n	80033a6 <_malloc_r+0x22>
 8003438:	1b9b      	subs	r3, r3, r6
 800343a:	50a3      	str	r3, [r4, r2]
 800343c:	e7b3      	b.n	80033a6 <_malloc_r+0x22>
 800343e:	6862      	ldr	r2, [r4, #4]
 8003440:	42a3      	cmp	r3, r4
 8003442:	bf0c      	ite	eq
 8003444:	6032      	streq	r2, [r6, #0]
 8003446:	605a      	strne	r2, [r3, #4]
 8003448:	e7ec      	b.n	8003424 <_malloc_r+0xa0>
 800344a:	4623      	mov	r3, r4
 800344c:	6864      	ldr	r4, [r4, #4]
 800344e:	e7b2      	b.n	80033b6 <_malloc_r+0x32>
 8003450:	4634      	mov	r4, r6
 8003452:	6876      	ldr	r6, [r6, #4]
 8003454:	e7b9      	b.n	80033ca <_malloc_r+0x46>
 8003456:	230c      	movs	r3, #12
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4638      	mov	r0, r7
 800345c:	f000 ffda 	bl	8004414 <__malloc_unlock>
 8003460:	e7a1      	b.n	80033a6 <_malloc_r+0x22>
 8003462:	6025      	str	r5, [r4, #0]
 8003464:	e7de      	b.n	8003424 <_malloc_r+0xa0>
 8003466:	bf00      	nop
 8003468:	20000560 	.word	0x20000560

0800346c <_sungetc_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	1c4b      	adds	r3, r1, #1
 8003470:	4614      	mov	r4, r2
 8003472:	d103      	bne.n	800347c <_sungetc_r+0x10>
 8003474:	f04f 35ff 	mov.w	r5, #4294967295
 8003478:	4628      	mov	r0, r5
 800347a:	bd38      	pop	{r3, r4, r5, pc}
 800347c:	8993      	ldrh	r3, [r2, #12]
 800347e:	f023 0320 	bic.w	r3, r3, #32
 8003482:	8193      	strh	r3, [r2, #12]
 8003484:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003486:	6852      	ldr	r2, [r2, #4]
 8003488:	b2cd      	uxtb	r5, r1
 800348a:	b18b      	cbz	r3, 80034b0 <_sungetc_r+0x44>
 800348c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800348e:	4293      	cmp	r3, r2
 8003490:	dd08      	ble.n	80034a4 <_sungetc_r+0x38>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	6022      	str	r2, [r4, #0]
 8003498:	f803 5c01 	strb.w	r5, [r3, #-1]
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	3301      	adds	r3, #1
 80034a0:	6063      	str	r3, [r4, #4]
 80034a2:	e7e9      	b.n	8003478 <_sungetc_r+0xc>
 80034a4:	4621      	mov	r1, r4
 80034a6:	f000 ff45 	bl	8004334 <__submore>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d0f1      	beq.n	8003492 <_sungetc_r+0x26>
 80034ae:	e7e1      	b.n	8003474 <_sungetc_r+0x8>
 80034b0:	6921      	ldr	r1, [r4, #16]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	b151      	cbz	r1, 80034cc <_sungetc_r+0x60>
 80034b6:	4299      	cmp	r1, r3
 80034b8:	d208      	bcs.n	80034cc <_sungetc_r+0x60>
 80034ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80034be:	42a9      	cmp	r1, r5
 80034c0:	d104      	bne.n	80034cc <_sungetc_r+0x60>
 80034c2:	3b01      	subs	r3, #1
 80034c4:	3201      	adds	r2, #1
 80034c6:	6023      	str	r3, [r4, #0]
 80034c8:	6062      	str	r2, [r4, #4]
 80034ca:	e7d5      	b.n	8003478 <_sungetc_r+0xc>
 80034cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80034d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034d4:	6363      	str	r3, [r4, #52]	; 0x34
 80034d6:	2303      	movs	r3, #3
 80034d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80034da:	4623      	mov	r3, r4
 80034dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	2301      	movs	r3, #1
 80034e4:	e7dc      	b.n	80034a0 <_sungetc_r+0x34>

080034e6 <__ssrefill_r>:
 80034e6:	b510      	push	{r4, lr}
 80034e8:	460c      	mov	r4, r1
 80034ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80034ec:	b169      	cbz	r1, 800350a <__ssrefill_r+0x24>
 80034ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034f2:	4299      	cmp	r1, r3
 80034f4:	d001      	beq.n	80034fa <__ssrefill_r+0x14>
 80034f6:	f7ff fed9 	bl	80032ac <_free_r>
 80034fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fc:	6063      	str	r3, [r4, #4]
 80034fe:	2000      	movs	r0, #0
 8003500:	6360      	str	r0, [r4, #52]	; 0x34
 8003502:	b113      	cbz	r3, 800350a <__ssrefill_r+0x24>
 8003504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	bd10      	pop	{r4, pc}
 800350a:	6923      	ldr	r3, [r4, #16]
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	f04f 30ff 	mov.w	r0, #4294967295
 800351e:	e7f3      	b.n	8003508 <__ssrefill_r+0x22>

08003520 <__ssvfiscanf_r>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	460c      	mov	r4, r1
 8003526:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800352a:	2100      	movs	r1, #0
 800352c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003530:	49a6      	ldr	r1, [pc, #664]	; (80037cc <__ssvfiscanf_r+0x2ac>)
 8003532:	91a0      	str	r1, [sp, #640]	; 0x280
 8003534:	f10d 0804 	add.w	r8, sp, #4
 8003538:	49a5      	ldr	r1, [pc, #660]	; (80037d0 <__ssvfiscanf_r+0x2b0>)
 800353a:	4fa6      	ldr	r7, [pc, #664]	; (80037d4 <__ssvfiscanf_r+0x2b4>)
 800353c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80037d8 <__ssvfiscanf_r+0x2b8>
 8003540:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003544:	4606      	mov	r6, r0
 8003546:	91a1      	str	r1, [sp, #644]	; 0x284
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	7813      	ldrb	r3, [r2, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 815a 	beq.w	8003806 <__ssvfiscanf_r+0x2e6>
 8003552:	5dd9      	ldrb	r1, [r3, r7]
 8003554:	f011 0108 	ands.w	r1, r1, #8
 8003558:	f102 0501 	add.w	r5, r2, #1
 800355c:	d019      	beq.n	8003592 <__ssvfiscanf_r+0x72>
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	dd0f      	ble.n	8003584 <__ssvfiscanf_r+0x64>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	5cba      	ldrb	r2, [r7, r2]
 800356a:	0712      	lsls	r2, r2, #28
 800356c:	d401      	bmi.n	8003572 <__ssvfiscanf_r+0x52>
 800356e:	462a      	mov	r2, r5
 8003570:	e7eb      	b.n	800354a <__ssvfiscanf_r+0x2a>
 8003572:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003574:	3201      	adds	r2, #1
 8003576:	9245      	str	r2, [sp, #276]	; 0x114
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	3301      	adds	r3, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	6062      	str	r2, [r4, #4]
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	e7ec      	b.n	800355e <__ssvfiscanf_r+0x3e>
 8003584:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003586:	4621      	mov	r1, r4
 8003588:	4630      	mov	r0, r6
 800358a:	4798      	blx	r3
 800358c:	2800      	cmp	r0, #0
 800358e:	d0e9      	beq.n	8003564 <__ssvfiscanf_r+0x44>
 8003590:	e7ed      	b.n	800356e <__ssvfiscanf_r+0x4e>
 8003592:	2b25      	cmp	r3, #37	; 0x25
 8003594:	d012      	beq.n	80035bc <__ssvfiscanf_r+0x9c>
 8003596:	469a      	mov	sl, r3
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f340 8091 	ble.w	80036c2 <__ssvfiscanf_r+0x1a2>
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	7813      	ldrb	r3, [r2, #0]
 80035a4:	4553      	cmp	r3, sl
 80035a6:	f040 812e 	bne.w	8003806 <__ssvfiscanf_r+0x2e6>
 80035aa:	6863      	ldr	r3, [r4, #4]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	6063      	str	r3, [r4, #4]
 80035b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80035b2:	3201      	adds	r2, #1
 80035b4:	3301      	adds	r3, #1
 80035b6:	6022      	str	r2, [r4, #0]
 80035b8:	9345      	str	r3, [sp, #276]	; 0x114
 80035ba:	e7d8      	b.n	800356e <__ssvfiscanf_r+0x4e>
 80035bc:	9141      	str	r1, [sp, #260]	; 0x104
 80035be:	9143      	str	r1, [sp, #268]	; 0x10c
 80035c0:	7853      	ldrb	r3, [r2, #1]
 80035c2:	2b2a      	cmp	r3, #42	; 0x2a
 80035c4:	bf02      	ittt	eq
 80035c6:	2310      	moveq	r3, #16
 80035c8:	1c95      	addeq	r5, r2, #2
 80035ca:	9341      	streq	r3, [sp, #260]	; 0x104
 80035cc:	220a      	movs	r2, #10
 80035ce:	46aa      	mov	sl, r5
 80035d0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80035d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d91d      	bls.n	8003618 <__ssvfiscanf_r+0xf8>
 80035dc:	487e      	ldr	r0, [pc, #504]	; (80037d8 <__ssvfiscanf_r+0x2b8>)
 80035de:	2203      	movs	r2, #3
 80035e0:	f7fc fe06 	bl	80001f0 <memchr>
 80035e4:	b140      	cbz	r0, 80035f8 <__ssvfiscanf_r+0xd8>
 80035e6:	2301      	movs	r3, #1
 80035e8:	eba0 0009 	sub.w	r0, r0, r9
 80035ec:	fa03 f000 	lsl.w	r0, r3, r0
 80035f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80035f2:	4318      	orrs	r0, r3
 80035f4:	9041      	str	r0, [sp, #260]	; 0x104
 80035f6:	4655      	mov	r5, sl
 80035f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035fc:	2b78      	cmp	r3, #120	; 0x78
 80035fe:	d806      	bhi.n	800360e <__ssvfiscanf_r+0xee>
 8003600:	2b57      	cmp	r3, #87	; 0x57
 8003602:	d810      	bhi.n	8003626 <__ssvfiscanf_r+0x106>
 8003604:	2b25      	cmp	r3, #37	; 0x25
 8003606:	d0c6      	beq.n	8003596 <__ssvfiscanf_r+0x76>
 8003608:	d856      	bhi.n	80036b8 <__ssvfiscanf_r+0x198>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d064      	beq.n	80036d8 <__ssvfiscanf_r+0x1b8>
 800360e:	2303      	movs	r3, #3
 8003610:	9347      	str	r3, [sp, #284]	; 0x11c
 8003612:	230a      	movs	r3, #10
 8003614:	9342      	str	r3, [sp, #264]	; 0x108
 8003616:	e071      	b.n	80036fc <__ssvfiscanf_r+0x1dc>
 8003618:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800361a:	fb02 1103 	mla	r1, r2, r3, r1
 800361e:	3930      	subs	r1, #48	; 0x30
 8003620:	9143      	str	r1, [sp, #268]	; 0x10c
 8003622:	4655      	mov	r5, sl
 8003624:	e7d3      	b.n	80035ce <__ssvfiscanf_r+0xae>
 8003626:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800362a:	2a20      	cmp	r2, #32
 800362c:	d8ef      	bhi.n	800360e <__ssvfiscanf_r+0xee>
 800362e:	a101      	add	r1, pc, #4	; (adr r1, 8003634 <__ssvfiscanf_r+0x114>)
 8003630:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003634:	080036e7 	.word	0x080036e7
 8003638:	0800360f 	.word	0x0800360f
 800363c:	0800360f 	.word	0x0800360f
 8003640:	08003745 	.word	0x08003745
 8003644:	0800360f 	.word	0x0800360f
 8003648:	0800360f 	.word	0x0800360f
 800364c:	0800360f 	.word	0x0800360f
 8003650:	0800360f 	.word	0x0800360f
 8003654:	0800360f 	.word	0x0800360f
 8003658:	0800360f 	.word	0x0800360f
 800365c:	0800360f 	.word	0x0800360f
 8003660:	0800375b 	.word	0x0800375b
 8003664:	08003731 	.word	0x08003731
 8003668:	080036bf 	.word	0x080036bf
 800366c:	080036bf 	.word	0x080036bf
 8003670:	080036bf 	.word	0x080036bf
 8003674:	0800360f 	.word	0x0800360f
 8003678:	08003735 	.word	0x08003735
 800367c:	0800360f 	.word	0x0800360f
 8003680:	0800360f 	.word	0x0800360f
 8003684:	0800360f 	.word	0x0800360f
 8003688:	0800360f 	.word	0x0800360f
 800368c:	0800376b 	.word	0x0800376b
 8003690:	0800373d 	.word	0x0800373d
 8003694:	080036df 	.word	0x080036df
 8003698:	0800360f 	.word	0x0800360f
 800369c:	0800360f 	.word	0x0800360f
 80036a0:	08003767 	.word	0x08003767
 80036a4:	0800360f 	.word	0x0800360f
 80036a8:	08003731 	.word	0x08003731
 80036ac:	0800360f 	.word	0x0800360f
 80036b0:	0800360f 	.word	0x0800360f
 80036b4:	080036e7 	.word	0x080036e7
 80036b8:	3b45      	subs	r3, #69	; 0x45
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d8a7      	bhi.n	800360e <__ssvfiscanf_r+0xee>
 80036be:	2305      	movs	r3, #5
 80036c0:	e01b      	b.n	80036fa <__ssvfiscanf_r+0x1da>
 80036c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80036c4:	4621      	mov	r1, r4
 80036c6:	4630      	mov	r0, r6
 80036c8:	4798      	blx	r3
 80036ca:	2800      	cmp	r0, #0
 80036cc:	f43f af68 	beq.w	80035a0 <__ssvfiscanf_r+0x80>
 80036d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80036d2:	2800      	cmp	r0, #0
 80036d4:	f040 808d 	bne.w	80037f2 <__ssvfiscanf_r+0x2d2>
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	e08f      	b.n	80037fe <__ssvfiscanf_r+0x2de>
 80036de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	9241      	str	r2, [sp, #260]	; 0x104
 80036e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	9241      	str	r2, [sp, #260]	; 0x104
 80036ee:	2210      	movs	r2, #16
 80036f0:	2b6f      	cmp	r3, #111	; 0x6f
 80036f2:	9242      	str	r2, [sp, #264]	; 0x108
 80036f4:	bf34      	ite	cc
 80036f6:	2303      	movcc	r3, #3
 80036f8:	2304      	movcs	r3, #4
 80036fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80036fc:	6863      	ldr	r3, [r4, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	dd42      	ble.n	8003788 <__ssvfiscanf_r+0x268>
 8003702:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003704:	0659      	lsls	r1, r3, #25
 8003706:	d404      	bmi.n	8003712 <__ssvfiscanf_r+0x1f2>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	5cba      	ldrb	r2, [r7, r2]
 800370e:	0712      	lsls	r2, r2, #28
 8003710:	d441      	bmi.n	8003796 <__ssvfiscanf_r+0x276>
 8003712:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003714:	2b02      	cmp	r3, #2
 8003716:	dc50      	bgt.n	80037ba <__ssvfiscanf_r+0x29a>
 8003718:	466b      	mov	r3, sp
 800371a:	4622      	mov	r2, r4
 800371c:	a941      	add	r1, sp, #260	; 0x104
 800371e:	4630      	mov	r0, r6
 8003720:	f000 fb64 	bl	8003dec <_scanf_chars>
 8003724:	2801      	cmp	r0, #1
 8003726:	d06e      	beq.n	8003806 <__ssvfiscanf_r+0x2e6>
 8003728:	2802      	cmp	r0, #2
 800372a:	f47f af20 	bne.w	800356e <__ssvfiscanf_r+0x4e>
 800372e:	e7cf      	b.n	80036d0 <__ssvfiscanf_r+0x1b0>
 8003730:	220a      	movs	r2, #10
 8003732:	e7dd      	b.n	80036f0 <__ssvfiscanf_r+0x1d0>
 8003734:	2300      	movs	r3, #0
 8003736:	9342      	str	r3, [sp, #264]	; 0x108
 8003738:	2303      	movs	r3, #3
 800373a:	e7de      	b.n	80036fa <__ssvfiscanf_r+0x1da>
 800373c:	2308      	movs	r3, #8
 800373e:	9342      	str	r3, [sp, #264]	; 0x108
 8003740:	2304      	movs	r3, #4
 8003742:	e7da      	b.n	80036fa <__ssvfiscanf_r+0x1da>
 8003744:	4629      	mov	r1, r5
 8003746:	4640      	mov	r0, r8
 8003748:	f000 fcc4 	bl	80040d4 <__sccl>
 800374c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800374e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003752:	9341      	str	r3, [sp, #260]	; 0x104
 8003754:	4605      	mov	r5, r0
 8003756:	2301      	movs	r3, #1
 8003758:	e7cf      	b.n	80036fa <__ssvfiscanf_r+0x1da>
 800375a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800375c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003760:	9341      	str	r3, [sp, #260]	; 0x104
 8003762:	2300      	movs	r3, #0
 8003764:	e7c9      	b.n	80036fa <__ssvfiscanf_r+0x1da>
 8003766:	2302      	movs	r3, #2
 8003768:	e7c7      	b.n	80036fa <__ssvfiscanf_r+0x1da>
 800376a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800376c:	06c3      	lsls	r3, r0, #27
 800376e:	f53f aefe 	bmi.w	800356e <__ssvfiscanf_r+0x4e>
 8003772:	9b00      	ldr	r3, [sp, #0]
 8003774:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003776:	1d19      	adds	r1, r3, #4
 8003778:	9100      	str	r1, [sp, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f010 0f01 	tst.w	r0, #1
 8003780:	bf14      	ite	ne
 8003782:	801a      	strhne	r2, [r3, #0]
 8003784:	601a      	streq	r2, [r3, #0]
 8003786:	e6f2      	b.n	800356e <__ssvfiscanf_r+0x4e>
 8003788:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800378a:	4621      	mov	r1, r4
 800378c:	4630      	mov	r0, r6
 800378e:	4798      	blx	r3
 8003790:	2800      	cmp	r0, #0
 8003792:	d0b6      	beq.n	8003702 <__ssvfiscanf_r+0x1e2>
 8003794:	e79c      	b.n	80036d0 <__ssvfiscanf_r+0x1b0>
 8003796:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003798:	3201      	adds	r2, #1
 800379a:	9245      	str	r2, [sp, #276]	; 0x114
 800379c:	6862      	ldr	r2, [r4, #4]
 800379e:	3a01      	subs	r2, #1
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	6062      	str	r2, [r4, #4]
 80037a4:	dd02      	ble.n	80037ac <__ssvfiscanf_r+0x28c>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	e7ad      	b.n	8003708 <__ssvfiscanf_r+0x1e8>
 80037ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80037ae:	4621      	mov	r1, r4
 80037b0:	4630      	mov	r0, r6
 80037b2:	4798      	blx	r3
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d0a7      	beq.n	8003708 <__ssvfiscanf_r+0x1e8>
 80037b8:	e78a      	b.n	80036d0 <__ssvfiscanf_r+0x1b0>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	dc0e      	bgt.n	80037dc <__ssvfiscanf_r+0x2bc>
 80037be:	466b      	mov	r3, sp
 80037c0:	4622      	mov	r2, r4
 80037c2:	a941      	add	r1, sp, #260	; 0x104
 80037c4:	4630      	mov	r0, r6
 80037c6:	f000 fb6b 	bl	8003ea0 <_scanf_i>
 80037ca:	e7ab      	b.n	8003724 <__ssvfiscanf_r+0x204>
 80037cc:	0800346d 	.word	0x0800346d
 80037d0:	080034e7 	.word	0x080034e7
 80037d4:	080046df 	.word	0x080046df
 80037d8:	08004690 	.word	0x08004690
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <__ssvfiscanf_r+0x2ec>)
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f43f aec5 	beq.w	800356e <__ssvfiscanf_r+0x4e>
 80037e4:	466b      	mov	r3, sp
 80037e6:	4622      	mov	r2, r4
 80037e8:	a941      	add	r1, sp, #260	; 0x104
 80037ea:	4630      	mov	r0, r6
 80037ec:	f3af 8000 	nop.w
 80037f0:	e798      	b.n	8003724 <__ssvfiscanf_r+0x204>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037f8:	bf18      	it	ne
 80037fa:	f04f 30ff 	movne.w	r0, #4294967295
 80037fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003806:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003808:	e7f9      	b.n	80037fe <__ssvfiscanf_r+0x2de>
 800380a:	bf00      	nop
 800380c:	00000000 	.word	0x00000000

08003810 <__sfputc_r>:
 8003810:	6893      	ldr	r3, [r2, #8]
 8003812:	3b01      	subs	r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	b410      	push	{r4}
 8003818:	6093      	str	r3, [r2, #8]
 800381a:	da08      	bge.n	800382e <__sfputc_r+0x1e>
 800381c:	6994      	ldr	r4, [r2, #24]
 800381e:	42a3      	cmp	r3, r4
 8003820:	db01      	blt.n	8003826 <__sfputc_r+0x16>
 8003822:	290a      	cmp	r1, #10
 8003824:	d103      	bne.n	800382e <__sfputc_r+0x1e>
 8003826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800382a:	f7ff ba2b 	b.w	8002c84 <__swbuf_r>
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	1c58      	adds	r0, r3, #1
 8003832:	6010      	str	r0, [r2, #0]
 8003834:	7019      	strb	r1, [r3, #0]
 8003836:	4608      	mov	r0, r1
 8003838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800383c:	4770      	bx	lr

0800383e <__sfputs_r>:
 800383e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003840:	4606      	mov	r6, r0
 8003842:	460f      	mov	r7, r1
 8003844:	4614      	mov	r4, r2
 8003846:	18d5      	adds	r5, r2, r3
 8003848:	42ac      	cmp	r4, r5
 800384a:	d101      	bne.n	8003850 <__sfputs_r+0x12>
 800384c:	2000      	movs	r0, #0
 800384e:	e007      	b.n	8003860 <__sfputs_r+0x22>
 8003850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003854:	463a      	mov	r2, r7
 8003856:	4630      	mov	r0, r6
 8003858:	f7ff ffda 	bl	8003810 <__sfputc_r>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d1f3      	bne.n	8003848 <__sfputs_r+0xa>
 8003860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003864 <_vfiprintf_r>:
 8003864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003868:	460d      	mov	r5, r1
 800386a:	b09d      	sub	sp, #116	; 0x74
 800386c:	4614      	mov	r4, r2
 800386e:	4698      	mov	r8, r3
 8003870:	4606      	mov	r6, r0
 8003872:	b118      	cbz	r0, 800387c <_vfiprintf_r+0x18>
 8003874:	6983      	ldr	r3, [r0, #24]
 8003876:	b90b      	cbnz	r3, 800387c <_vfiprintf_r+0x18>
 8003878:	f7ff fc00 	bl	800307c <__sinit>
 800387c:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <_vfiprintf_r+0x240>)
 800387e:	429d      	cmp	r5, r3
 8003880:	d11b      	bne.n	80038ba <_vfiprintf_r+0x56>
 8003882:	6875      	ldr	r5, [r6, #4]
 8003884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003886:	07d9      	lsls	r1, r3, #31
 8003888:	d405      	bmi.n	8003896 <_vfiprintf_r+0x32>
 800388a:	89ab      	ldrh	r3, [r5, #12]
 800388c:	059a      	lsls	r2, r3, #22
 800388e:	d402      	bmi.n	8003896 <_vfiprintf_r+0x32>
 8003890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003892:	f7ff fc91 	bl	80031b8 <__retarget_lock_acquire_recursive>
 8003896:	89ab      	ldrh	r3, [r5, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	d501      	bpl.n	80038a0 <_vfiprintf_r+0x3c>
 800389c:	692b      	ldr	r3, [r5, #16]
 800389e:	b9eb      	cbnz	r3, 80038dc <_vfiprintf_r+0x78>
 80038a0:	4629      	mov	r1, r5
 80038a2:	4630      	mov	r0, r6
 80038a4:	f7ff fa52 	bl	8002d4c <__swsetup_r>
 80038a8:	b1c0      	cbz	r0, 80038dc <_vfiprintf_r+0x78>
 80038aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ac:	07dc      	lsls	r4, r3, #31
 80038ae:	d50e      	bpl.n	80038ce <_vfiprintf_r+0x6a>
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	b01d      	add	sp, #116	; 0x74
 80038b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ba:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <_vfiprintf_r+0x244>)
 80038bc:	429d      	cmp	r5, r3
 80038be:	d101      	bne.n	80038c4 <_vfiprintf_r+0x60>
 80038c0:	68b5      	ldr	r5, [r6, #8]
 80038c2:	e7df      	b.n	8003884 <_vfiprintf_r+0x20>
 80038c4:	4b79      	ldr	r3, [pc, #484]	; (8003aac <_vfiprintf_r+0x248>)
 80038c6:	429d      	cmp	r5, r3
 80038c8:	bf08      	it	eq
 80038ca:	68f5      	ldreq	r5, [r6, #12]
 80038cc:	e7da      	b.n	8003884 <_vfiprintf_r+0x20>
 80038ce:	89ab      	ldrh	r3, [r5, #12]
 80038d0:	0598      	lsls	r0, r3, #22
 80038d2:	d4ed      	bmi.n	80038b0 <_vfiprintf_r+0x4c>
 80038d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038d6:	f7ff fc70 	bl	80031ba <__retarget_lock_release_recursive>
 80038da:	e7e9      	b.n	80038b0 <_vfiprintf_r+0x4c>
 80038dc:	2300      	movs	r3, #0
 80038de:	9309      	str	r3, [sp, #36]	; 0x24
 80038e0:	2320      	movs	r3, #32
 80038e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80038ea:	2330      	movs	r3, #48	; 0x30
 80038ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ab0 <_vfiprintf_r+0x24c>
 80038f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f4:	f04f 0901 	mov.w	r9, #1
 80038f8:	4623      	mov	r3, r4
 80038fa:	469a      	mov	sl, r3
 80038fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003900:	b10a      	cbz	r2, 8003906 <_vfiprintf_r+0xa2>
 8003902:	2a25      	cmp	r2, #37	; 0x25
 8003904:	d1f9      	bne.n	80038fa <_vfiprintf_r+0x96>
 8003906:	ebba 0b04 	subs.w	fp, sl, r4
 800390a:	d00b      	beq.n	8003924 <_vfiprintf_r+0xc0>
 800390c:	465b      	mov	r3, fp
 800390e:	4622      	mov	r2, r4
 8003910:	4629      	mov	r1, r5
 8003912:	4630      	mov	r0, r6
 8003914:	f7ff ff93 	bl	800383e <__sfputs_r>
 8003918:	3001      	adds	r0, #1
 800391a:	f000 80aa 	beq.w	8003a72 <_vfiprintf_r+0x20e>
 800391e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003920:	445a      	add	r2, fp
 8003922:	9209      	str	r2, [sp, #36]	; 0x24
 8003924:	f89a 3000 	ldrb.w	r3, [sl]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a2 	beq.w	8003a72 <_vfiprintf_r+0x20e>
 800392e:	2300      	movs	r3, #0
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003938:	f10a 0a01 	add.w	sl, sl, #1
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	9307      	str	r3, [sp, #28]
 8003940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003944:	931a      	str	r3, [sp, #104]	; 0x68
 8003946:	4654      	mov	r4, sl
 8003948:	2205      	movs	r2, #5
 800394a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800394e:	4858      	ldr	r0, [pc, #352]	; (8003ab0 <_vfiprintf_r+0x24c>)
 8003950:	f7fc fc4e 	bl	80001f0 <memchr>
 8003954:	9a04      	ldr	r2, [sp, #16]
 8003956:	b9d8      	cbnz	r0, 8003990 <_vfiprintf_r+0x12c>
 8003958:	06d1      	lsls	r1, r2, #27
 800395a:	bf44      	itt	mi
 800395c:	2320      	movmi	r3, #32
 800395e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003962:	0713      	lsls	r3, r2, #28
 8003964:	bf44      	itt	mi
 8003966:	232b      	movmi	r3, #43	; 0x2b
 8003968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800396c:	f89a 3000 	ldrb.w	r3, [sl]
 8003970:	2b2a      	cmp	r3, #42	; 0x2a
 8003972:	d015      	beq.n	80039a0 <_vfiprintf_r+0x13c>
 8003974:	9a07      	ldr	r2, [sp, #28]
 8003976:	4654      	mov	r4, sl
 8003978:	2000      	movs	r0, #0
 800397a:	f04f 0c0a 	mov.w	ip, #10
 800397e:	4621      	mov	r1, r4
 8003980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003984:	3b30      	subs	r3, #48	; 0x30
 8003986:	2b09      	cmp	r3, #9
 8003988:	d94e      	bls.n	8003a28 <_vfiprintf_r+0x1c4>
 800398a:	b1b0      	cbz	r0, 80039ba <_vfiprintf_r+0x156>
 800398c:	9207      	str	r2, [sp, #28]
 800398e:	e014      	b.n	80039ba <_vfiprintf_r+0x156>
 8003990:	eba0 0308 	sub.w	r3, r0, r8
 8003994:	fa09 f303 	lsl.w	r3, r9, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	9304      	str	r3, [sp, #16]
 800399c:	46a2      	mov	sl, r4
 800399e:	e7d2      	b.n	8003946 <_vfiprintf_r+0xe2>
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	1d19      	adds	r1, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	9103      	str	r1, [sp, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bfbb      	ittet	lt
 80039ac:	425b      	neglt	r3, r3
 80039ae:	f042 0202 	orrlt.w	r2, r2, #2
 80039b2:	9307      	strge	r3, [sp, #28]
 80039b4:	9307      	strlt	r3, [sp, #28]
 80039b6:	bfb8      	it	lt
 80039b8:	9204      	strlt	r2, [sp, #16]
 80039ba:	7823      	ldrb	r3, [r4, #0]
 80039bc:	2b2e      	cmp	r3, #46	; 0x2e
 80039be:	d10c      	bne.n	80039da <_vfiprintf_r+0x176>
 80039c0:	7863      	ldrb	r3, [r4, #1]
 80039c2:	2b2a      	cmp	r3, #42	; 0x2a
 80039c4:	d135      	bne.n	8003a32 <_vfiprintf_r+0x1ce>
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	9203      	str	r2, [sp, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80039d6:	3402      	adds	r4, #2
 80039d8:	9305      	str	r3, [sp, #20]
 80039da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ac0 <_vfiprintf_r+0x25c>
 80039de:	7821      	ldrb	r1, [r4, #0]
 80039e0:	2203      	movs	r2, #3
 80039e2:	4650      	mov	r0, sl
 80039e4:	f7fc fc04 	bl	80001f0 <memchr>
 80039e8:	b140      	cbz	r0, 80039fc <_vfiprintf_r+0x198>
 80039ea:	2340      	movs	r3, #64	; 0x40
 80039ec:	eba0 000a 	sub.w	r0, r0, sl
 80039f0:	fa03 f000 	lsl.w	r0, r3, r0
 80039f4:	9b04      	ldr	r3, [sp, #16]
 80039f6:	4303      	orrs	r3, r0
 80039f8:	3401      	adds	r4, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a00:	482c      	ldr	r0, [pc, #176]	; (8003ab4 <_vfiprintf_r+0x250>)
 8003a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a06:	2206      	movs	r2, #6
 8003a08:	f7fc fbf2 	bl	80001f0 <memchr>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d03f      	beq.n	8003a90 <_vfiprintf_r+0x22c>
 8003a10:	4b29      	ldr	r3, [pc, #164]	; (8003ab8 <_vfiprintf_r+0x254>)
 8003a12:	bb1b      	cbnz	r3, 8003a5c <_vfiprintf_r+0x1f8>
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	3307      	adds	r3, #7
 8003a18:	f023 0307 	bic.w	r3, r3, #7
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	9303      	str	r3, [sp, #12]
 8003a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a22:	443b      	add	r3, r7
 8003a24:	9309      	str	r3, [sp, #36]	; 0x24
 8003a26:	e767      	b.n	80038f8 <_vfiprintf_r+0x94>
 8003a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	2001      	movs	r0, #1
 8003a30:	e7a5      	b.n	800397e <_vfiprintf_r+0x11a>
 8003a32:	2300      	movs	r3, #0
 8003a34:	3401      	adds	r4, #1
 8003a36:	9305      	str	r3, [sp, #20]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f04f 0c0a 	mov.w	ip, #10
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a44:	3a30      	subs	r2, #48	; 0x30
 8003a46:	2a09      	cmp	r2, #9
 8003a48:	d903      	bls.n	8003a52 <_vfiprintf_r+0x1ee>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0c5      	beq.n	80039da <_vfiprintf_r+0x176>
 8003a4e:	9105      	str	r1, [sp, #20]
 8003a50:	e7c3      	b.n	80039da <_vfiprintf_r+0x176>
 8003a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a56:	4604      	mov	r4, r0
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e7f0      	b.n	8003a3e <_vfiprintf_r+0x1da>
 8003a5c:	ab03      	add	r3, sp, #12
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	462a      	mov	r2, r5
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <_vfiprintf_r+0x258>)
 8003a64:	a904      	add	r1, sp, #16
 8003a66:	4630      	mov	r0, r6
 8003a68:	f3af 8000 	nop.w
 8003a6c:	4607      	mov	r7, r0
 8003a6e:	1c78      	adds	r0, r7, #1
 8003a70:	d1d6      	bne.n	8003a20 <_vfiprintf_r+0x1bc>
 8003a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a74:	07d9      	lsls	r1, r3, #31
 8003a76:	d405      	bmi.n	8003a84 <_vfiprintf_r+0x220>
 8003a78:	89ab      	ldrh	r3, [r5, #12]
 8003a7a:	059a      	lsls	r2, r3, #22
 8003a7c:	d402      	bmi.n	8003a84 <_vfiprintf_r+0x220>
 8003a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a80:	f7ff fb9b 	bl	80031ba <__retarget_lock_release_recursive>
 8003a84:	89ab      	ldrh	r3, [r5, #12]
 8003a86:	065b      	lsls	r3, r3, #25
 8003a88:	f53f af12 	bmi.w	80038b0 <_vfiprintf_r+0x4c>
 8003a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a8e:	e711      	b.n	80038b4 <_vfiprintf_r+0x50>
 8003a90:	ab03      	add	r3, sp, #12
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	462a      	mov	r2, r5
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <_vfiprintf_r+0x258>)
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f000 f880 	bl	8003ba0 <_printf_i>
 8003aa0:	e7e4      	b.n	8003a6c <_vfiprintf_r+0x208>
 8003aa2:	bf00      	nop
 8003aa4:	08004650 	.word	0x08004650
 8003aa8:	08004670 	.word	0x08004670
 8003aac:	08004630 	.word	0x08004630
 8003ab0:	08004694 	.word	0x08004694
 8003ab4:	0800469a 	.word	0x0800469a
 8003ab8:	00000000 	.word	0x00000000
 8003abc:	0800383f 	.word	0x0800383f
 8003ac0:	08004690 	.word	0x08004690

08003ac4 <_printf_common>:
 8003ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	4616      	mov	r6, r2
 8003aca:	4699      	mov	r9, r3
 8003acc:	688a      	ldr	r2, [r1, #8]
 8003ace:	690b      	ldr	r3, [r1, #16]
 8003ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bfb8      	it	lt
 8003ad8:	4613      	movlt	r3, r2
 8003ada:	6033      	str	r3, [r6, #0]
 8003adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	b10a      	cbz	r2, 8003aea <_printf_common+0x26>
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	0699      	lsls	r1, r3, #26
 8003aee:	bf42      	ittt	mi
 8003af0:	6833      	ldrmi	r3, [r6, #0]
 8003af2:	3302      	addmi	r3, #2
 8003af4:	6033      	strmi	r3, [r6, #0]
 8003af6:	6825      	ldr	r5, [r4, #0]
 8003af8:	f015 0506 	ands.w	r5, r5, #6
 8003afc:	d106      	bne.n	8003b0c <_printf_common+0x48>
 8003afe:	f104 0a19 	add.w	sl, r4, #25
 8003b02:	68e3      	ldr	r3, [r4, #12]
 8003b04:	6832      	ldr	r2, [r6, #0]
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	42ab      	cmp	r3, r5
 8003b0a:	dc26      	bgt.n	8003b5a <_printf_common+0x96>
 8003b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b10:	1e13      	subs	r3, r2, #0
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	bf18      	it	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	0692      	lsls	r2, r2, #26
 8003b1a:	d42b      	bmi.n	8003b74 <_printf_common+0xb0>
 8003b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b20:	4649      	mov	r1, r9
 8003b22:	4638      	mov	r0, r7
 8003b24:	47c0      	blx	r8
 8003b26:	3001      	adds	r0, #1
 8003b28:	d01e      	beq.n	8003b68 <_printf_common+0xa4>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	68e5      	ldr	r5, [r4, #12]
 8003b2e:	6832      	ldr	r2, [r6, #0]
 8003b30:	f003 0306 	and.w	r3, r3, #6
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	bf08      	it	eq
 8003b38:	1aad      	subeq	r5, r5, r2
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	6922      	ldr	r2, [r4, #16]
 8003b3e:	bf0c      	ite	eq
 8003b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b44:	2500      	movne	r5, #0
 8003b46:	4293      	cmp	r3, r2
 8003b48:	bfc4      	itt	gt
 8003b4a:	1a9b      	subgt	r3, r3, r2
 8003b4c:	18ed      	addgt	r5, r5, r3
 8003b4e:	2600      	movs	r6, #0
 8003b50:	341a      	adds	r4, #26
 8003b52:	42b5      	cmp	r5, r6
 8003b54:	d11a      	bne.n	8003b8c <_printf_common+0xc8>
 8003b56:	2000      	movs	r0, #0
 8003b58:	e008      	b.n	8003b6c <_printf_common+0xa8>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4652      	mov	r2, sl
 8003b5e:	4649      	mov	r1, r9
 8003b60:	4638      	mov	r0, r7
 8003b62:	47c0      	blx	r8
 8003b64:	3001      	adds	r0, #1
 8003b66:	d103      	bne.n	8003b70 <_printf_common+0xac>
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b70:	3501      	adds	r5, #1
 8003b72:	e7c6      	b.n	8003b02 <_printf_common+0x3e>
 8003b74:	18e1      	adds	r1, r4, r3
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	2030      	movs	r0, #48	; 0x30
 8003b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b7e:	4422      	add	r2, r4
 8003b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b88:	3302      	adds	r3, #2
 8003b8a:	e7c7      	b.n	8003b1c <_printf_common+0x58>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4622      	mov	r2, r4
 8003b90:	4649      	mov	r1, r9
 8003b92:	4638      	mov	r0, r7
 8003b94:	47c0      	blx	r8
 8003b96:	3001      	adds	r0, #1
 8003b98:	d0e6      	beq.n	8003b68 <_printf_common+0xa4>
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7d9      	b.n	8003b52 <_printf_common+0x8e>
	...

08003ba0 <_printf_i>:
 8003ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	7e0f      	ldrb	r7, [r1, #24]
 8003ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ba8:	2f78      	cmp	r7, #120	; 0x78
 8003baa:	4691      	mov	r9, r2
 8003bac:	4680      	mov	r8, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	469a      	mov	sl, r3
 8003bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bb6:	d807      	bhi.n	8003bc8 <_printf_i+0x28>
 8003bb8:	2f62      	cmp	r7, #98	; 0x62
 8003bba:	d80a      	bhi.n	8003bd2 <_printf_i+0x32>
 8003bbc:	2f00      	cmp	r7, #0
 8003bbe:	f000 80d8 	beq.w	8003d72 <_printf_i+0x1d2>
 8003bc2:	2f58      	cmp	r7, #88	; 0x58
 8003bc4:	f000 80a3 	beq.w	8003d0e <_printf_i+0x16e>
 8003bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bd0:	e03a      	b.n	8003c48 <_printf_i+0xa8>
 8003bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bd6:	2b15      	cmp	r3, #21
 8003bd8:	d8f6      	bhi.n	8003bc8 <_printf_i+0x28>
 8003bda:	a101      	add	r1, pc, #4	; (adr r1, 8003be0 <_printf_i+0x40>)
 8003bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003be0:	08003c39 	.word	0x08003c39
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003bc9 	.word	0x08003bc9
 8003bec:	08003bc9 	.word	0x08003bc9
 8003bf0:	08003bc9 	.word	0x08003bc9
 8003bf4:	08003bc9 	.word	0x08003bc9
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003bc9 	.word	0x08003bc9
 8003c00:	08003bc9 	.word	0x08003bc9
 8003c04:	08003bc9 	.word	0x08003bc9
 8003c08:	08003bc9 	.word	0x08003bc9
 8003c0c:	08003d59 	.word	0x08003d59
 8003c10:	08003c7d 	.word	0x08003c7d
 8003c14:	08003d3b 	.word	0x08003d3b
 8003c18:	08003bc9 	.word	0x08003bc9
 8003c1c:	08003bc9 	.word	0x08003bc9
 8003c20:	08003d7b 	.word	0x08003d7b
 8003c24:	08003bc9 	.word	0x08003bc9
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003bc9 	.word	0x08003bc9
 8003c30:	08003bc9 	.word	0x08003bc9
 8003c34:	08003d43 	.word	0x08003d43
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	602a      	str	r2, [r5, #0]
 8003c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0a3      	b.n	8003d94 <_printf_i+0x1f4>
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	6829      	ldr	r1, [r5, #0]
 8003c50:	0606      	lsls	r6, r0, #24
 8003c52:	f101 0304 	add.w	r3, r1, #4
 8003c56:	d50a      	bpl.n	8003c6e <_printf_i+0xce>
 8003c58:	680e      	ldr	r6, [r1, #0]
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	2e00      	cmp	r6, #0
 8003c5e:	da03      	bge.n	8003c68 <_printf_i+0xc8>
 8003c60:	232d      	movs	r3, #45	; 0x2d
 8003c62:	4276      	negs	r6, r6
 8003c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c68:	485e      	ldr	r0, [pc, #376]	; (8003de4 <_printf_i+0x244>)
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	e019      	b.n	8003ca2 <_printf_i+0x102>
 8003c6e:	680e      	ldr	r6, [r1, #0]
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c76:	bf18      	it	ne
 8003c78:	b236      	sxthne	r6, r6
 8003c7a:	e7ef      	b.n	8003c5c <_printf_i+0xbc>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	1d19      	adds	r1, r3, #4
 8003c82:	6029      	str	r1, [r5, #0]
 8003c84:	0601      	lsls	r1, r0, #24
 8003c86:	d501      	bpl.n	8003c8c <_printf_i+0xec>
 8003c88:	681e      	ldr	r6, [r3, #0]
 8003c8a:	e002      	b.n	8003c92 <_printf_i+0xf2>
 8003c8c:	0646      	lsls	r6, r0, #25
 8003c8e:	d5fb      	bpl.n	8003c88 <_printf_i+0xe8>
 8003c90:	881e      	ldrh	r6, [r3, #0]
 8003c92:	4854      	ldr	r0, [pc, #336]	; (8003de4 <_printf_i+0x244>)
 8003c94:	2f6f      	cmp	r7, #111	; 0x6f
 8003c96:	bf0c      	ite	eq
 8003c98:	2308      	moveq	r3, #8
 8003c9a:	230a      	movne	r3, #10
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ca2:	6865      	ldr	r5, [r4, #4]
 8003ca4:	60a5      	str	r5, [r4, #8]
 8003ca6:	2d00      	cmp	r5, #0
 8003ca8:	bfa2      	ittt	ge
 8003caa:	6821      	ldrge	r1, [r4, #0]
 8003cac:	f021 0104 	bicge.w	r1, r1, #4
 8003cb0:	6021      	strge	r1, [r4, #0]
 8003cb2:	b90e      	cbnz	r6, 8003cb8 <_printf_i+0x118>
 8003cb4:	2d00      	cmp	r5, #0
 8003cb6:	d04d      	beq.n	8003d54 <_printf_i+0x1b4>
 8003cb8:	4615      	mov	r5, r2
 8003cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8003cc2:	5dc7      	ldrb	r7, [r0, r7]
 8003cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cc8:	4637      	mov	r7, r6
 8003cca:	42bb      	cmp	r3, r7
 8003ccc:	460e      	mov	r6, r1
 8003cce:	d9f4      	bls.n	8003cba <_printf_i+0x11a>
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d10b      	bne.n	8003cec <_printf_i+0x14c>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	07de      	lsls	r6, r3, #31
 8003cd8:	d508      	bpl.n	8003cec <_printf_i+0x14c>
 8003cda:	6923      	ldr	r3, [r4, #16]
 8003cdc:	6861      	ldr	r1, [r4, #4]
 8003cde:	4299      	cmp	r1, r3
 8003ce0:	bfde      	ittt	le
 8003ce2:	2330      	movle	r3, #48	; 0x30
 8003ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cec:	1b52      	subs	r2, r2, r5
 8003cee:	6122      	str	r2, [r4, #16]
 8003cf0:	f8cd a000 	str.w	sl, [sp]
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	aa03      	add	r2, sp, #12
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f7ff fee2 	bl	8003ac4 <_printf_common>
 8003d00:	3001      	adds	r0, #1
 8003d02:	d14c      	bne.n	8003d9e <_printf_i+0x1fe>
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	b004      	add	sp, #16
 8003d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0e:	4835      	ldr	r0, [pc, #212]	; (8003de4 <_printf_i+0x244>)
 8003d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d14:	6829      	ldr	r1, [r5, #0]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d1c:	6029      	str	r1, [r5, #0]
 8003d1e:	061d      	lsls	r5, r3, #24
 8003d20:	d514      	bpl.n	8003d4c <_printf_i+0x1ac>
 8003d22:	07df      	lsls	r7, r3, #31
 8003d24:	bf44      	itt	mi
 8003d26:	f043 0320 	orrmi.w	r3, r3, #32
 8003d2a:	6023      	strmi	r3, [r4, #0]
 8003d2c:	b91e      	cbnz	r6, 8003d36 <_printf_i+0x196>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f023 0320 	bic.w	r3, r3, #32
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	2310      	movs	r3, #16
 8003d38:	e7b0      	b.n	8003c9c <_printf_i+0xfc>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f043 0320 	orr.w	r3, r3, #32
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	2378      	movs	r3, #120	; 0x78
 8003d44:	4828      	ldr	r0, [pc, #160]	; (8003de8 <_printf_i+0x248>)
 8003d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d4a:	e7e3      	b.n	8003d14 <_printf_i+0x174>
 8003d4c:	0659      	lsls	r1, r3, #25
 8003d4e:	bf48      	it	mi
 8003d50:	b2b6      	uxthmi	r6, r6
 8003d52:	e7e6      	b.n	8003d22 <_printf_i+0x182>
 8003d54:	4615      	mov	r5, r2
 8003d56:	e7bb      	b.n	8003cd0 <_printf_i+0x130>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	6826      	ldr	r6, [r4, #0]
 8003d5c:	6961      	ldr	r1, [r4, #20]
 8003d5e:	1d18      	adds	r0, r3, #4
 8003d60:	6028      	str	r0, [r5, #0]
 8003d62:	0635      	lsls	r5, r6, #24
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	d501      	bpl.n	8003d6c <_printf_i+0x1cc>
 8003d68:	6019      	str	r1, [r3, #0]
 8003d6a:	e002      	b.n	8003d72 <_printf_i+0x1d2>
 8003d6c:	0670      	lsls	r0, r6, #25
 8003d6e:	d5fb      	bpl.n	8003d68 <_printf_i+0x1c8>
 8003d70:	8019      	strh	r1, [r3, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	6123      	str	r3, [r4, #16]
 8003d76:	4615      	mov	r5, r2
 8003d78:	e7ba      	b.n	8003cf0 <_printf_i+0x150>
 8003d7a:	682b      	ldr	r3, [r5, #0]
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	602a      	str	r2, [r5, #0]
 8003d80:	681d      	ldr	r5, [r3, #0]
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	2100      	movs	r1, #0
 8003d86:	4628      	mov	r0, r5
 8003d88:	f7fc fa32 	bl	80001f0 <memchr>
 8003d8c:	b108      	cbz	r0, 8003d92 <_printf_i+0x1f2>
 8003d8e:	1b40      	subs	r0, r0, r5
 8003d90:	6060      	str	r0, [r4, #4]
 8003d92:	6863      	ldr	r3, [r4, #4]
 8003d94:	6123      	str	r3, [r4, #16]
 8003d96:	2300      	movs	r3, #0
 8003d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9c:	e7a8      	b.n	8003cf0 <_printf_i+0x150>
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	462a      	mov	r2, r5
 8003da2:	4649      	mov	r1, r9
 8003da4:	4640      	mov	r0, r8
 8003da6:	47d0      	blx	sl
 8003da8:	3001      	adds	r0, #1
 8003daa:	d0ab      	beq.n	8003d04 <_printf_i+0x164>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	079b      	lsls	r3, r3, #30
 8003db0:	d413      	bmi.n	8003dda <_printf_i+0x23a>
 8003db2:	68e0      	ldr	r0, [r4, #12]
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	4298      	cmp	r0, r3
 8003db8:	bfb8      	it	lt
 8003dba:	4618      	movlt	r0, r3
 8003dbc:	e7a4      	b.n	8003d08 <_printf_i+0x168>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	47d0      	blx	sl
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d09b      	beq.n	8003d04 <_printf_i+0x164>
 8003dcc:	3501      	adds	r5, #1
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	9903      	ldr	r1, [sp, #12]
 8003dd2:	1a5b      	subs	r3, r3, r1
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dcf2      	bgt.n	8003dbe <_printf_i+0x21e>
 8003dd8:	e7eb      	b.n	8003db2 <_printf_i+0x212>
 8003dda:	2500      	movs	r5, #0
 8003ddc:	f104 0619 	add.w	r6, r4, #25
 8003de0:	e7f5      	b.n	8003dce <_printf_i+0x22e>
 8003de2:	bf00      	nop
 8003de4:	080046a1 	.word	0x080046a1
 8003de8:	080046b2 	.word	0x080046b2

08003dec <_scanf_chars>:
 8003dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df0:	4615      	mov	r5, r2
 8003df2:	688a      	ldr	r2, [r1, #8]
 8003df4:	4680      	mov	r8, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	b932      	cbnz	r2, 8003e08 <_scanf_chars+0x1c>
 8003dfa:	698a      	ldr	r2, [r1, #24]
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2201      	moveq	r2, #1
 8003e02:	f04f 32ff 	movne.w	r2, #4294967295
 8003e06:	608a      	str	r2, [r1, #8]
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003e9c <_scanf_chars+0xb0>
 8003e0e:	06d1      	lsls	r1, r2, #27
 8003e10:	bf5f      	itttt	pl
 8003e12:	681a      	ldrpl	r2, [r3, #0]
 8003e14:	1d11      	addpl	r1, r2, #4
 8003e16:	6019      	strpl	r1, [r3, #0]
 8003e18:	6816      	ldrpl	r6, [r2, #0]
 8003e1a:	2700      	movs	r7, #0
 8003e1c:	69a0      	ldr	r0, [r4, #24]
 8003e1e:	b188      	cbz	r0, 8003e44 <_scanf_chars+0x58>
 8003e20:	2801      	cmp	r0, #1
 8003e22:	d107      	bne.n	8003e34 <_scanf_chars+0x48>
 8003e24:	682a      	ldr	r2, [r5, #0]
 8003e26:	7811      	ldrb	r1, [r2, #0]
 8003e28:	6962      	ldr	r2, [r4, #20]
 8003e2a:	5c52      	ldrb	r2, [r2, r1]
 8003e2c:	b952      	cbnz	r2, 8003e44 <_scanf_chars+0x58>
 8003e2e:	2f00      	cmp	r7, #0
 8003e30:	d031      	beq.n	8003e96 <_scanf_chars+0xaa>
 8003e32:	e022      	b.n	8003e7a <_scanf_chars+0x8e>
 8003e34:	2802      	cmp	r0, #2
 8003e36:	d120      	bne.n	8003e7a <_scanf_chars+0x8e>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	d41a      	bmi.n	8003e7a <_scanf_chars+0x8e>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	06da      	lsls	r2, r3, #27
 8003e48:	bf5e      	ittt	pl
 8003e4a:	682b      	ldrpl	r3, [r5, #0]
 8003e4c:	781b      	ldrbpl	r3, [r3, #0]
 8003e4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003e52:	682a      	ldr	r2, [r5, #0]
 8003e54:	686b      	ldr	r3, [r5, #4]
 8003e56:	3201      	adds	r2, #1
 8003e58:	602a      	str	r2, [r5, #0]
 8003e5a:	68a2      	ldr	r2, [r4, #8]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	606b      	str	r3, [r5, #4]
 8003e62:	3701      	adds	r7, #1
 8003e64:	60a2      	str	r2, [r4, #8]
 8003e66:	b142      	cbz	r2, 8003e7a <_scanf_chars+0x8e>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dcd7      	bgt.n	8003e1c <_scanf_chars+0x30>
 8003e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e70:	4629      	mov	r1, r5
 8003e72:	4640      	mov	r0, r8
 8003e74:	4798      	blx	r3
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d0d0      	beq.n	8003e1c <_scanf_chars+0x30>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	f013 0310 	ands.w	r3, r3, #16
 8003e80:	d105      	bne.n	8003e8e <_scanf_chars+0xa2>
 8003e82:	68e2      	ldr	r2, [r4, #12]
 8003e84:	3201      	adds	r2, #1
 8003e86:	60e2      	str	r2, [r4, #12]
 8003e88:	69a2      	ldr	r2, [r4, #24]
 8003e8a:	b102      	cbz	r2, 8003e8e <_scanf_chars+0xa2>
 8003e8c:	7033      	strb	r3, [r6, #0]
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	443b      	add	r3, r7
 8003e92:	6123      	str	r3, [r4, #16]
 8003e94:	2000      	movs	r0, #0
 8003e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080046df 	.word	0x080046df

08003ea0 <_scanf_i>:
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	4698      	mov	r8, r3
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <_scanf_i+0x1e0>)
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	4682      	mov	sl, r0
 8003eac:	4616      	mov	r6, r2
 8003eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003eba:	4b72      	ldr	r3, [pc, #456]	; (8004084 <_scanf_i+0x1e4>)
 8003ebc:	69a1      	ldr	r1, [r4, #24]
 8003ebe:	4a72      	ldr	r2, [pc, #456]	; (8004088 <_scanf_i+0x1e8>)
 8003ec0:	2903      	cmp	r1, #3
 8003ec2:	bf18      	it	ne
 8003ec4:	461a      	movne	r2, r3
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	9201      	str	r2, [sp, #4]
 8003eca:	1e5a      	subs	r2, r3, #1
 8003ecc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003ed0:	bf88      	it	hi
 8003ed2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003ed6:	4627      	mov	r7, r4
 8003ed8:	bf82      	ittt	hi
 8003eda:	eb03 0905 	addhi.w	r9, r3, r5
 8003ede:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003ee2:	60a3      	strhi	r3, [r4, #8]
 8003ee4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003ee8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003eec:	bf98      	it	ls
 8003eee:	f04f 0900 	movls.w	r9, #0
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	463d      	mov	r5, r7
 8003ef6:	f04f 0b00 	mov.w	fp, #0
 8003efa:	6831      	ldr	r1, [r6, #0]
 8003efc:	ab03      	add	r3, sp, #12
 8003efe:	7809      	ldrb	r1, [r1, #0]
 8003f00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f7fc f973 	bl	80001f0 <memchr>
 8003f0a:	b328      	cbz	r0, 8003f58 <_scanf_i+0xb8>
 8003f0c:	f1bb 0f01 	cmp.w	fp, #1
 8003f10:	d159      	bne.n	8003fc6 <_scanf_i+0x126>
 8003f12:	6862      	ldr	r2, [r4, #4]
 8003f14:	b92a      	cbnz	r2, 8003f22 <_scanf_i+0x82>
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	68a2      	ldr	r2, [r4, #8]
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	60a1      	str	r1, [r4, #8]
 8003f30:	b192      	cbz	r2, 8003f58 <_scanf_i+0xb8>
 8003f32:	6832      	ldr	r2, [r6, #0]
 8003f34:	1c51      	adds	r1, r2, #1
 8003f36:	6031      	str	r1, [r6, #0]
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	f805 2b01 	strb.w	r2, [r5], #1
 8003f3e:	6872      	ldr	r2, [r6, #4]
 8003f40:	3a01      	subs	r2, #1
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	6072      	str	r2, [r6, #4]
 8003f46:	dc07      	bgt.n	8003f58 <_scanf_i+0xb8>
 8003f48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003f4c:	4631      	mov	r1, r6
 8003f4e:	4650      	mov	r0, sl
 8003f50:	4790      	blx	r2
 8003f52:	2800      	cmp	r0, #0
 8003f54:	f040 8085 	bne.w	8004062 <_scanf_i+0x1c2>
 8003f58:	f10b 0b01 	add.w	fp, fp, #1
 8003f5c:	f1bb 0f03 	cmp.w	fp, #3
 8003f60:	d1cb      	bne.n	8003efa <_scanf_i+0x5a>
 8003f62:	6863      	ldr	r3, [r4, #4]
 8003f64:	b90b      	cbnz	r3, 8003f6a <_scanf_i+0xca>
 8003f66:	230a      	movs	r3, #10
 8003f68:	6063      	str	r3, [r4, #4]
 8003f6a:	6863      	ldr	r3, [r4, #4]
 8003f6c:	4947      	ldr	r1, [pc, #284]	; (800408c <_scanf_i+0x1ec>)
 8003f6e:	6960      	ldr	r0, [r4, #20]
 8003f70:	1ac9      	subs	r1, r1, r3
 8003f72:	f000 f8af 	bl	80040d4 <__sccl>
 8003f76:	f04f 0b00 	mov.w	fp, #0
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03d      	beq.n	8003ffe <_scanf_i+0x15e>
 8003f82:	6831      	ldr	r1, [r6, #0]
 8003f84:	6960      	ldr	r0, [r4, #20]
 8003f86:	f891 c000 	ldrb.w	ip, [r1]
 8003f8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d035      	beq.n	8003ffe <_scanf_i+0x15e>
 8003f92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003f96:	d124      	bne.n	8003fe2 <_scanf_i+0x142>
 8003f98:	0510      	lsls	r0, r2, #20
 8003f9a:	d522      	bpl.n	8003fe2 <_scanf_i+0x142>
 8003f9c:	f10b 0b01 	add.w	fp, fp, #1
 8003fa0:	f1b9 0f00 	cmp.w	r9, #0
 8003fa4:	d003      	beq.n	8003fae <_scanf_i+0x10e>
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8003fac:	60a3      	str	r3, [r4, #8]
 8003fae:	6873      	ldr	r3, [r6, #4]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	6073      	str	r3, [r6, #4]
 8003fb6:	dd1b      	ble.n	8003ff0 <_scanf_i+0x150>
 8003fb8:	6833      	ldr	r3, [r6, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	e7d9      	b.n	8003f7a <_scanf_i+0xda>
 8003fc6:	f1bb 0f02 	cmp.w	fp, #2
 8003fca:	d1ae      	bne.n	8003f2a <_scanf_i+0x8a>
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003fd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003fd6:	d1bf      	bne.n	8003f58 <_scanf_i+0xb8>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe0:	e7a2      	b.n	8003f28 <_scanf_i+0x88>
 8003fe2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003fe6:	6022      	str	r2, [r4, #0]
 8003fe8:	780b      	ldrb	r3, [r1, #0]
 8003fea:	f805 3b01 	strb.w	r3, [r5], #1
 8003fee:	e7de      	b.n	8003fae <_scanf_i+0x10e>
 8003ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4650      	mov	r0, sl
 8003ff8:	4798      	blx	r3
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0df      	beq.n	8003fbe <_scanf_i+0x11e>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	05db      	lsls	r3, r3, #23
 8004002:	d50d      	bpl.n	8004020 <_scanf_i+0x180>
 8004004:	42bd      	cmp	r5, r7
 8004006:	d909      	bls.n	800401c <_scanf_i+0x17c>
 8004008:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800400c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004010:	4632      	mov	r2, r6
 8004012:	4650      	mov	r0, sl
 8004014:	4798      	blx	r3
 8004016:	f105 39ff 	add.w	r9, r5, #4294967295
 800401a:	464d      	mov	r5, r9
 800401c:	42bd      	cmp	r5, r7
 800401e:	d02d      	beq.n	800407c <_scanf_i+0x1dc>
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	f012 0210 	ands.w	r2, r2, #16
 8004026:	d113      	bne.n	8004050 <_scanf_i+0x1b0>
 8004028:	702a      	strb	r2, [r5, #0]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	9e01      	ldr	r6, [sp, #4]
 800402e:	4639      	mov	r1, r7
 8004030:	4650      	mov	r0, sl
 8004032:	47b0      	blx	r6
 8004034:	6821      	ldr	r1, [r4, #0]
 8004036:	f8d8 3000 	ldr.w	r3, [r8]
 800403a:	f011 0f20 	tst.w	r1, #32
 800403e:	d013      	beq.n	8004068 <_scanf_i+0x1c8>
 8004040:	1d1a      	adds	r2, r3, #4
 8004042:	f8c8 2000 	str.w	r2, [r8]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6018      	str	r0, [r3, #0]
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	3301      	adds	r3, #1
 800404e:	60e3      	str	r3, [r4, #12]
 8004050:	1bed      	subs	r5, r5, r7
 8004052:	44ab      	add	fp, r5
 8004054:	6925      	ldr	r5, [r4, #16]
 8004056:	445d      	add	r5, fp
 8004058:	6125      	str	r5, [r4, #16]
 800405a:	2000      	movs	r0, #0
 800405c:	b007      	add	sp, #28
 800405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	e7ca      	b.n	8003ffe <_scanf_i+0x15e>
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	f8c8 2000 	str.w	r2, [r8]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f011 0f01 	tst.w	r1, #1
 8004074:	bf14      	ite	ne
 8004076:	8018      	strhne	r0, [r3, #0]
 8004078:	6018      	streq	r0, [r3, #0]
 800407a:	e7e6      	b.n	800404a <_scanf_i+0x1aa>
 800407c:	2001      	movs	r0, #1
 800407e:	e7ed      	b.n	800405c <_scanf_i+0x1bc>
 8004080:	08004608 	.word	0x08004608
 8004084:	08004331 	.word	0x08004331
 8004088:	08004249 	.word	0x08004249
 800408c:	080046dc 	.word	0x080046dc

08004090 <_read_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4d07      	ldr	r5, [pc, #28]	; (80040b0 <_read_r+0x20>)
 8004094:	4604      	mov	r4, r0
 8004096:	4608      	mov	r0, r1
 8004098:	4611      	mov	r1, r2
 800409a:	2200      	movs	r2, #0
 800409c:	602a      	str	r2, [r5, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	f7fc fd9a 	bl	8000bd8 <_read>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_read_r+0x1e>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_read_r+0x1e>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	20000568 	.word	0x20000568

080040b4 <_sbrk_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4d06      	ldr	r5, [pc, #24]	; (80040d0 <_sbrk_r+0x1c>)
 80040b8:	2300      	movs	r3, #0
 80040ba:	4604      	mov	r4, r0
 80040bc:	4608      	mov	r0, r1
 80040be:	602b      	str	r3, [r5, #0]
 80040c0:	f7fc fdf8 	bl	8000cb4 <_sbrk>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_sbrk_r+0x1a>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_sbrk_r+0x1a>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	20000568 	.word	0x20000568

080040d4 <__sccl>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	780b      	ldrb	r3, [r1, #0]
 80040d8:	4604      	mov	r4, r0
 80040da:	2b5e      	cmp	r3, #94	; 0x5e
 80040dc:	bf0b      	itete	eq
 80040de:	784b      	ldrbeq	r3, [r1, #1]
 80040e0:	1c48      	addne	r0, r1, #1
 80040e2:	1c88      	addeq	r0, r1, #2
 80040e4:	2200      	movne	r2, #0
 80040e6:	bf08      	it	eq
 80040e8:	2201      	moveq	r2, #1
 80040ea:	1e61      	subs	r1, r4, #1
 80040ec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80040f0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80040f4:	42a9      	cmp	r1, r5
 80040f6:	d1fb      	bne.n	80040f0 <__sccl+0x1c>
 80040f8:	b90b      	cbnz	r3, 80040fe <__sccl+0x2a>
 80040fa:	3801      	subs	r0, #1
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
 80040fe:	f082 0201 	eor.w	r2, r2, #1
 8004102:	54e2      	strb	r2, [r4, r3]
 8004104:	4605      	mov	r5, r0
 8004106:	4628      	mov	r0, r5
 8004108:	f810 1b01 	ldrb.w	r1, [r0], #1
 800410c:	292d      	cmp	r1, #45	; 0x2d
 800410e:	d006      	beq.n	800411e <__sccl+0x4a>
 8004110:	295d      	cmp	r1, #93	; 0x5d
 8004112:	d0f3      	beq.n	80040fc <__sccl+0x28>
 8004114:	b909      	cbnz	r1, 800411a <__sccl+0x46>
 8004116:	4628      	mov	r0, r5
 8004118:	e7f0      	b.n	80040fc <__sccl+0x28>
 800411a:	460b      	mov	r3, r1
 800411c:	e7f1      	b.n	8004102 <__sccl+0x2e>
 800411e:	786e      	ldrb	r6, [r5, #1]
 8004120:	2e5d      	cmp	r6, #93	; 0x5d
 8004122:	d0fa      	beq.n	800411a <__sccl+0x46>
 8004124:	42b3      	cmp	r3, r6
 8004126:	dcf8      	bgt.n	800411a <__sccl+0x46>
 8004128:	3502      	adds	r5, #2
 800412a:	4619      	mov	r1, r3
 800412c:	3101      	adds	r1, #1
 800412e:	428e      	cmp	r6, r1
 8004130:	5462      	strb	r2, [r4, r1]
 8004132:	dcfb      	bgt.n	800412c <__sccl+0x58>
 8004134:	1af1      	subs	r1, r6, r3
 8004136:	3901      	subs	r1, #1
 8004138:	1c58      	adds	r0, r3, #1
 800413a:	42b3      	cmp	r3, r6
 800413c:	bfa8      	it	ge
 800413e:	2100      	movge	r1, #0
 8004140:	1843      	adds	r3, r0, r1
 8004142:	e7e0      	b.n	8004106 <__sccl+0x32>

08004144 <_strtol_l.constprop.0>:
 8004144:	2b01      	cmp	r3, #1
 8004146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414a:	d001      	beq.n	8004150 <_strtol_l.constprop.0+0xc>
 800414c:	2b24      	cmp	r3, #36	; 0x24
 800414e:	d906      	bls.n	800415e <_strtol_l.constprop.0+0x1a>
 8004150:	f7fe fc3c 	bl	80029cc <__errno>
 8004154:	2316      	movs	r3, #22
 8004156:	6003      	str	r3, [r0, #0]
 8004158:	2000      	movs	r0, #0
 800415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004244 <_strtol_l.constprop.0+0x100>
 8004162:	460d      	mov	r5, r1
 8004164:	462e      	mov	r6, r5
 8004166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800416a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800416e:	f017 0708 	ands.w	r7, r7, #8
 8004172:	d1f7      	bne.n	8004164 <_strtol_l.constprop.0+0x20>
 8004174:	2c2d      	cmp	r4, #45	; 0x2d
 8004176:	d132      	bne.n	80041de <_strtol_l.constprop.0+0x9a>
 8004178:	782c      	ldrb	r4, [r5, #0]
 800417a:	2701      	movs	r7, #1
 800417c:	1cb5      	adds	r5, r6, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d05b      	beq.n	800423a <_strtol_l.constprop.0+0xf6>
 8004182:	2b10      	cmp	r3, #16
 8004184:	d109      	bne.n	800419a <_strtol_l.constprop.0+0x56>
 8004186:	2c30      	cmp	r4, #48	; 0x30
 8004188:	d107      	bne.n	800419a <_strtol_l.constprop.0+0x56>
 800418a:	782c      	ldrb	r4, [r5, #0]
 800418c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004190:	2c58      	cmp	r4, #88	; 0x58
 8004192:	d14d      	bne.n	8004230 <_strtol_l.constprop.0+0xec>
 8004194:	786c      	ldrb	r4, [r5, #1]
 8004196:	2310      	movs	r3, #16
 8004198:	3502      	adds	r5, #2
 800419a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800419e:	f108 38ff 	add.w	r8, r8, #4294967295
 80041a2:	f04f 0c00 	mov.w	ip, #0
 80041a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80041aa:	4666      	mov	r6, ip
 80041ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80041b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80041b4:	f1be 0f09 	cmp.w	lr, #9
 80041b8:	d816      	bhi.n	80041e8 <_strtol_l.constprop.0+0xa4>
 80041ba:	4674      	mov	r4, lr
 80041bc:	42a3      	cmp	r3, r4
 80041be:	dd24      	ble.n	800420a <_strtol_l.constprop.0+0xc6>
 80041c0:	f1bc 0f00 	cmp.w	ip, #0
 80041c4:	db1e      	blt.n	8004204 <_strtol_l.constprop.0+0xc0>
 80041c6:	45b1      	cmp	r9, r6
 80041c8:	d31c      	bcc.n	8004204 <_strtol_l.constprop.0+0xc0>
 80041ca:	d101      	bne.n	80041d0 <_strtol_l.constprop.0+0x8c>
 80041cc:	45a2      	cmp	sl, r4
 80041ce:	db19      	blt.n	8004204 <_strtol_l.constprop.0+0xc0>
 80041d0:	fb06 4603 	mla	r6, r6, r3, r4
 80041d4:	f04f 0c01 	mov.w	ip, #1
 80041d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041dc:	e7e8      	b.n	80041b0 <_strtol_l.constprop.0+0x6c>
 80041de:	2c2b      	cmp	r4, #43	; 0x2b
 80041e0:	bf04      	itt	eq
 80041e2:	782c      	ldrbeq	r4, [r5, #0]
 80041e4:	1cb5      	addeq	r5, r6, #2
 80041e6:	e7ca      	b.n	800417e <_strtol_l.constprop.0+0x3a>
 80041e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80041ec:	f1be 0f19 	cmp.w	lr, #25
 80041f0:	d801      	bhi.n	80041f6 <_strtol_l.constprop.0+0xb2>
 80041f2:	3c37      	subs	r4, #55	; 0x37
 80041f4:	e7e2      	b.n	80041bc <_strtol_l.constprop.0+0x78>
 80041f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80041fa:	f1be 0f19 	cmp.w	lr, #25
 80041fe:	d804      	bhi.n	800420a <_strtol_l.constprop.0+0xc6>
 8004200:	3c57      	subs	r4, #87	; 0x57
 8004202:	e7db      	b.n	80041bc <_strtol_l.constprop.0+0x78>
 8004204:	f04f 3cff 	mov.w	ip, #4294967295
 8004208:	e7e6      	b.n	80041d8 <_strtol_l.constprop.0+0x94>
 800420a:	f1bc 0f00 	cmp.w	ip, #0
 800420e:	da05      	bge.n	800421c <_strtol_l.constprop.0+0xd8>
 8004210:	2322      	movs	r3, #34	; 0x22
 8004212:	6003      	str	r3, [r0, #0]
 8004214:	4646      	mov	r6, r8
 8004216:	b942      	cbnz	r2, 800422a <_strtol_l.constprop.0+0xe6>
 8004218:	4630      	mov	r0, r6
 800421a:	e79e      	b.n	800415a <_strtol_l.constprop.0+0x16>
 800421c:	b107      	cbz	r7, 8004220 <_strtol_l.constprop.0+0xdc>
 800421e:	4276      	negs	r6, r6
 8004220:	2a00      	cmp	r2, #0
 8004222:	d0f9      	beq.n	8004218 <_strtol_l.constprop.0+0xd4>
 8004224:	f1bc 0f00 	cmp.w	ip, #0
 8004228:	d000      	beq.n	800422c <_strtol_l.constprop.0+0xe8>
 800422a:	1e69      	subs	r1, r5, #1
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	e7f3      	b.n	8004218 <_strtol_l.constprop.0+0xd4>
 8004230:	2430      	movs	r4, #48	; 0x30
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1b1      	bne.n	800419a <_strtol_l.constprop.0+0x56>
 8004236:	2308      	movs	r3, #8
 8004238:	e7af      	b.n	800419a <_strtol_l.constprop.0+0x56>
 800423a:	2c30      	cmp	r4, #48	; 0x30
 800423c:	d0a5      	beq.n	800418a <_strtol_l.constprop.0+0x46>
 800423e:	230a      	movs	r3, #10
 8004240:	e7ab      	b.n	800419a <_strtol_l.constprop.0+0x56>
 8004242:	bf00      	nop
 8004244:	080046df 	.word	0x080046df

08004248 <_strtol_r>:
 8004248:	f7ff bf7c 	b.w	8004144 <_strtol_l.constprop.0>

0800424c <_strtoul_l.constprop.0>:
 800424c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004250:	4f36      	ldr	r7, [pc, #216]	; (800432c <_strtoul_l.constprop.0+0xe0>)
 8004252:	4686      	mov	lr, r0
 8004254:	460d      	mov	r5, r1
 8004256:	4628      	mov	r0, r5
 8004258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800425c:	5de6      	ldrb	r6, [r4, r7]
 800425e:	f016 0608 	ands.w	r6, r6, #8
 8004262:	d1f8      	bne.n	8004256 <_strtoul_l.constprop.0+0xa>
 8004264:	2c2d      	cmp	r4, #45	; 0x2d
 8004266:	d12f      	bne.n	80042c8 <_strtoul_l.constprop.0+0x7c>
 8004268:	782c      	ldrb	r4, [r5, #0]
 800426a:	2601      	movs	r6, #1
 800426c:	1c85      	adds	r5, r0, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d057      	beq.n	8004322 <_strtoul_l.constprop.0+0xd6>
 8004272:	2b10      	cmp	r3, #16
 8004274:	d109      	bne.n	800428a <_strtoul_l.constprop.0+0x3e>
 8004276:	2c30      	cmp	r4, #48	; 0x30
 8004278:	d107      	bne.n	800428a <_strtoul_l.constprop.0+0x3e>
 800427a:	7828      	ldrb	r0, [r5, #0]
 800427c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004280:	2858      	cmp	r0, #88	; 0x58
 8004282:	d149      	bne.n	8004318 <_strtoul_l.constprop.0+0xcc>
 8004284:	786c      	ldrb	r4, [r5, #1]
 8004286:	2310      	movs	r3, #16
 8004288:	3502      	adds	r5, #2
 800428a:	f04f 38ff 	mov.w	r8, #4294967295
 800428e:	2700      	movs	r7, #0
 8004290:	fbb8 f8f3 	udiv	r8, r8, r3
 8004294:	fb03 f908 	mul.w	r9, r3, r8
 8004298:	ea6f 0909 	mvn.w	r9, r9
 800429c:	4638      	mov	r0, r7
 800429e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80042a2:	f1bc 0f09 	cmp.w	ip, #9
 80042a6:	d814      	bhi.n	80042d2 <_strtoul_l.constprop.0+0x86>
 80042a8:	4664      	mov	r4, ip
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	dd22      	ble.n	80042f4 <_strtoul_l.constprop.0+0xa8>
 80042ae:	2f00      	cmp	r7, #0
 80042b0:	db1d      	blt.n	80042ee <_strtoul_l.constprop.0+0xa2>
 80042b2:	4580      	cmp	r8, r0
 80042b4:	d31b      	bcc.n	80042ee <_strtoul_l.constprop.0+0xa2>
 80042b6:	d101      	bne.n	80042bc <_strtoul_l.constprop.0+0x70>
 80042b8:	45a1      	cmp	r9, r4
 80042ba:	db18      	blt.n	80042ee <_strtoul_l.constprop.0+0xa2>
 80042bc:	fb00 4003 	mla	r0, r0, r3, r4
 80042c0:	2701      	movs	r7, #1
 80042c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042c6:	e7ea      	b.n	800429e <_strtoul_l.constprop.0+0x52>
 80042c8:	2c2b      	cmp	r4, #43	; 0x2b
 80042ca:	bf04      	itt	eq
 80042cc:	782c      	ldrbeq	r4, [r5, #0]
 80042ce:	1c85      	addeq	r5, r0, #2
 80042d0:	e7cd      	b.n	800426e <_strtoul_l.constprop.0+0x22>
 80042d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80042d6:	f1bc 0f19 	cmp.w	ip, #25
 80042da:	d801      	bhi.n	80042e0 <_strtoul_l.constprop.0+0x94>
 80042dc:	3c37      	subs	r4, #55	; 0x37
 80042de:	e7e4      	b.n	80042aa <_strtoul_l.constprop.0+0x5e>
 80042e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80042e4:	f1bc 0f19 	cmp.w	ip, #25
 80042e8:	d804      	bhi.n	80042f4 <_strtoul_l.constprop.0+0xa8>
 80042ea:	3c57      	subs	r4, #87	; 0x57
 80042ec:	e7dd      	b.n	80042aa <_strtoul_l.constprop.0+0x5e>
 80042ee:	f04f 37ff 	mov.w	r7, #4294967295
 80042f2:	e7e6      	b.n	80042c2 <_strtoul_l.constprop.0+0x76>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	da07      	bge.n	8004308 <_strtoul_l.constprop.0+0xbc>
 80042f8:	2322      	movs	r3, #34	; 0x22
 80042fa:	f8ce 3000 	str.w	r3, [lr]
 80042fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004302:	b932      	cbnz	r2, 8004312 <_strtoul_l.constprop.0+0xc6>
 8004304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004308:	b106      	cbz	r6, 800430c <_strtoul_l.constprop.0+0xc0>
 800430a:	4240      	negs	r0, r0
 800430c:	2a00      	cmp	r2, #0
 800430e:	d0f9      	beq.n	8004304 <_strtoul_l.constprop.0+0xb8>
 8004310:	b107      	cbz	r7, 8004314 <_strtoul_l.constprop.0+0xc8>
 8004312:	1e69      	subs	r1, r5, #1
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	e7f5      	b.n	8004304 <_strtoul_l.constprop.0+0xb8>
 8004318:	2430      	movs	r4, #48	; 0x30
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1b5      	bne.n	800428a <_strtoul_l.constprop.0+0x3e>
 800431e:	2308      	movs	r3, #8
 8004320:	e7b3      	b.n	800428a <_strtoul_l.constprop.0+0x3e>
 8004322:	2c30      	cmp	r4, #48	; 0x30
 8004324:	d0a9      	beq.n	800427a <_strtoul_l.constprop.0+0x2e>
 8004326:	230a      	movs	r3, #10
 8004328:	e7af      	b.n	800428a <_strtoul_l.constprop.0+0x3e>
 800432a:	bf00      	nop
 800432c:	080046df 	.word	0x080046df

08004330 <_strtoul_r>:
 8004330:	f7ff bf8c 	b.w	800424c <_strtoul_l.constprop.0>

08004334 <__submore>:
 8004334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004338:	460c      	mov	r4, r1
 800433a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800433c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004340:	4299      	cmp	r1, r3
 8004342:	d11d      	bne.n	8004380 <__submore+0x4c>
 8004344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004348:	f7ff f81c 	bl	8003384 <_malloc_r>
 800434c:	b918      	cbnz	r0, 8004356 <__submore+0x22>
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435a:	63a3      	str	r3, [r4, #56]	; 0x38
 800435c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004360:	6360      	str	r0, [r4, #52]	; 0x34
 8004362:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004366:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800436a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800436e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004372:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004376:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800437a:	6020      	str	r0, [r4, #0]
 800437c:	2000      	movs	r0, #0
 800437e:	e7e8      	b.n	8004352 <__submore+0x1e>
 8004380:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004382:	0077      	lsls	r7, r6, #1
 8004384:	463a      	mov	r2, r7
 8004386:	f000 f84b 	bl	8004420 <_realloc_r>
 800438a:	4605      	mov	r5, r0
 800438c:	2800      	cmp	r0, #0
 800438e:	d0de      	beq.n	800434e <__submore+0x1a>
 8004390:	eb00 0806 	add.w	r8, r0, r6
 8004394:	4601      	mov	r1, r0
 8004396:	4632      	mov	r2, r6
 8004398:	4640      	mov	r0, r8
 800439a:	f000 f827 	bl	80043ec <memcpy>
 800439e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80043a2:	f8c4 8000 	str.w	r8, [r4]
 80043a6:	e7e9      	b.n	800437c <__submore+0x48>

080043a8 <_fstat_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4d07      	ldr	r5, [pc, #28]	; (80043c8 <_fstat_r+0x20>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	602b      	str	r3, [r5, #0]
 80043b6:	f7fc fc54 	bl	8000c62 <_fstat>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d102      	bne.n	80043c4 <_fstat_r+0x1c>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	b103      	cbz	r3, 80043c4 <_fstat_r+0x1c>
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	20000568 	.word	0x20000568

080043cc <_isatty_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4d06      	ldr	r5, [pc, #24]	; (80043e8 <_isatty_r+0x1c>)
 80043d0:	2300      	movs	r3, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fc fc53 	bl	8000c82 <_isatty>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_isatty_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_isatty_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000568 	.word	0x20000568

080043ec <memcpy>:
 80043ec:	440a      	add	r2, r1
 80043ee:	4291      	cmp	r1, r2
 80043f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f4:	d100      	bne.n	80043f8 <memcpy+0xc>
 80043f6:	4770      	bx	lr
 80043f8:	b510      	push	{r4, lr}
 80043fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004402:	4291      	cmp	r1, r2
 8004404:	d1f9      	bne.n	80043fa <memcpy+0xe>
 8004406:	bd10      	pop	{r4, pc}

08004408 <__malloc_lock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_lock+0x8>)
 800440a:	f7fe bed5 	b.w	80031b8 <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	2000055c 	.word	0x2000055c

08004414 <__malloc_unlock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_unlock+0x8>)
 8004416:	f7fe bed0 	b.w	80031ba <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	2000055c 	.word	0x2000055c

08004420 <_realloc_r>:
 8004420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004424:	4680      	mov	r8, r0
 8004426:	4614      	mov	r4, r2
 8004428:	460e      	mov	r6, r1
 800442a:	b921      	cbnz	r1, 8004436 <_realloc_r+0x16>
 800442c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004430:	4611      	mov	r1, r2
 8004432:	f7fe bfa7 	b.w	8003384 <_malloc_r>
 8004436:	b92a      	cbnz	r2, 8004444 <_realloc_r+0x24>
 8004438:	f7fe ff38 	bl	80032ac <_free_r>
 800443c:	4625      	mov	r5, r4
 800443e:	4628      	mov	r0, r5
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004444:	f000 f81b 	bl	800447e <_malloc_usable_size_r>
 8004448:	4284      	cmp	r4, r0
 800444a:	4607      	mov	r7, r0
 800444c:	d802      	bhi.n	8004454 <_realloc_r+0x34>
 800444e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004452:	d812      	bhi.n	800447a <_realloc_r+0x5a>
 8004454:	4621      	mov	r1, r4
 8004456:	4640      	mov	r0, r8
 8004458:	f7fe ff94 	bl	8003384 <_malloc_r>
 800445c:	4605      	mov	r5, r0
 800445e:	2800      	cmp	r0, #0
 8004460:	d0ed      	beq.n	800443e <_realloc_r+0x1e>
 8004462:	42bc      	cmp	r4, r7
 8004464:	4622      	mov	r2, r4
 8004466:	4631      	mov	r1, r6
 8004468:	bf28      	it	cs
 800446a:	463a      	movcs	r2, r7
 800446c:	f7ff ffbe 	bl	80043ec <memcpy>
 8004470:	4631      	mov	r1, r6
 8004472:	4640      	mov	r0, r8
 8004474:	f7fe ff1a 	bl	80032ac <_free_r>
 8004478:	e7e1      	b.n	800443e <_realloc_r+0x1e>
 800447a:	4635      	mov	r5, r6
 800447c:	e7df      	b.n	800443e <_realloc_r+0x1e>

0800447e <_malloc_usable_size_r>:
 800447e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004482:	1f18      	subs	r0, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	bfbc      	itt	lt
 8004488:	580b      	ldrlt	r3, [r1, r0]
 800448a:	18c0      	addlt	r0, r0, r3
 800448c:	4770      	bx	lr
	...

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
