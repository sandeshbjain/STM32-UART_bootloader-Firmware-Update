
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da8  08003da8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000078  08003e28  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08003e28  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bf7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1c  00000000  00000000  00028c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016626  00000000  00000000  0002b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a02  00000000  00000000  00041bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008670d  00000000  00000000  0004b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1d0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002720  00000000  00000000  000d1d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b94 	.word	0x08003b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003b94 	.word	0x08003b94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a2e      	ldr	r2, [pc, #184]	; (800064c <GetSector+0xc8>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d806      	bhi.n	80005a6 <GetSector+0x22>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800059e:	d302      	bcc.n	80005a6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e04b      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a29      	ldr	r2, [pc, #164]	; (8000650 <GetSector+0xcc>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d806      	bhi.n	80005bc <GetSector+0x38>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <GetSector+0xd0>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d302      	bcc.n	80005bc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e040      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a26      	ldr	r2, [pc, #152]	; (8000658 <GetSector+0xd4>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d806      	bhi.n	80005d2 <GetSector+0x4e>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a25      	ldr	r2, [pc, #148]	; (800065c <GetSector+0xd8>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d302      	bcc.n	80005d2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e035      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <GetSector+0xdc>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d206      	bcs.n	80005e8 <GetSector+0x64>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <GetSector+0xe0>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d302      	bcc.n	80005e8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e02a      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <GetSector+0xe4>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d206      	bcs.n	80005fe <GetSector+0x7a>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <GetSector+0xdc>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d902      	bls.n	80005fe <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e01f      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <GetSector+0xe8>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d206      	bcs.n	8000614 <GetSector+0x90>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <GetSector+0xe4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d902      	bls.n	8000614 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800060e:	2305      	movs	r3, #5
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e014      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <GetSector+0xec>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d206      	bcs.n	800062a <GetSector+0xa6>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <GetSector+0xe8>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d902      	bls.n	800062a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000624:	2306      	movs	r3, #6
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e009      	b.n	800063e <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <GetSector+0xf0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d205      	bcs.n	800063e <GetSector+0xba>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <GetSector+0xec>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d901      	bls.n	800063e <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800063a:	2307      	movs	r3, #7
 800063c:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	08003ffe 	.word	0x08003ffe
 8000650:	08007ffe 	.word	0x08007ffe
 8000654:	08004000 	.word	0x08004000
 8000658:	0800bffe 	.word	0x0800bffe
 800065c:	08008000 	.word	0x08008000
 8000660:	0800ffff 	.word	0x0800ffff
 8000664:	0800c000 	.word	0x0800c000
 8000668:	0801ffff 	.word	0x0801ffff
 800066c:	0803ffff 	.word	0x0803ffff
 8000670:	0805ffff 	.word	0x0805ffff
 8000674:	0807ffff 	.word	0x0807ffff

08000678 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800068a:	f000 fdd9 	bl	8001240 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff ff78 	bl	8000584 <GetSector>
 8000694:	61b8      	str	r0, [r7, #24]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	617b      	str	r3, [r7, #20]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80006a2:	6978      	ldr	r0, [r7, #20]
 80006a4:	f7ff ff6e 	bl	8000584 <GetSector>
 80006a8:	6138      	str	r0, [r7, #16]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <Flash_Write_Data+0xa0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <Flash_Write_Data+0xa0>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <Flash_Write_Data+0xa0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	3301      	adds	r3, #1
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <Flash_Write_Data+0xa0>)
 80006c6:	60d3      	str	r3, [r2, #12]
	  //}

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 80006c8:	e01b      	b.n	8000702 <Flash_Write_Data+0x8a>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	4413      	add	r3, r2
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2200      	movs	r2, #0
 80006d6:	461c      	mov	r4, r3
 80006d8:	4615      	mov	r5, r2
 80006da:	4622      	mov	r2, r4
 80006dc:	462b      	mov	r3, r5
 80006de:	68f9      	ldr	r1, [r7, #12]
 80006e0:	2002      	movs	r0, #2
 80006e2:	f000 fd59 	bl	8001198 <HAL_FLASH_Program>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d106      	bne.n	80006fa <Flash_Write_Data+0x82>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3304      	adds	r3, #4
 80006f0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3301      	adds	r3, #1
 80006f6:	61fb      	str	r3, [r7, #28]
 80006f8:	e003      	b.n	8000702 <Flash_Write_Data+0x8a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80006fa:	f000 fdd3 	bl	80012a4 <HAL_FLASH_GetError>
 80006fe:	4603      	mov	r3, r0
 8000700:	e006      	b.n	8000710 <Flash_Write_Data+0x98>
	   while (sofar<numberofwords)
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	69fa      	ldr	r2, [r7, #28]
 8000706:	429a      	cmp	r2, r3
 8000708:	dbdf      	blt.n	80006ca <Flash_Write_Data+0x52>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800070a:	f000 fdbb 	bl	8001284 <HAL_FLASH_Lock>

	   return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bdb0      	pop	{r4, r5, r7, pc}
 8000718:	20000094 	.word	0x20000094

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fbbd 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f8af 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 f96d 	bl	8000a08 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800072e:	f000 f917 	bl	8000960 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000732:	f000 f93f 	bl	80009b4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("*****Bootloader Started*****\r\n");
 8000736:	4841      	ldr	r0, [pc, #260]	; (800083c <main+0x120>)
 8000738:	f002 fa84 	bl	8002c44 <puts>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //turn on led
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	483f      	ldr	r0, [pc, #252]	; (8000840 <main+0x124>)
 8000742:	f001 f897 	bl	8001874 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074a:	f000 fc1b 	bl	8000f84 <HAL_Delay>
  char pdat[] = "UART data received sandesh \n";
 800074e:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <main+0x128>)
 8000750:	1d3c      	adds	r4, r7, #4
 8000752:	461d      	mov	r5, r3
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000758:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800075c:	c407      	stmia	r4!, {r0, r1, r2}
 800075e:	7023      	strb	r3, [r4, #0]


  status_of_GPIO = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000764:	4838      	ldr	r0, [pc, #224]	; (8000848 <main+0x12c>)
 8000766:	f001 f86d 	bl	8001844 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <main+0x130>)
 8000770:	701a      	strb	r2, [r3, #0]
  if(status_of_GPIO == GPIO_PIN_RESET){
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <main+0x130>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d14e      	bne.n	8000818 <main+0xfc>


	  HAL_UART_Receive(&huart6, (uint8_t*)temp, (uint16_t)sizeof("START"), 15000);
 800077a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800077e:	2206      	movs	r2, #6
 8000780:	4933      	ldr	r1, [pc, #204]	; (8000850 <main+0x134>)
 8000782:	4834      	ldr	r0, [pc, #208]	; (8000854 <main+0x138>)
 8000784:	f001 fe21 	bl	80023ca <HAL_UART_Receive>
	  printf("Received data : %s \r \n", temp);
 8000788:	4931      	ldr	r1, [pc, #196]	; (8000850 <main+0x134>)
 800078a:	4833      	ldr	r0, [pc, #204]	; (8000858 <main+0x13c>)
 800078c:	f002 f9d4 	bl	8002b38 <iprintf>
	  if (strncmp((char *)temp, "START", 5) == 0){
 8000790:	2205      	movs	r2, #5
 8000792:	4932      	ldr	r1, [pc, #200]	; (800085c <main+0x140>)
 8000794:	482e      	ldr	r0, [pc, #184]	; (8000850 <main+0x134>)
 8000796:	f002 fa5d 	bl	8002c54 <strncmp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d103      	bne.n	80007a8 <main+0x8c>
		  printf("*******Received Start Bit for Firmware Update****** \r \n");
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <main+0x144>)
 80007a2:	f002 fa4f 	bl	8002c44 <puts>
 80007a6:	e007      	b.n	80007b8 <main+0x9c>

	  }
	  else{
		  printf("*******Bad data****** \r \n");
 80007a8:	482e      	ldr	r0, [pc, #184]	; (8000864 <main+0x148>)
 80007aa:	f002 fa4b 	bl	8002c44 <puts>
		  printf("Received data : %s \r \n", temp);
 80007ae:	4928      	ldr	r1, [pc, #160]	; (8000850 <main+0x134>)
 80007b0:	4829      	ldr	r0, [pc, #164]	; (8000858 <main+0x13c>)
 80007b2:	f002 f9c1 	bl	8002b38 <iprintf>
		  goto run_bootloader_while_loop;
 80007b6:	e034      	b.n	8000822 <main+0x106>
	  }

	  while(1){
		  HAL_UART_Receive(&huart6, (uint8_t*)pdata, (uint16_t)sizeof(pdata), 15000);
 80007b8:	f643 2398 	movw	r3, #15000	; 0x3a98
 80007bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c0:	4929      	ldr	r1, [pc, #164]	; (8000868 <main+0x14c>)
 80007c2:	4824      	ldr	r0, [pc, #144]	; (8000854 <main+0x138>)
 80007c4:	f001 fe01 	bl	80023ca <HAL_UART_Receive>
		  if (strstr((char*)pdata, "STOP") != NULL) {
 80007c8:	4928      	ldr	r1, [pc, #160]	; (800086c <main+0x150>)
 80007ca:	4827      	ldr	r0, [pc, #156]	; (8000868 <main+0x14c>)
 80007cc:	f002 fa56 	bl	8002c7c <strstr>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d007      	beq.n	80007e6 <main+0xca>
			  printf("Firmware Updated");
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <main+0x154>)
 80007d8:	f002 f9ae 	bl	8002b38 <iprintf>
			  break;
 80007dc:	bf00      	nop
			  Flash_Write_Data((uint32_t)(update_firmware_address), pdata, sizeof(pdata));
			  update_firmware_address=update_firmware_address+1024;
			  HAL_UART_Transmit(&huart6,(uint8_t *) "OK", sizeof("OK"), 15000);
		  }
	  }
	  HAL_Delay(100);
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f000 fbd0 	bl	8000f84 <HAL_Delay>
 80007e4:	e018      	b.n	8000818 <main+0xfc>
			  printf("Packet Received");
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <main+0x158>)
 80007e8:	f002 f9a6 	bl	8002b38 <iprintf>
			  Flash_Write_Data((uint32_t)(update_firmware_address), pdata, sizeof(pdata));
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <main+0x15c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f4:	491c      	ldr	r1, [pc, #112]	; (8000868 <main+0x14c>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff3e 	bl	8000678 <Flash_Write_Data>
			  update_firmware_address=update_firmware_address+1024;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <main+0x15c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <main+0x15c>)
 8000806:	6013      	str	r3, [r2, #0]
			  HAL_UART_Transmit(&huart6,(uint8_t *) "OK", sizeof("OK"), 15000);
 8000808:	f643 2398 	movw	r3, #15000	; 0x3a98
 800080c:	2203      	movs	r2, #3
 800080e:	491b      	ldr	r1, [pc, #108]	; (800087c <main+0x160>)
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <main+0x138>)
 8000812:	f001 fd48 	bl	80022a6 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart6, (uint8_t*)pdata, (uint16_t)sizeof(pdata), 15000);
 8000816:	e7cf      	b.n	80007b8 <main+0x9c>
  //run_application();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void (*firmware_update_applicaiton)(void) = (void*)(*(volatile uint32_t*)(0X08060000+4));
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <main+0x164>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  firmware_update_applicaiton();
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	4798      	blx	r3
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart6, (uint8_t*)pdat , sizeof(pdat), 1000);
	  printf("*****Inside Bootloader While Loop*****\r\n");
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <main+0x168>)
 8000824:	f002 fa0e 	bl	8002c44 <puts>
	  HAL_Delay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f000 fbaa 	bl	8000f84 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000830:	2120      	movs	r1, #32
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <main+0x124>)
 8000834:	f001 f837 	bl	80018a6 <HAL_GPIO_TogglePin>
	  printf("*****Inside Bootloader While Loop*****\r\n");
 8000838:	e7f3      	b.n	8000822 <main+0x106>
 800083a:	bf00      	nop
 800083c:	08003be4 	.word	0x08003be4
 8000840:	40020000 	.word	0x40020000
 8000844:	08003cd0 	.word	0x08003cd0
 8000848:	40020800 	.word	0x40020800
 800084c:	20000000 	.word	0x20000000
 8000850:	200004a8 	.word	0x200004a8
 8000854:	200004f4 	.word	0x200004f4
 8000858:	08003c04 	.word	0x08003c04
 800085c:	08003c1c 	.word	0x08003c1c
 8000860:	08003c24 	.word	0x08003c24
 8000864:	08003c5c 	.word	0x08003c5c
 8000868:	200000a8 	.word	0x200000a8
 800086c:	08003c78 	.word	0x08003c78
 8000870:	08003c80 	.word	0x08003c80
 8000874:	08003c94 	.word	0x08003c94
 8000878:	20000004 	.word	0x20000004
 800087c:	08003ca4 	.word	0x08003ca4
 8000880:	08060004 	.word	0x08060004
 8000884:	08003ca8 	.word	0x08003ca8

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f002 f946 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <SystemClock_Config+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a28      	ldr	r2, [pc, #160]	; (8000958 <SystemClock_Config+0xd0>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <SystemClock_Config+0xd0>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <SystemClock_Config+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <SystemClock_Config+0xd4>)
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <SystemClock_Config+0xd4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2310      	movs	r3, #16
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008fc:	2310      	movs	r3, #16
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000900:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000906:	2304      	movs	r3, #4
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800090a:	2307      	movs	r3, #7
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	4618      	mov	r0, r3
 8000914:	f000 ffe2 	bl	80018dc <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800091e:	f000 f8e1 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2302      	movs	r3, #2
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2102      	movs	r1, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fa44 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800094a:	f000 f8cb 	bl	8000ae4 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	; 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART1_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART1_UART_Init+0x4c>)
 8000998:	f001 fc38 	bl	800220c <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f89f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200004b0 	.word	0x200004b0
 80009b0:	40011000 	.word	0x40011000

080009b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART6_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART6_UART_Init+0x4c>)
 80009ec:	f001 fc0e 	bl	800220c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f875 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200004f4 	.word	0x200004f4
 8000a04:	40011400 	.word	0x40011400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2c      	ldr	r2, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000a94:	f000 feee 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0xd8>)
 8000aae:	f000 fd45 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000aca:	f000 fd37 	bl	800153c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fafe 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <HAL_UART_MspInit+0xe8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12d      	bne.n	8000bbe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bac:	2307      	movs	r3, #7
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481e      	ldr	r0, [pc, #120]	; (8000c30 <HAL_UART_MspInit+0xf0>)
 8000bb8:	f000 fcc0 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000bbc:	e030      	b.n	8000c20 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0xf4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d12b      	bne.n	8000c20 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bdc:	f003 0320 	and.w	r3, r3, #32
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_UART_MspInit+0xec>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c00:	23c0      	movs	r3, #192	; 0xc0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c10:	2308      	movs	r3, #8
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <HAL_UART_MspInit+0xf8>)
 8000c1c:	f000 fc8e 	bl	800153c <HAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40011400 	.word	0x40011400
 8000c38:	40020800 	.word	0x40020800

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f95c 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <ITM_SendChar+0x48>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <ITM_SendChar+0x48>)
 8000ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ca4:	6013      	str	r3, [r2, #0]

    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <ITM_SendChar+0x4c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <ITM_SendChar+0x4c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6013      	str	r3, [r2, #0]

    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 8000cb2:	bf00      	nop
 8000cb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f8      	beq.n	8000cb4 <ITM_SendChar+0x24>

    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;
 8000cc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	6013      	str	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000edfc 	.word	0xe000edfc
 8000cdc:	e0000e00 	.word	0xe0000e00

08000ce0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e00a      	b.n	8000d08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf2:	f3af 8000 	nop.w
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <_read+0x12>
  }

  return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e009      	b.n	8000d40 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffab 	bl	8000c90 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf1      	blt.n	8000d2c <_write+0x12>
  }
  return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_close>:

int _close(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_isatty>:

int _isatty(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f001 fe72 	bl	8002ad4 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20018000 	.word	0x20018000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	20000538 	.word	0x20000538
 8000e24:	20000570 	.word	0x20000570

08000e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e68:	4c0b      	ldr	r4, [pc, #44]	; (8000e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e76:	f7ff ffd7 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f001 fe31 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fc4d 	bl	800071c <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e90:	08003db0 	.word	0x08003db0
  ldr r2, =_sbss
 8000e94:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e98:	20000570 	.word	0x20000570

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_Init+0x40>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_Init+0x40>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x40>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f931 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fe0c 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f93b 	bl	800117e <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f911 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	2000000c 	.word	0x2000000c

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000010 	.word	0x20000010
 8000f68:	2000053c 	.word	0x2000053c

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000053c 	.word	0x2000053c

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000010 	.word	0x20000010

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff47 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5c 	bl	8001014 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb0 	bl	80010ec <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_FLASH_Program+0xa0>)
 80011ac:	7e1b      	ldrb	r3, [r3, #24]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_FLASH_Program+0x1e>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e03b      	b.n	800122e <HAL_FLASH_Program+0x96>
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_FLASH_Program+0xa0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011c0:	f000 f87c 	bl	80012bc <FLASH_WaitForLastOperation>
 80011c4:	4603      	mov	r3, r0
 80011c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12b      	bne.n	8001226 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80011d4:	783b      	ldrb	r3, [r7, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f000 f927 	bl	800142c <FLASH_Program_Byte>
 80011de:	e016      	b.n	800120e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d105      	bne.n	80011f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80011e6:	883b      	ldrh	r3, [r7, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	68b8      	ldr	r0, [r7, #8]
 80011ec:	f000 f8fa 	bl	80013e4 <FLASH_Program_HalfWord>
 80011f0:	e00d      	b.n	800120e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d105      	bne.n	8001204 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f000 f8cf 	bl	80013a0 <FLASH_Program_Word>
 8001202:	e004      	b.n	800120e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f000 f897 	bl	800133c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800120e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001212:	f000 f853 	bl	80012bc <FLASH_WaitForLastOperation>
 8001216:	4603      	mov	r3, r0
 8001218:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_FLASH_Program+0xa4>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_FLASH_Program+0xa4>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_FLASH_Program+0xa0>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000540 	.word	0x20000540
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_FLASH_Unlock+0x38>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	da0b      	bge.n	800126a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_FLASH_Unlock+0x38>)
 8001254:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_FLASH_Unlock+0x3c>)
 8001256:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_FLASH_Unlock+0x38>)
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_FLASH_Unlock+0x40>)
 800125c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_FLASH_Unlock+0x38>)
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da01      	bge.n	800126a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800126a:	79fb      	ldrb	r3, [r7, #7]
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40023c00 	.word	0x40023c00
 800127c:	45670123 	.word	0x45670123
 8001280:	cdef89ab 	.word	0xcdef89ab

08001284 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_FLASH_Lock+0x1c>)
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_FLASH_Lock+0x1c>)
 800128e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001292:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_FLASH_GetError+0x14>)
 80012aa:	69db      	ldr	r3, [r3, #28]
}  
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000540 	.word	0x20000540

080012bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <FLASH_WaitForLastOperation+0x78>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80012ce:	f7ff fe4d 	bl	8000f6c <HAL_GetTick>
 80012d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80012d4:	e010      	b.n	80012f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d00c      	beq.n	80012f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <FLASH_WaitForLastOperation+0x38>
 80012e4:	f7ff fe42 	bl	8000f6c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d201      	bcs.n	80012f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e019      	b.n	800132c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <FLASH_WaitForLastOperation+0x7c>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e8      	bne.n	80012d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <FLASH_WaitForLastOperation+0x7c>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <FLASH_WaitForLastOperation+0x7c>)
 8001312:	2201      	movs	r2, #1
 8001314:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <FLASH_WaitForLastOperation+0x7c>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001322:	f000 f8a5 	bl	8001470 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
  
}  
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000540 	.word	0x20000540
 8001338:	40023c00 	.word	0x40023c00

0800133c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <FLASH_Program_DoubleWord+0x60>)
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <FLASH_Program_DoubleWord+0x60>)
 800134e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001352:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <FLASH_Program_DoubleWord+0x60>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <FLASH_Program_DoubleWord+0x60>)
 800135a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800135e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <FLASH_Program_DoubleWord+0x60>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <FLASH_Program_DoubleWord+0x60>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001372:	f3bf 8f6f 	isb	sy
}
 8001376:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	000a      	movs	r2, r1
 8001386:	2300      	movs	r3, #0
 8001388:	68f9      	ldr	r1, [r7, #12]
 800138a:	3104      	adds	r1, #4
 800138c:	4613      	mov	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40023c00 	.word	0x40023c00

080013a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <FLASH_Program_Word+0x40>)
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <FLASH_Program_Word+0x40>)
 80013b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <FLASH_Program_Word+0x40>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <FLASH_Program_Word+0x40>)
 80013bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <FLASH_Program_Word+0x40>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <FLASH_Program_Word+0x40>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <FLASH_Program_HalfWord+0x44>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <FLASH_Program_HalfWord+0x44>)
 80013f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <FLASH_Program_HalfWord+0x44>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a09      	ldr	r2, [pc, #36]	; (8001428 <FLASH_Program_HalfWord+0x44>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <FLASH_Program_HalfWord+0x44>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <FLASH_Program_HalfWord+0x44>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	801a      	strh	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00

0800142c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <FLASH_Program_Byte+0x40>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <FLASH_Program_Byte+0x40>)
 800143e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <FLASH_Program_Byte+0x40>)
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <FLASH_Program_Byte+0x40>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <FLASH_Program_Byte+0x40>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <FLASH_Program_Byte+0x40>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 800148a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 800148e:	2210      	movs	r2, #16
 8001490:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 8001502:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 8001506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <FLASH_SetErrorCode+0xc8>)
 8001522:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <FLASH_SetErrorCode+0xc4>)
 8001526:	2202      	movs	r2, #2
 8001528:	60da      	str	r2, [r3, #12]
  }
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40023c00 	.word	0x40023c00
 8001538:	20000540 	.word	0x20000540

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e159      	b.n	800180c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8148 	bne.w	8001806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80a2 	beq.w	8001806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b57      	ldr	r3, [pc, #348]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a56      	ldr	r2, [pc, #344]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_GPIO_Init+0x2ec>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a49      	ldr	r2, [pc, #292]	; (800182c <HAL_GPIO_Init+0x2f0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x202>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_GPIO_Init+0x2f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x1fe>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a47      	ldr	r2, [pc, #284]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x1fa>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a46      	ldr	r2, [pc, #280]	; (8001838 <HAL_GPIO_Init+0x2fc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a45      	ldr	r2, [pc, #276]	; (800183c <HAL_GPIO_Init+0x300>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x1f2>
 800172a:	2304      	movs	r3, #4
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800172e:	2307      	movs	r3, #7
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x204>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x204>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800173e:	2300      	movs	r3, #0
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	; (8001828 <HAL_GPIO_Init+0x2ec>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001782:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_GPIO_Init+0x304>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ac:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d6:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	f67f aea2 	bls.w	8001558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40013800 	.word	0x40013800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b8:	887a      	ldrh	r2, [r7, #2]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	400b      	ands	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e267      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d075      	beq.n	80019e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d00c      	beq.n	8001920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190e:	2b08      	cmp	r3, #8
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001912:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800191e:	d10b      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d05b      	beq.n	80019e4 <HAL_RCC_OscConfig+0x108>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d157      	bne.n	80019e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e242      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x74>
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xb0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a6f      	ldr	r2, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xb0>
 8001974:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a68      	ldr	r2, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a65      	ldr	r2, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff faea 	bl	8000f6c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fae6 	bl	8000f6c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e207      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xc0>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fad6 	bl	8000f6c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fad2 	bl	8000f6c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1f3      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0xe8>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d11c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x152>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1c7      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x244>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa8b 	bl	8000f6c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fa87 	bl	8000f6c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1a8      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4925      	ldr	r1, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x244>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fa6a 	bl	8000f6c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fa66 	bl	8000f6c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e187      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d036      	beq.n	8001b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_RCC_OscConfig+0x248>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa4a 	bl	8000f6c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fa46 	bl	8000f6c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e167      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x240>)
 8001af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x200>
 8001afa:	e01b      	b.n	8001b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa33 	bl	8000f6c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	e00e      	b.n	8001b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fa2f 	bl	8000f6c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d907      	bls.n	8001b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e150      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	42470000 	.word	0x42470000
 8001b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ea      	bne.n	8001b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8097 	beq.w	8001c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b77      	ldr	r3, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a73      	ldr	r2, [pc, #460]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f9ef 	bl	8000f6c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff f9eb 	bl	8000f6c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e10c      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x474>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2ea>
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a63      	ldr	r2, [pc, #396]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x324>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x30c>
 8001bce:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a5e      	ldr	r2, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0x324>
 8001be8:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a54      	ldr	r2, [pc, #336]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001bfa:	f023 0304 	bic.w	r3, r3, #4
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d015      	beq.n	8001c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff f9b0 	bl	8000f6c <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7ff f9ac 	bl	8000f6c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0cb      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0ee      	beq.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f99a 	bl	8000f6c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f996 	bl	8000f6c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0b5      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ee      	bne.n	8001c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a1 	beq.w	8001dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d05c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d141      	bne.n	8001d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f96a 	bl	8000f6c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f966 	bl	8000f6c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e087      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff f93f 	bl	8000f6c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f93b 	bl	8000f6c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e05c      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x416>
 8001d10:	e054      	b.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f928 	bl	8000f6c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f924 	bl	8000f6c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e045      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
 8001d3e:	e03d      	b.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e038      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4ec>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d028      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d121      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cc      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d90c      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d044      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e067      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4934      	ldr	r1, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff f856 	bl	8000f6c <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7ff f852 	bl	8000f6c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e04f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20c      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4602      	mov	r2, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	490a      	ldr	r1, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	5ccb      	ldrb	r3, [r1, r3]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffb6 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08003cf0 	.word	0x08003cf0
 8001f90:	20000008 	.word	0x20000008
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f9c:	b094      	sub	sp, #80	; 0x50
 8001f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fa8:	2300      	movs	r3, #0
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb0:	4b79      	ldr	r3, [pc, #484]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d00d      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	f200 80e1 	bhi.w	8002184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x34>
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fca:	e0db      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_GetSysClockFreq+0x204>)
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fd0:	e0db      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd2:	4b73      	ldr	r3, [pc, #460]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd6:	e0d8      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe2:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d063      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fee:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
 8002006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800200a:	4622      	mov	r2, r4
 800200c:	462b      	mov	r3, r5
 800200e:	f04f 0000 	mov.w	r0, #0
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	0159      	lsls	r1, r3, #5
 8002018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201c:	0150      	lsls	r0, r2, #5
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4621      	mov	r1, r4
 8002024:	1a51      	subs	r1, r2, r1
 8002026:	6139      	str	r1, [r7, #16]
 8002028:	4629      	mov	r1, r5
 800202a:	eb63 0301 	sbc.w	r3, r3, r1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800203c:	4659      	mov	r1, fp
 800203e:	018b      	lsls	r3, r1, #6
 8002040:	4651      	mov	r1, sl
 8002042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002046:	4651      	mov	r1, sl
 8002048:	018a      	lsls	r2, r1, #6
 800204a:	4651      	mov	r1, sl
 800204c:	ebb2 0801 	subs.w	r8, r2, r1
 8002050:	4659      	mov	r1, fp
 8002052:	eb63 0901 	sbc.w	r9, r3, r1
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800206a:	4690      	mov	r8, r2
 800206c:	4699      	mov	r9, r3
 800206e:	4623      	mov	r3, r4
 8002070:	eb18 0303 	adds.w	r3, r8, r3
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	462b      	mov	r3, r5
 8002078:	eb49 0303 	adc.w	r3, r9, r3
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800208a:	4629      	mov	r1, r5
 800208c:	024b      	lsls	r3, r1, #9
 800208e:	4621      	mov	r1, r4
 8002090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002094:	4621      	mov	r1, r4
 8002096:	024a      	lsls	r2, r1, #9
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	2200      	movs	r2, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020a8:	f7fe f8ea 	bl	8000280 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4613      	mov	r3, r2
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b4:	e058      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	2200      	movs	r2, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	4611      	mov	r1, r2
 80020c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	f04f 0000 	mov.w	r0, #0
 80020d8:	f04f 0100 	mov.w	r1, #0
 80020dc:	0159      	lsls	r1, r3, #5
 80020de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e2:	0150      	lsls	r0, r2, #5
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4641      	mov	r1, r8
 80020ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ee:	4649      	mov	r1, r9
 80020f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002108:	ebb2 040a 	subs.w	r4, r2, sl
 800210c:	eb63 050b 	sbc.w	r5, r3, fp
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	00eb      	lsls	r3, r5, #3
 800211a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800211e:	00e2      	lsls	r2, r4, #3
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	4643      	mov	r3, r8
 8002126:	18e3      	adds	r3, r4, r3
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	464b      	mov	r3, r9
 800212c:	eb45 0303 	adc.w	r3, r5, r3
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213e:	4629      	mov	r1, r5
 8002140:	028b      	lsls	r3, r1, #10
 8002142:	4621      	mov	r1, r4
 8002144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002148:	4621      	mov	r1, r4
 800214a:	028a      	lsls	r2, r1, #10
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002152:	2200      	movs	r2, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	61fa      	str	r2, [r7, #28]
 8002158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215c:	f7fe f890 	bl	8000280 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_GetSysClockFreq+0x200>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800217a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetSysClockFreq+0x204>)
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800218c:	4618      	mov	r0, r3
 800218e:	3750      	adds	r7, #80	; 0x50
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	007a1200 	.word	0x007a1200

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c0:	f7ff fff0 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0a9b      	lsrs	r3, r3, #10
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08003d00 	.word	0x08003d00

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e8:	f7ff ffdc 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0b5b      	lsrs	r3, r3, #13
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	08003d00 	.word	0x08003d00

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e03f      	b.n	800229e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fc84 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f9cb 	bl	80025ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08a      	sub	sp, #40	; 0x28
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d17c      	bne.n	80023c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_UART_Transmit+0x2c>
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e075      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_UART_Transmit+0x3e>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e06e      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2221      	movs	r2, #33	; 0x21
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022fa:	f7fe fe37 	bl	8000f6c <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002314:	d108      	bne.n	8002328 <HAL_UART_Transmit+0x82>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e003      	b.n	8002330 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002338:	e02a      	b.n	8002390 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f8e2 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e036      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3302      	adds	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e007      	b.n	8002382 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1cf      	bne.n	800233a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f8b2 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e006      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08a      	sub	sp, #40	; 0x28
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 808c 	bne.w	8002504 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_UART_Receive+0x2e>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e084      	b.n	8002506 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_UART_Receive+0x40>
 8002406:	2302      	movs	r3, #2
 8002408:	e07d      	b.n	8002506 <HAL_UART_Receive+0x13c>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2222      	movs	r2, #34	; 0x22
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002426:	f7fe fda1 	bl	8000f6c <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d108      	bne.n	8002454 <HAL_UART_Receive+0x8a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e003      	b.n	800245c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002464:	e043      	b.n	80024ee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	2120      	movs	r1, #32
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f84c 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e042      	b.n	8002506 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002492:	b29a      	uxth	r2, r3
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3302      	adds	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	e01f      	b.n	80024e0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d007      	beq.n	80024ba <HAL_UART_Receive+0xf0>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_UART_Receive+0xfe>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e008      	b.n	80024da <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1b6      	bne.n	8002466 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b090      	sub	sp, #64	; 0x40
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4613      	mov	r3, r2
 800251c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800251e:	e050      	b.n	80025c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d04c      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <UART_WaitOnFlagUntilTimeout+0x30>
 800252e:	f7fe fd1d 	bl	8000f6c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800253a:	429a      	cmp	r2, r3
 800253c:	d241      	bcs.n	80025c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800255e:	637a      	str	r2, [r7, #52]	; 0x34
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e5      	bne.n	800253e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	e853 3f00 	ldrex	r3, [r3]
 8002580:	613b      	str	r3, [r7, #16]
   return(result);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3314      	adds	r3, #20
 8002590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002592:	623a      	str	r2, [r7, #32]
 8002594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	69f9      	ldr	r1, [r7, #28]
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	61bb      	str	r3, [r7, #24]
   return(result);
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e00f      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d09f      	beq.n	8002520 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3740      	adds	r7, #64	; 0x40
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f0:	b0c0      	sub	sp, #256	; 0x100
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	ea40 0301 	orr.w	r3, r0, r1
 8002614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002644:	f021 010c 	bic.w	r1, r1, #12
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002652:	430b      	orrs	r3, r1
 8002654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002666:	6999      	ldr	r1, [r3, #24]
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	ea40 0301 	orr.w	r3, r0, r1
 8002672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <UART_SetConfig+0x2cc>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d005      	beq.n	800268c <UART_SetConfig+0xa0>
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <UART_SetConfig+0x2d0>)
 8002688:	429a      	cmp	r2, r3
 800268a:	d104      	bne.n	8002696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800268c:	f7ff fdaa 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002690:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002694:	e003      	b.n	800269e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002696:	f7ff fd91 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 800269a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a8:	f040 810c 	bne.w	80028c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026be:	4622      	mov	r2, r4
 80026c0:	462b      	mov	r3, r5
 80026c2:	1891      	adds	r1, r2, r2
 80026c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80026c6:	415b      	adcs	r3, r3
 80026c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026ce:	4621      	mov	r1, r4
 80026d0:	eb12 0801 	adds.w	r8, r2, r1
 80026d4:	4629      	mov	r1, r5
 80026d6:	eb43 0901 	adc.w	r9, r3, r1
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	eb18 0303 	adds.w	r3, r8, r3
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026fc:	462b      	mov	r3, r5
 80026fe:	eb49 0303 	adc.w	r3, r9, r3
 8002702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002712:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800271a:	460b      	mov	r3, r1
 800271c:	18db      	adds	r3, r3, r3
 800271e:	653b      	str	r3, [r7, #80]	; 0x50
 8002720:	4613      	mov	r3, r2
 8002722:	eb42 0303 	adc.w	r3, r2, r3
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
 8002728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800272c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002730:	f7fd fda6 	bl	8000280 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <UART_SetConfig+0x2d4>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	011c      	lsls	r4, r3, #4
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800274c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	64b9      	str	r1, [r7, #72]	; 0x48
 800275c:	415b      	adcs	r3, r3
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002764:	4641      	mov	r1, r8
 8002766:	eb12 0a01 	adds.w	sl, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb43 0b01 	adc.w	fp, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800277c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002784:	4692      	mov	sl, r2
 8002786:	469b      	mov	fp, r3
 8002788:	4643      	mov	r3, r8
 800278a:	eb1a 0303 	adds.w	r3, sl, r3
 800278e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002792:	464b      	mov	r3, r9
 8002794:	eb4b 0303 	adc.w	r3, fp, r3
 8002798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027b0:	460b      	mov	r3, r1
 80027b2:	18db      	adds	r3, r3, r3
 80027b4:	643b      	str	r3, [r7, #64]	; 0x40
 80027b6:	4613      	mov	r3, r2
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
 80027be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027c6:	f7fd fd5b 	bl	8000280 <__aeabi_uldivmod>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <UART_SetConfig+0x2d4>)
 80027d2:	fba3 2301 	umull	r2, r3, r3, r1
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2264      	movs	r2, #100	; 0x64
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <UART_SetConfig+0x2d4>)
 80027e8:	fba3 2302 	umull	r2, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f4:	441c      	add	r4, r3
 80027f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002800:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002810:	415b      	adcs	r3, r3
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6339      	str	r1, [r7, #48]	; 0x30
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800284c:	464b      	mov	r3, r9
 800284e:	460a      	mov	r2, r1
 8002850:	eb42 0303 	adc.w	r3, r2, r3
 8002854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002864:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800286c:	460b      	mov	r3, r1
 800286e:	18db      	adds	r3, r3, r3
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	4613      	mov	r3, r2
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800287e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002882:	f7fd fcfd 	bl	8000280 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <UART_SetConfig+0x2d4>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <UART_SetConfig+0x2d4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4422      	add	r2, r4
 80028b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028b4:	e105      	b.n	8002ac2 <UART_SetConfig+0x4d6>
 80028b6:	bf00      	nop
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028d6:	4642      	mov	r2, r8
 80028d8:	464b      	mov	r3, r9
 80028da:	1891      	adds	r1, r2, r2
 80028dc:	6239      	str	r1, [r7, #32]
 80028de:	415b      	adcs	r3, r3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028e6:	4641      	mov	r1, r8
 80028e8:	1854      	adds	r4, r2, r1
 80028ea:	4649      	mov	r1, r9
 80028ec:	eb43 0501 	adc.w	r5, r3, r1
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	00eb      	lsls	r3, r5, #3
 80028fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fe:	00e2      	lsls	r2, r4, #3
 8002900:	4614      	mov	r4, r2
 8002902:	461d      	mov	r5, r3
 8002904:	4643      	mov	r3, r8
 8002906:	18e3      	adds	r3, r4, r3
 8002908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800290c:	464b      	mov	r3, r9
 800290e:	eb45 0303 	adc.w	r3, r5, r3
 8002912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002932:	4629      	mov	r1, r5
 8002934:	008b      	lsls	r3, r1, #2
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293c:	4621      	mov	r1, r4
 800293e:	008a      	lsls	r2, r1, #2
 8002940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002944:	f7fd fc9c 	bl	8000280 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4b60      	ldr	r3, [pc, #384]	; (8002ad0 <UART_SetConfig+0x4e4>)
 800294e:	fba3 2302 	umull	r2, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	011c      	lsls	r4, r3, #4
 8002956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	1891      	adds	r1, r2, r2
 800296e:	61b9      	str	r1, [r7, #24]
 8002970:	415b      	adcs	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002978:	4641      	mov	r1, r8
 800297a:	1851      	adds	r1, r2, r1
 800297c:	6139      	str	r1, [r7, #16]
 800297e:	4649      	mov	r1, r9
 8002980:	414b      	adcs	r3, r1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002990:	4659      	mov	r1, fp
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299a:	4651      	mov	r1, sl
 800299c:	00ca      	lsls	r2, r1, #3
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	4642      	mov	r2, r8
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029ac:	464b      	mov	r3, r9
 80029ae:	460a      	mov	r2, r1
 80029b0:	eb42 0303 	adc.w	r3, r2, r3
 80029b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80029c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029d0:	4649      	mov	r1, r9
 80029d2:	008b      	lsls	r3, r1, #2
 80029d4:	4641      	mov	r1, r8
 80029d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029da:	4641      	mov	r1, r8
 80029dc:	008a      	lsls	r2, r1, #2
 80029de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029e2:	f7fd fc4d 	bl	8000280 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <UART_SetConfig+0x4e4>)
 80029ec:	fba3 1302 	umull	r1, r3, r3, r2
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	2164      	movs	r1, #100	; 0x64
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	3332      	adds	r3, #50	; 0x32
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <UART_SetConfig+0x4e4>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0a:	441c      	add	r4, r3
 8002a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a10:	2200      	movs	r2, #0
 8002a12:	673b      	str	r3, [r7, #112]	; 0x70
 8002a14:	677a      	str	r2, [r7, #116]	; 0x74
 8002a16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	1891      	adds	r1, r2, r2
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	415b      	adcs	r3, r3
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2a:	4641      	mov	r1, r8
 8002a2c:	1851      	adds	r1, r2, r1
 8002a2e:	6039      	str	r1, [r7, #0]
 8002a30:	4649      	mov	r1, r9
 8002a32:	414b      	adcs	r3, r1
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a42:	4659      	mov	r1, fp
 8002a44:	00cb      	lsls	r3, r1, #3
 8002a46:	4651      	mov	r1, sl
 8002a48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	00ca      	lsls	r2, r1, #3
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	4603      	mov	r3, r0
 8002a56:	4642      	mov	r2, r8
 8002a58:	189b      	adds	r3, r3, r2
 8002a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a5c:	464b      	mov	r3, r9
 8002a5e:	460a      	mov	r2, r1
 8002a60:	eb42 0303 	adc.w	r3, r2, r3
 8002a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a70:	667a      	str	r2, [r7, #100]	; 0x64
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a7e:	4649      	mov	r1, r9
 8002a80:	008b      	lsls	r3, r1, #2
 8002a82:	4641      	mov	r1, r8
 8002a84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a88:	4641      	mov	r1, r8
 8002a8a:	008a      	lsls	r2, r1, #2
 8002a8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a90:	f7fd fbf6 	bl	8000280 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <UART_SetConfig+0x4e4>)
 8002a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2164      	movs	r1, #100	; 0x64
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	3332      	adds	r3, #50	; 0x32
 8002aac:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <UART_SetConfig+0x4e4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	f003 020f 	and.w	r2, r3, #15
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4422      	add	r2, r4
 8002ac0:	609a      	str	r2, [r3, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ace:	bf00      	nop
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000014 	.word	0x20000014

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	4d0d      	ldr	r5, [pc, #52]	; (8002b18 <__libc_init_array+0x38>)
 8002ae4:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	2600      	movs	r6, #0
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	4d0b      	ldr	r5, [pc, #44]	; (8002b20 <__libc_init_array+0x40>)
 8002af2:	4c0c      	ldr	r4, [pc, #48]	; (8002b24 <__libc_init_array+0x44>)
 8002af4:	f001 f84e 	bl	8003b94 <_init>
 8002af8:	1b64      	subs	r4, r4, r5
 8002afa:	10a4      	asrs	r4, r4, #2
 8002afc:	2600      	movs	r6, #0
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08003da8 	.word	0x08003da8
 8002b1c:	08003da8 	.word	0x08003da8
 8002b20:	08003da8 	.word	0x08003da8
 8002b24:	08003dac 	.word	0x08003dac

08002b28 <memset>:
 8002b28:	4402      	add	r2, r0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <iprintf>:
 8002b38:	b40f      	push	{r0, r1, r2, r3}
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <iprintf+0x2c>)
 8002b3c:	b513      	push	{r0, r1, r4, lr}
 8002b3e:	681c      	ldr	r4, [r3, #0]
 8002b40:	b124      	cbz	r4, 8002b4c <iprintf+0x14>
 8002b42:	69a3      	ldr	r3, [r4, #24]
 8002b44:	b913      	cbnz	r3, 8002b4c <iprintf+0x14>
 8002b46:	4620      	mov	r0, r4
 8002b48:	f000 fa88 	bl	800305c <__sinit>
 8002b4c:	ab05      	add	r3, sp, #20
 8002b4e:	9a04      	ldr	r2, [sp, #16]
 8002b50:	68a1      	ldr	r1, [r4, #8]
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	4620      	mov	r0, r4
 8002b56:	f000 fc91 	bl	800347c <_vfiprintf_r>
 8002b5a:	b002      	add	sp, #8
 8002b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b60:	b004      	add	sp, #16
 8002b62:	4770      	bx	lr
 8002b64:	20000014 	.word	0x20000014

08002b68 <_puts_r>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	460e      	mov	r6, r1
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	b118      	cbz	r0, 8002b78 <_puts_r+0x10>
 8002b70:	6983      	ldr	r3, [r0, #24]
 8002b72:	b90b      	cbnz	r3, 8002b78 <_puts_r+0x10>
 8002b74:	f000 fa72 	bl	800305c <__sinit>
 8002b78:	69ab      	ldr	r3, [r5, #24]
 8002b7a:	68ac      	ldr	r4, [r5, #8]
 8002b7c:	b913      	cbnz	r3, 8002b84 <_puts_r+0x1c>
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f000 fa6c 	bl	800305c <__sinit>
 8002b84:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <_puts_r+0xd0>)
 8002b86:	429c      	cmp	r4, r3
 8002b88:	d120      	bne.n	8002bcc <_puts_r+0x64>
 8002b8a:	686c      	ldr	r4, [r5, #4]
 8002b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b8e:	07db      	lsls	r3, r3, #31
 8002b90:	d405      	bmi.n	8002b9e <_puts_r+0x36>
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	0598      	lsls	r0, r3, #22
 8002b96:	d402      	bmi.n	8002b9e <_puts_r+0x36>
 8002b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b9a:	f000 fafd 	bl	8003198 <__retarget_lock_acquire_recursive>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	0719      	lsls	r1, r3, #28
 8002ba2:	d51d      	bpl.n	8002be0 <_puts_r+0x78>
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	b1db      	cbz	r3, 8002be0 <_puts_r+0x78>
 8002ba8:	3e01      	subs	r6, #1
 8002baa:	68a3      	ldr	r3, [r4, #8]
 8002bac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60a3      	str	r3, [r4, #8]
 8002bb4:	bb39      	cbnz	r1, 8002c06 <_puts_r+0x9e>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da38      	bge.n	8002c2c <_puts_r+0xc4>
 8002bba:	4622      	mov	r2, r4
 8002bbc:	210a      	movs	r1, #10
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f000 f872 	bl	8002ca8 <__swbuf_r>
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	d011      	beq.n	8002bec <_puts_r+0x84>
 8002bc8:	250a      	movs	r5, #10
 8002bca:	e011      	b.n	8002bf0 <_puts_r+0x88>
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <_puts_r+0xd4>)
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	d101      	bne.n	8002bd6 <_puts_r+0x6e>
 8002bd2:	68ac      	ldr	r4, [r5, #8]
 8002bd4:	e7da      	b.n	8002b8c <_puts_r+0x24>
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <_puts_r+0xd8>)
 8002bd8:	429c      	cmp	r4, r3
 8002bda:	bf08      	it	eq
 8002bdc:	68ec      	ldreq	r4, [r5, #12]
 8002bde:	e7d5      	b.n	8002b8c <_puts_r+0x24>
 8002be0:	4621      	mov	r1, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	f000 f8b2 	bl	8002d4c <__swsetup_r>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d0dd      	beq.n	8002ba8 <_puts_r+0x40>
 8002bec:	f04f 35ff 	mov.w	r5, #4294967295
 8002bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bf2:	07da      	lsls	r2, r3, #31
 8002bf4:	d405      	bmi.n	8002c02 <_puts_r+0x9a>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	059b      	lsls	r3, r3, #22
 8002bfa:	d402      	bmi.n	8002c02 <_puts_r+0x9a>
 8002bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bfe:	f000 facc 	bl	800319a <__retarget_lock_release_recursive>
 8002c02:	4628      	mov	r0, r5
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da04      	bge.n	8002c14 <_puts_r+0xac>
 8002c0a:	69a2      	ldr	r2, [r4, #24]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dc06      	bgt.n	8002c1e <_puts_r+0xb6>
 8002c10:	290a      	cmp	r1, #10
 8002c12:	d004      	beq.n	8002c1e <_puts_r+0xb6>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	6022      	str	r2, [r4, #0]
 8002c1a:	7019      	strb	r1, [r3, #0]
 8002c1c:	e7c5      	b.n	8002baa <_puts_r+0x42>
 8002c1e:	4622      	mov	r2, r4
 8002c20:	4628      	mov	r0, r5
 8002c22:	f000 f841 	bl	8002ca8 <__swbuf_r>
 8002c26:	3001      	adds	r0, #1
 8002c28:	d1bf      	bne.n	8002baa <_puts_r+0x42>
 8002c2a:	e7df      	b.n	8002bec <_puts_r+0x84>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	250a      	movs	r5, #10
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	6022      	str	r2, [r4, #0]
 8002c34:	701d      	strb	r5, [r3, #0]
 8002c36:	e7db      	b.n	8002bf0 <_puts_r+0x88>
 8002c38:	08003d2c 	.word	0x08003d2c
 8002c3c:	08003d4c 	.word	0x08003d4c
 8002c40:	08003d0c 	.word	0x08003d0c

08002c44 <puts>:
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <puts+0xc>)
 8002c46:	4601      	mov	r1, r0
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f7ff bf8d 	b.w	8002b68 <_puts_r>
 8002c4e:	bf00      	nop
 8002c50:	20000014 	.word	0x20000014

08002c54 <strncmp>:
 8002c54:	b510      	push	{r4, lr}
 8002c56:	b17a      	cbz	r2, 8002c78 <strncmp+0x24>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	3901      	subs	r1, #1
 8002c5c:	1884      	adds	r4, r0, r2
 8002c5e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002c62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002c66:	4290      	cmp	r0, r2
 8002c68:	d101      	bne.n	8002c6e <strncmp+0x1a>
 8002c6a:	42a3      	cmp	r3, r4
 8002c6c:	d101      	bne.n	8002c72 <strncmp+0x1e>
 8002c6e:	1a80      	subs	r0, r0, r2
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d1f3      	bne.n	8002c5e <strncmp+0xa>
 8002c76:	e7fa      	b.n	8002c6e <strncmp+0x1a>
 8002c78:	4610      	mov	r0, r2
 8002c7a:	e7f9      	b.n	8002c70 <strncmp+0x1c>

08002c7c <strstr>:
 8002c7c:	780a      	ldrb	r2, [r1, #0]
 8002c7e:	b570      	push	{r4, r5, r6, lr}
 8002c80:	b96a      	cbnz	r2, 8002c9e <strstr+0x22>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d109      	bne.n	8002c9c <strstr+0x20>
 8002c88:	460c      	mov	r4, r1
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f6      	beq.n	8002c82 <strstr+0x6>
 8002c94:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002c98:	429e      	cmp	r6, r3
 8002c9a:	d0f7      	beq.n	8002c8c <strstr+0x10>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	7803      	ldrb	r3, [r0, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ef      	bne.n	8002c84 <strstr+0x8>
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	e7ec      	b.n	8002c82 <strstr+0x6>

08002ca8 <__swbuf_r>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	460e      	mov	r6, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	4605      	mov	r5, r0
 8002cb0:	b118      	cbz	r0, 8002cba <__swbuf_r+0x12>
 8002cb2:	6983      	ldr	r3, [r0, #24]
 8002cb4:	b90b      	cbnz	r3, 8002cba <__swbuf_r+0x12>
 8002cb6:	f000 f9d1 	bl	800305c <__sinit>
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <__swbuf_r+0x98>)
 8002cbc:	429c      	cmp	r4, r3
 8002cbe:	d12b      	bne.n	8002d18 <__swbuf_r+0x70>
 8002cc0:	686c      	ldr	r4, [r5, #4]
 8002cc2:	69a3      	ldr	r3, [r4, #24]
 8002cc4:	60a3      	str	r3, [r4, #8]
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	071a      	lsls	r2, r3, #28
 8002cca:	d52f      	bpl.n	8002d2c <__swbuf_r+0x84>
 8002ccc:	6923      	ldr	r3, [r4, #16]
 8002cce:	b36b      	cbz	r3, 8002d2c <__swbuf_r+0x84>
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	1ac0      	subs	r0, r0, r3
 8002cd6:	6963      	ldr	r3, [r4, #20]
 8002cd8:	b2f6      	uxtb	r6, r6
 8002cda:	4283      	cmp	r3, r0
 8002cdc:	4637      	mov	r7, r6
 8002cde:	dc04      	bgt.n	8002cea <__swbuf_r+0x42>
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 f926 	bl	8002f34 <_fflush_r>
 8002ce8:	bb30      	cbnz	r0, 8002d38 <__swbuf_r+0x90>
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	6022      	str	r2, [r4, #0]
 8002cf6:	701e      	strb	r6, [r3, #0]
 8002cf8:	6963      	ldr	r3, [r4, #20]
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	4283      	cmp	r3, r0
 8002cfe:	d004      	beq.n	8002d0a <__swbuf_r+0x62>
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	07db      	lsls	r3, r3, #31
 8002d04:	d506      	bpl.n	8002d14 <__swbuf_r+0x6c>
 8002d06:	2e0a      	cmp	r6, #10
 8002d08:	d104      	bne.n	8002d14 <__swbuf_r+0x6c>
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 f911 	bl	8002f34 <_fflush_r>
 8002d12:	b988      	cbnz	r0, 8002d38 <__swbuf_r+0x90>
 8002d14:	4638      	mov	r0, r7
 8002d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <__swbuf_r+0x9c>)
 8002d1a:	429c      	cmp	r4, r3
 8002d1c:	d101      	bne.n	8002d22 <__swbuf_r+0x7a>
 8002d1e:	68ac      	ldr	r4, [r5, #8]
 8002d20:	e7cf      	b.n	8002cc2 <__swbuf_r+0x1a>
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <__swbuf_r+0xa0>)
 8002d24:	429c      	cmp	r4, r3
 8002d26:	bf08      	it	eq
 8002d28:	68ec      	ldreq	r4, [r5, #12]
 8002d2a:	e7ca      	b.n	8002cc2 <__swbuf_r+0x1a>
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 f80c 	bl	8002d4c <__swsetup_r>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d0cb      	beq.n	8002cd0 <__swbuf_r+0x28>
 8002d38:	f04f 37ff 	mov.w	r7, #4294967295
 8002d3c:	e7ea      	b.n	8002d14 <__swbuf_r+0x6c>
 8002d3e:	bf00      	nop
 8002d40:	08003d2c 	.word	0x08003d2c
 8002d44:	08003d4c 	.word	0x08003d4c
 8002d48:	08003d0c 	.word	0x08003d0c

08002d4c <__swsetup_r>:
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <__swsetup_r+0xcc>)
 8002d4e:	b570      	push	{r4, r5, r6, lr}
 8002d50:	681d      	ldr	r5, [r3, #0]
 8002d52:	4606      	mov	r6, r0
 8002d54:	460c      	mov	r4, r1
 8002d56:	b125      	cbz	r5, 8002d62 <__swsetup_r+0x16>
 8002d58:	69ab      	ldr	r3, [r5, #24]
 8002d5a:	b913      	cbnz	r3, 8002d62 <__swsetup_r+0x16>
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f000 f97d 	bl	800305c <__sinit>
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <__swsetup_r+0xd0>)
 8002d64:	429c      	cmp	r4, r3
 8002d66:	d10f      	bne.n	8002d88 <__swsetup_r+0x3c>
 8002d68:	686c      	ldr	r4, [r5, #4]
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d70:	0719      	lsls	r1, r3, #28
 8002d72:	d42c      	bmi.n	8002dce <__swsetup_r+0x82>
 8002d74:	06dd      	lsls	r5, r3, #27
 8002d76:	d411      	bmi.n	8002d9c <__swsetup_r+0x50>
 8002d78:	2309      	movs	r3, #9
 8002d7a:	6033      	str	r3, [r6, #0]
 8002d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	f04f 30ff 	mov.w	r0, #4294967295
 8002d86:	e03e      	b.n	8002e06 <__swsetup_r+0xba>
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <__swsetup_r+0xd4>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d101      	bne.n	8002d92 <__swsetup_r+0x46>
 8002d8e:	68ac      	ldr	r4, [r5, #8]
 8002d90:	e7eb      	b.n	8002d6a <__swsetup_r+0x1e>
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <__swsetup_r+0xd8>)
 8002d94:	429c      	cmp	r4, r3
 8002d96:	bf08      	it	eq
 8002d98:	68ec      	ldreq	r4, [r5, #12]
 8002d9a:	e7e6      	b.n	8002d6a <__swsetup_r+0x1e>
 8002d9c:	0758      	lsls	r0, r3, #29
 8002d9e:	d512      	bpl.n	8002dc6 <__swsetup_r+0x7a>
 8002da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002da2:	b141      	cbz	r1, 8002db6 <__swsetup_r+0x6a>
 8002da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002da8:	4299      	cmp	r1, r3
 8002daa:	d002      	beq.n	8002db2 <__swsetup_r+0x66>
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 fa5b 	bl	8003268 <_free_r>
 8002db2:	2300      	movs	r3, #0
 8002db4:	6363      	str	r3, [r4, #52]	; 0x34
 8002db6:	89a3      	ldrh	r3, [r4, #12]
 8002db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6063      	str	r3, [r4, #4]
 8002dc2:	6923      	ldr	r3, [r4, #16]
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	6923      	ldr	r3, [r4, #16]
 8002dd0:	b94b      	cbnz	r3, 8002de6 <__swsetup_r+0x9a>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ddc:	d003      	beq.n	8002de6 <__swsetup_r+0x9a>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4630      	mov	r0, r6
 8002de2:	f000 fa01 	bl	80031e8 <__smakebuf_r>
 8002de6:	89a0      	ldrh	r0, [r4, #12]
 8002de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dec:	f010 0301 	ands.w	r3, r0, #1
 8002df0:	d00a      	beq.n	8002e08 <__swsetup_r+0xbc>
 8002df2:	2300      	movs	r3, #0
 8002df4:	60a3      	str	r3, [r4, #8]
 8002df6:	6963      	ldr	r3, [r4, #20]
 8002df8:	425b      	negs	r3, r3
 8002dfa:	61a3      	str	r3, [r4, #24]
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	b943      	cbnz	r3, 8002e12 <__swsetup_r+0xc6>
 8002e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e04:	d1ba      	bne.n	8002d7c <__swsetup_r+0x30>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	0781      	lsls	r1, r0, #30
 8002e0a:	bf58      	it	pl
 8002e0c:	6963      	ldrpl	r3, [r4, #20]
 8002e0e:	60a3      	str	r3, [r4, #8]
 8002e10:	e7f4      	b.n	8002dfc <__swsetup_r+0xb0>
 8002e12:	2000      	movs	r0, #0
 8002e14:	e7f7      	b.n	8002e06 <__swsetup_r+0xba>
 8002e16:	bf00      	nop
 8002e18:	20000014 	.word	0x20000014
 8002e1c:	08003d2c 	.word	0x08003d2c
 8002e20:	08003d4c 	.word	0x08003d4c
 8002e24:	08003d0c 	.word	0x08003d0c

08002e28 <__sflush_r>:
 8002e28:	898a      	ldrh	r2, [r1, #12]
 8002e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e2e:	4605      	mov	r5, r0
 8002e30:	0710      	lsls	r0, r2, #28
 8002e32:	460c      	mov	r4, r1
 8002e34:	d458      	bmi.n	8002ee8 <__sflush_r+0xc0>
 8002e36:	684b      	ldr	r3, [r1, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	dc05      	bgt.n	8002e48 <__sflush_r+0x20>
 8002e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	dc02      	bgt.n	8002e48 <__sflush_r+0x20>
 8002e42:	2000      	movs	r0, #0
 8002e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e4a:	2e00      	cmp	r6, #0
 8002e4c:	d0f9      	beq.n	8002e42 <__sflush_r+0x1a>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e54:	682f      	ldr	r7, [r5, #0]
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	d032      	beq.n	8002ec0 <__sflush_r+0x98>
 8002e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	075a      	lsls	r2, r3, #29
 8002e60:	d505      	bpl.n	8002e6e <__sflush_r+0x46>
 8002e62:	6863      	ldr	r3, [r4, #4]
 8002e64:	1ac0      	subs	r0, r0, r3
 8002e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e68:	b10b      	cbz	r3, 8002e6e <__sflush_r+0x46>
 8002e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e6c:	1ac0      	subs	r0, r0, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	4602      	mov	r2, r0
 8002e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e74:	6a21      	ldr	r1, [r4, #32]
 8002e76:	4628      	mov	r0, r5
 8002e78:	47b0      	blx	r6
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	d106      	bne.n	8002e8e <__sflush_r+0x66>
 8002e80:	6829      	ldr	r1, [r5, #0]
 8002e82:	291d      	cmp	r1, #29
 8002e84:	d82c      	bhi.n	8002ee0 <__sflush_r+0xb8>
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <__sflush_r+0x108>)
 8002e88:	40ca      	lsrs	r2, r1
 8002e8a:	07d6      	lsls	r6, r2, #31
 8002e8c:	d528      	bpl.n	8002ee0 <__sflush_r+0xb8>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	6062      	str	r2, [r4, #4]
 8002e92:	04d9      	lsls	r1, r3, #19
 8002e94:	6922      	ldr	r2, [r4, #16]
 8002e96:	6022      	str	r2, [r4, #0]
 8002e98:	d504      	bpl.n	8002ea4 <__sflush_r+0x7c>
 8002e9a:	1c42      	adds	r2, r0, #1
 8002e9c:	d101      	bne.n	8002ea2 <__sflush_r+0x7a>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	b903      	cbnz	r3, 8002ea4 <__sflush_r+0x7c>
 8002ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8002ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ea6:	602f      	str	r7, [r5, #0]
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	d0ca      	beq.n	8002e42 <__sflush_r+0x1a>
 8002eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eb0:	4299      	cmp	r1, r3
 8002eb2:	d002      	beq.n	8002eba <__sflush_r+0x92>
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f000 f9d7 	bl	8003268 <_free_r>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8002ebe:	e7c1      	b.n	8002e44 <__sflush_r+0x1c>
 8002ec0:	6a21      	ldr	r1, [r4, #32]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b0      	blx	r6
 8002ec8:	1c41      	adds	r1, r0, #1
 8002eca:	d1c7      	bne.n	8002e5c <__sflush_r+0x34>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0c4      	beq.n	8002e5c <__sflush_r+0x34>
 8002ed2:	2b1d      	cmp	r3, #29
 8002ed4:	d001      	beq.n	8002eda <__sflush_r+0xb2>
 8002ed6:	2b16      	cmp	r3, #22
 8002ed8:	d101      	bne.n	8002ede <__sflush_r+0xb6>
 8002eda:	602f      	str	r7, [r5, #0]
 8002edc:	e7b1      	b.n	8002e42 <__sflush_r+0x1a>
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	e7ad      	b.n	8002e44 <__sflush_r+0x1c>
 8002ee8:	690f      	ldr	r7, [r1, #16]
 8002eea:	2f00      	cmp	r7, #0
 8002eec:	d0a9      	beq.n	8002e42 <__sflush_r+0x1a>
 8002eee:	0793      	lsls	r3, r2, #30
 8002ef0:	680e      	ldr	r6, [r1, #0]
 8002ef2:	bf08      	it	eq
 8002ef4:	694b      	ldreq	r3, [r1, #20]
 8002ef6:	600f      	str	r7, [r1, #0]
 8002ef8:	bf18      	it	ne
 8002efa:	2300      	movne	r3, #0
 8002efc:	eba6 0807 	sub.w	r8, r6, r7
 8002f00:	608b      	str	r3, [r1, #8]
 8002f02:	f1b8 0f00 	cmp.w	r8, #0
 8002f06:	dd9c      	ble.n	8002e42 <__sflush_r+0x1a>
 8002f08:	6a21      	ldr	r1, [r4, #32]
 8002f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	463a      	mov	r2, r7
 8002f10:	4628      	mov	r0, r5
 8002f12:	47b0      	blx	r6
 8002f14:	2800      	cmp	r0, #0
 8002f16:	dc06      	bgt.n	8002f26 <__sflush_r+0xfe>
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	e78e      	b.n	8002e44 <__sflush_r+0x1c>
 8002f26:	4407      	add	r7, r0
 8002f28:	eba8 0800 	sub.w	r8, r8, r0
 8002f2c:	e7e9      	b.n	8002f02 <__sflush_r+0xda>
 8002f2e:	bf00      	nop
 8002f30:	20400001 	.word	0x20400001

08002f34 <_fflush_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	690b      	ldr	r3, [r1, #16]
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	b913      	cbnz	r3, 8002f44 <_fflush_r+0x10>
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4628      	mov	r0, r5
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	b118      	cbz	r0, 8002f4e <_fflush_r+0x1a>
 8002f46:	6983      	ldr	r3, [r0, #24]
 8002f48:	b90b      	cbnz	r3, 8002f4e <_fflush_r+0x1a>
 8002f4a:	f000 f887 	bl	800305c <__sinit>
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <_fflush_r+0x6c>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d11b      	bne.n	8002f8c <_fflush_r+0x58>
 8002f54:	686c      	ldr	r4, [r5, #4]
 8002f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ef      	beq.n	8002f3e <_fflush_r+0xa>
 8002f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f60:	07d0      	lsls	r0, r2, #31
 8002f62:	d404      	bmi.n	8002f6e <_fflush_r+0x3a>
 8002f64:	0599      	lsls	r1, r3, #22
 8002f66:	d402      	bmi.n	8002f6e <_fflush_r+0x3a>
 8002f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f6a:	f000 f915 	bl	8003198 <__retarget_lock_acquire_recursive>
 8002f6e:	4628      	mov	r0, r5
 8002f70:	4621      	mov	r1, r4
 8002f72:	f7ff ff59 	bl	8002e28 <__sflush_r>
 8002f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f78:	07da      	lsls	r2, r3, #31
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	d4e0      	bmi.n	8002f40 <_fflush_r+0xc>
 8002f7e:	89a3      	ldrh	r3, [r4, #12]
 8002f80:	059b      	lsls	r3, r3, #22
 8002f82:	d4dd      	bmi.n	8002f40 <_fflush_r+0xc>
 8002f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f86:	f000 f908 	bl	800319a <__retarget_lock_release_recursive>
 8002f8a:	e7d9      	b.n	8002f40 <_fflush_r+0xc>
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <_fflush_r+0x70>)
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d101      	bne.n	8002f96 <_fflush_r+0x62>
 8002f92:	68ac      	ldr	r4, [r5, #8]
 8002f94:	e7df      	b.n	8002f56 <_fflush_r+0x22>
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <_fflush_r+0x74>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	bf08      	it	eq
 8002f9c:	68ec      	ldreq	r4, [r5, #12]
 8002f9e:	e7da      	b.n	8002f56 <_fflush_r+0x22>
 8002fa0:	08003d2c 	.word	0x08003d2c
 8002fa4:	08003d4c 	.word	0x08003d4c
 8002fa8:	08003d0c 	.word	0x08003d0c

08002fac <std>:
 8002fac:	2300      	movs	r3, #0
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8002fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fba:	6083      	str	r3, [r0, #8]
 8002fbc:	8181      	strh	r1, [r0, #12]
 8002fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8002fc0:	81c2      	strh	r2, [r0, #14]
 8002fc2:	6183      	str	r3, [r0, #24]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	305c      	adds	r0, #92	; 0x5c
 8002fca:	f7ff fdad 	bl	8002b28 <memset>
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <std+0x38>)
 8002fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <std+0x3c>)
 8002fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <std+0x40>)
 8002fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <std+0x44>)
 8002fdc:	6224      	str	r4, [r4, #32]
 8002fde:	6323      	str	r3, [r4, #48]	; 0x30
 8002fe0:	bd10      	pop	{r4, pc}
 8002fe2:	bf00      	nop
 8002fe4:	08003a25 	.word	0x08003a25
 8002fe8:	08003a47 	.word	0x08003a47
 8002fec:	08003a7f 	.word	0x08003a7f
 8002ff0:	08003aa3 	.word	0x08003aa3

08002ff4 <_cleanup_r>:
 8002ff4:	4901      	ldr	r1, [pc, #4]	; (8002ffc <_cleanup_r+0x8>)
 8002ff6:	f000 b8af 	b.w	8003158 <_fwalk_reent>
 8002ffa:	bf00      	nop
 8002ffc:	08002f35 	.word	0x08002f35

08003000 <__sfmoreglue>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	2268      	movs	r2, #104	; 0x68
 8003004:	1e4d      	subs	r5, r1, #1
 8003006:	4355      	muls	r5, r2
 8003008:	460e      	mov	r6, r1
 800300a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800300e:	f000 f997 	bl	8003340 <_malloc_r>
 8003012:	4604      	mov	r4, r0
 8003014:	b140      	cbz	r0, 8003028 <__sfmoreglue+0x28>
 8003016:	2100      	movs	r1, #0
 8003018:	e9c0 1600 	strd	r1, r6, [r0]
 800301c:	300c      	adds	r0, #12
 800301e:	60a0      	str	r0, [r4, #8]
 8003020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003024:	f7ff fd80 	bl	8002b28 <memset>
 8003028:	4620      	mov	r0, r4
 800302a:	bd70      	pop	{r4, r5, r6, pc}

0800302c <__sfp_lock_acquire>:
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <__sfp_lock_acquire+0x8>)
 800302e:	f000 b8b3 	b.w	8003198 <__retarget_lock_acquire_recursive>
 8003032:	bf00      	nop
 8003034:	20000561 	.word	0x20000561

08003038 <__sfp_lock_release>:
 8003038:	4801      	ldr	r0, [pc, #4]	; (8003040 <__sfp_lock_release+0x8>)
 800303a:	f000 b8ae 	b.w	800319a <__retarget_lock_release_recursive>
 800303e:	bf00      	nop
 8003040:	20000561 	.word	0x20000561

08003044 <__sinit_lock_acquire>:
 8003044:	4801      	ldr	r0, [pc, #4]	; (800304c <__sinit_lock_acquire+0x8>)
 8003046:	f000 b8a7 	b.w	8003198 <__retarget_lock_acquire_recursive>
 800304a:	bf00      	nop
 800304c:	20000562 	.word	0x20000562

08003050 <__sinit_lock_release>:
 8003050:	4801      	ldr	r0, [pc, #4]	; (8003058 <__sinit_lock_release+0x8>)
 8003052:	f000 b8a2 	b.w	800319a <__retarget_lock_release_recursive>
 8003056:	bf00      	nop
 8003058:	20000562 	.word	0x20000562

0800305c <__sinit>:
 800305c:	b510      	push	{r4, lr}
 800305e:	4604      	mov	r4, r0
 8003060:	f7ff fff0 	bl	8003044 <__sinit_lock_acquire>
 8003064:	69a3      	ldr	r3, [r4, #24]
 8003066:	b11b      	cbz	r3, 8003070 <__sinit+0x14>
 8003068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800306c:	f7ff bff0 	b.w	8003050 <__sinit_lock_release>
 8003070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003074:	6523      	str	r3, [r4, #80]	; 0x50
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <__sinit+0x68>)
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <__sinit+0x6c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	62a2      	str	r2, [r4, #40]	; 0x28
 800307e:	42a3      	cmp	r3, r4
 8003080:	bf04      	itt	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	61a3      	streq	r3, [r4, #24]
 8003086:	4620      	mov	r0, r4
 8003088:	f000 f820 	bl	80030cc <__sfp>
 800308c:	6060      	str	r0, [r4, #4]
 800308e:	4620      	mov	r0, r4
 8003090:	f000 f81c 	bl	80030cc <__sfp>
 8003094:	60a0      	str	r0, [r4, #8]
 8003096:	4620      	mov	r0, r4
 8003098:	f000 f818 	bl	80030cc <__sfp>
 800309c:	2200      	movs	r2, #0
 800309e:	60e0      	str	r0, [r4, #12]
 80030a0:	2104      	movs	r1, #4
 80030a2:	6860      	ldr	r0, [r4, #4]
 80030a4:	f7ff ff82 	bl	8002fac <std>
 80030a8:	68a0      	ldr	r0, [r4, #8]
 80030aa:	2201      	movs	r2, #1
 80030ac:	2109      	movs	r1, #9
 80030ae:	f7ff ff7d 	bl	8002fac <std>
 80030b2:	68e0      	ldr	r0, [r4, #12]
 80030b4:	2202      	movs	r2, #2
 80030b6:	2112      	movs	r1, #18
 80030b8:	f7ff ff78 	bl	8002fac <std>
 80030bc:	2301      	movs	r3, #1
 80030be:	61a3      	str	r3, [r4, #24]
 80030c0:	e7d2      	b.n	8003068 <__sinit+0xc>
 80030c2:	bf00      	nop
 80030c4:	08003d08 	.word	0x08003d08
 80030c8:	08002ff5 	.word	0x08002ff5

080030cc <__sfp>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	4607      	mov	r7, r0
 80030d0:	f7ff ffac 	bl	800302c <__sfp_lock_acquire>
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <__sfp+0x84>)
 80030d6:	681e      	ldr	r6, [r3, #0]
 80030d8:	69b3      	ldr	r3, [r6, #24]
 80030da:	b913      	cbnz	r3, 80030e2 <__sfp+0x16>
 80030dc:	4630      	mov	r0, r6
 80030de:	f7ff ffbd 	bl	800305c <__sinit>
 80030e2:	3648      	adds	r6, #72	; 0x48
 80030e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	d503      	bpl.n	80030f4 <__sfp+0x28>
 80030ec:	6833      	ldr	r3, [r6, #0]
 80030ee:	b30b      	cbz	r3, 8003134 <__sfp+0x68>
 80030f0:	6836      	ldr	r6, [r6, #0]
 80030f2:	e7f7      	b.n	80030e4 <__sfp+0x18>
 80030f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030f8:	b9d5      	cbnz	r5, 8003130 <__sfp+0x64>
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <__sfp+0x88>)
 80030fc:	60e3      	str	r3, [r4, #12]
 80030fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003102:	6665      	str	r5, [r4, #100]	; 0x64
 8003104:	f000 f847 	bl	8003196 <__retarget_lock_init_recursive>
 8003108:	f7ff ff96 	bl	8003038 <__sfp_lock_release>
 800310c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003114:	6025      	str	r5, [r4, #0]
 8003116:	61a5      	str	r5, [r4, #24]
 8003118:	2208      	movs	r2, #8
 800311a:	4629      	mov	r1, r5
 800311c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003120:	f7ff fd02 	bl	8002b28 <memset>
 8003124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800312c:	4620      	mov	r0, r4
 800312e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003130:	3468      	adds	r4, #104	; 0x68
 8003132:	e7d9      	b.n	80030e8 <__sfp+0x1c>
 8003134:	2104      	movs	r1, #4
 8003136:	4638      	mov	r0, r7
 8003138:	f7ff ff62 	bl	8003000 <__sfmoreglue>
 800313c:	4604      	mov	r4, r0
 800313e:	6030      	str	r0, [r6, #0]
 8003140:	2800      	cmp	r0, #0
 8003142:	d1d5      	bne.n	80030f0 <__sfp+0x24>
 8003144:	f7ff ff78 	bl	8003038 <__sfp_lock_release>
 8003148:	230c      	movs	r3, #12
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	e7ee      	b.n	800312c <__sfp+0x60>
 800314e:	bf00      	nop
 8003150:	08003d08 	.word	0x08003d08
 8003154:	ffff0001 	.word	0xffff0001

08003158 <_fwalk_reent>:
 8003158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800315c:	4606      	mov	r6, r0
 800315e:	4688      	mov	r8, r1
 8003160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003164:	2700      	movs	r7, #0
 8003166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800316a:	f1b9 0901 	subs.w	r9, r9, #1
 800316e:	d505      	bpl.n	800317c <_fwalk_reent+0x24>
 8003170:	6824      	ldr	r4, [r4, #0]
 8003172:	2c00      	cmp	r4, #0
 8003174:	d1f7      	bne.n	8003166 <_fwalk_reent+0xe>
 8003176:	4638      	mov	r0, r7
 8003178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800317c:	89ab      	ldrh	r3, [r5, #12]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d907      	bls.n	8003192 <_fwalk_reent+0x3a>
 8003182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003186:	3301      	adds	r3, #1
 8003188:	d003      	beq.n	8003192 <_fwalk_reent+0x3a>
 800318a:	4629      	mov	r1, r5
 800318c:	4630      	mov	r0, r6
 800318e:	47c0      	blx	r8
 8003190:	4307      	orrs	r7, r0
 8003192:	3568      	adds	r5, #104	; 0x68
 8003194:	e7e9      	b.n	800316a <_fwalk_reent+0x12>

08003196 <__retarget_lock_init_recursive>:
 8003196:	4770      	bx	lr

08003198 <__retarget_lock_acquire_recursive>:
 8003198:	4770      	bx	lr

0800319a <__retarget_lock_release_recursive>:
 800319a:	4770      	bx	lr

0800319c <__swhatbuf_r>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	460e      	mov	r6, r1
 80031a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a4:	2900      	cmp	r1, #0
 80031a6:	b096      	sub	sp, #88	; 0x58
 80031a8:	4614      	mov	r4, r2
 80031aa:	461d      	mov	r5, r3
 80031ac:	da08      	bge.n	80031c0 <__swhatbuf_r+0x24>
 80031ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	602a      	str	r2, [r5, #0]
 80031b6:	061a      	lsls	r2, r3, #24
 80031b8:	d410      	bmi.n	80031dc <__swhatbuf_r+0x40>
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	e00e      	b.n	80031de <__swhatbuf_r+0x42>
 80031c0:	466a      	mov	r2, sp
 80031c2:	f000 fc95 	bl	8003af0 <_fstat_r>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	dbf1      	blt.n	80031ae <__swhatbuf_r+0x12>
 80031ca:	9a01      	ldr	r2, [sp, #4]
 80031cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031d4:	425a      	negs	r2, r3
 80031d6:	415a      	adcs	r2, r3
 80031d8:	602a      	str	r2, [r5, #0]
 80031da:	e7ee      	b.n	80031ba <__swhatbuf_r+0x1e>
 80031dc:	2340      	movs	r3, #64	; 0x40
 80031de:	2000      	movs	r0, #0
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	b016      	add	sp, #88	; 0x58
 80031e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080031e8 <__smakebuf_r>:
 80031e8:	898b      	ldrh	r3, [r1, #12]
 80031ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031ec:	079d      	lsls	r5, r3, #30
 80031ee:	4606      	mov	r6, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	d507      	bpl.n	8003204 <__smakebuf_r+0x1c>
 80031f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	6123      	str	r3, [r4, #16]
 80031fc:	2301      	movs	r3, #1
 80031fe:	6163      	str	r3, [r4, #20]
 8003200:	b002      	add	sp, #8
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	ab01      	add	r3, sp, #4
 8003206:	466a      	mov	r2, sp
 8003208:	f7ff ffc8 	bl	800319c <__swhatbuf_r>
 800320c:	9900      	ldr	r1, [sp, #0]
 800320e:	4605      	mov	r5, r0
 8003210:	4630      	mov	r0, r6
 8003212:	f000 f895 	bl	8003340 <_malloc_r>
 8003216:	b948      	cbnz	r0, 800322c <__smakebuf_r+0x44>
 8003218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800321c:	059a      	lsls	r2, r3, #22
 800321e:	d4ef      	bmi.n	8003200 <__smakebuf_r+0x18>
 8003220:	f023 0303 	bic.w	r3, r3, #3
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	81a3      	strh	r3, [r4, #12]
 800322a:	e7e3      	b.n	80031f4 <__smakebuf_r+0xc>
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <__smakebuf_r+0x7c>)
 800322e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	6020      	str	r0, [r4, #0]
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	81a3      	strh	r3, [r4, #12]
 800323a:	9b00      	ldr	r3, [sp, #0]
 800323c:	6163      	str	r3, [r4, #20]
 800323e:	9b01      	ldr	r3, [sp, #4]
 8003240:	6120      	str	r0, [r4, #16]
 8003242:	b15b      	cbz	r3, 800325c <__smakebuf_r+0x74>
 8003244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003248:	4630      	mov	r0, r6
 800324a:	f000 fc63 	bl	8003b14 <_isatty_r>
 800324e:	b128      	cbz	r0, 800325c <__smakebuf_r+0x74>
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	89a0      	ldrh	r0, [r4, #12]
 800325e:	4305      	orrs	r5, r0
 8003260:	81a5      	strh	r5, [r4, #12]
 8003262:	e7cd      	b.n	8003200 <__smakebuf_r+0x18>
 8003264:	08002ff5 	.word	0x08002ff5

08003268 <_free_r>:
 8003268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800326a:	2900      	cmp	r1, #0
 800326c:	d044      	beq.n	80032f8 <_free_r+0x90>
 800326e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003272:	9001      	str	r0, [sp, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f1a1 0404 	sub.w	r4, r1, #4
 800327a:	bfb8      	it	lt
 800327c:	18e4      	addlt	r4, r4, r3
 800327e:	f000 fc6b 	bl	8003b58 <__malloc_lock>
 8003282:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <_free_r+0x94>)
 8003284:	9801      	ldr	r0, [sp, #4]
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	b933      	cbnz	r3, 8003298 <_free_r+0x30>
 800328a:	6063      	str	r3, [r4, #4]
 800328c:	6014      	str	r4, [r2, #0]
 800328e:	b003      	add	sp, #12
 8003290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003294:	f000 bc66 	b.w	8003b64 <__malloc_unlock>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d908      	bls.n	80032ae <_free_r+0x46>
 800329c:	6825      	ldr	r5, [r4, #0]
 800329e:	1961      	adds	r1, r4, r5
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1949      	addeq	r1, r1, r5
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	e7ed      	b.n	800328a <_free_r+0x22>
 80032ae:	461a      	mov	r2, r3
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b10b      	cbz	r3, 80032b8 <_free_r+0x50>
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	d9fa      	bls.n	80032ae <_free_r+0x46>
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	1855      	adds	r5, r2, r1
 80032bc:	42a5      	cmp	r5, r4
 80032be:	d10b      	bne.n	80032d8 <_free_r+0x70>
 80032c0:	6824      	ldr	r4, [r4, #0]
 80032c2:	4421      	add	r1, r4
 80032c4:	1854      	adds	r4, r2, r1
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	d1e0      	bne.n	800328e <_free_r+0x26>
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	6053      	str	r3, [r2, #4]
 80032d2:	4421      	add	r1, r4
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	e7da      	b.n	800328e <_free_r+0x26>
 80032d8:	d902      	bls.n	80032e0 <_free_r+0x78>
 80032da:	230c      	movs	r3, #12
 80032dc:	6003      	str	r3, [r0, #0]
 80032de:	e7d6      	b.n	800328e <_free_r+0x26>
 80032e0:	6825      	ldr	r5, [r4, #0]
 80032e2:	1961      	adds	r1, r4, r5
 80032e4:	428b      	cmp	r3, r1
 80032e6:	bf04      	itt	eq
 80032e8:	6819      	ldreq	r1, [r3, #0]
 80032ea:	685b      	ldreq	r3, [r3, #4]
 80032ec:	6063      	str	r3, [r4, #4]
 80032ee:	bf04      	itt	eq
 80032f0:	1949      	addeq	r1, r1, r5
 80032f2:	6021      	streq	r1, [r4, #0]
 80032f4:	6054      	str	r4, [r2, #4]
 80032f6:	e7ca      	b.n	800328e <_free_r+0x26>
 80032f8:	b003      	add	sp, #12
 80032fa:	bd30      	pop	{r4, r5, pc}
 80032fc:	20000564 	.word	0x20000564

08003300 <sbrk_aligned>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4e0e      	ldr	r6, [pc, #56]	; (800333c <sbrk_aligned+0x3c>)
 8003304:	460c      	mov	r4, r1
 8003306:	6831      	ldr	r1, [r6, #0]
 8003308:	4605      	mov	r5, r0
 800330a:	b911      	cbnz	r1, 8003312 <sbrk_aligned+0x12>
 800330c:	f000 fb7a 	bl	8003a04 <_sbrk_r>
 8003310:	6030      	str	r0, [r6, #0]
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 fb75 	bl	8003a04 <_sbrk_r>
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	d00a      	beq.n	8003334 <sbrk_aligned+0x34>
 800331e:	1cc4      	adds	r4, r0, #3
 8003320:	f024 0403 	bic.w	r4, r4, #3
 8003324:	42a0      	cmp	r0, r4
 8003326:	d007      	beq.n	8003338 <sbrk_aligned+0x38>
 8003328:	1a21      	subs	r1, r4, r0
 800332a:	4628      	mov	r0, r5
 800332c:	f000 fb6a 	bl	8003a04 <_sbrk_r>
 8003330:	3001      	adds	r0, #1
 8003332:	d101      	bne.n	8003338 <sbrk_aligned+0x38>
 8003334:	f04f 34ff 	mov.w	r4, #4294967295
 8003338:	4620      	mov	r0, r4
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	20000568 	.word	0x20000568

08003340 <_malloc_r>:
 8003340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003344:	1ccd      	adds	r5, r1, #3
 8003346:	f025 0503 	bic.w	r5, r5, #3
 800334a:	3508      	adds	r5, #8
 800334c:	2d0c      	cmp	r5, #12
 800334e:	bf38      	it	cc
 8003350:	250c      	movcc	r5, #12
 8003352:	2d00      	cmp	r5, #0
 8003354:	4607      	mov	r7, r0
 8003356:	db01      	blt.n	800335c <_malloc_r+0x1c>
 8003358:	42a9      	cmp	r1, r5
 800335a:	d905      	bls.n	8003368 <_malloc_r+0x28>
 800335c:	230c      	movs	r3, #12
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	2600      	movs	r6, #0
 8003362:	4630      	mov	r0, r6
 8003364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003368:	4e2e      	ldr	r6, [pc, #184]	; (8003424 <_malloc_r+0xe4>)
 800336a:	f000 fbf5 	bl	8003b58 <__malloc_lock>
 800336e:	6833      	ldr	r3, [r6, #0]
 8003370:	461c      	mov	r4, r3
 8003372:	bb34      	cbnz	r4, 80033c2 <_malloc_r+0x82>
 8003374:	4629      	mov	r1, r5
 8003376:	4638      	mov	r0, r7
 8003378:	f7ff ffc2 	bl	8003300 <sbrk_aligned>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	4604      	mov	r4, r0
 8003380:	d14d      	bne.n	800341e <_malloc_r+0xde>
 8003382:	6834      	ldr	r4, [r6, #0]
 8003384:	4626      	mov	r6, r4
 8003386:	2e00      	cmp	r6, #0
 8003388:	d140      	bne.n	800340c <_malloc_r+0xcc>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	4631      	mov	r1, r6
 800338e:	4638      	mov	r0, r7
 8003390:	eb04 0803 	add.w	r8, r4, r3
 8003394:	f000 fb36 	bl	8003a04 <_sbrk_r>
 8003398:	4580      	cmp	r8, r0
 800339a:	d13a      	bne.n	8003412 <_malloc_r+0xd2>
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	3503      	adds	r5, #3
 80033a0:	1a6d      	subs	r5, r5, r1
 80033a2:	f025 0503 	bic.w	r5, r5, #3
 80033a6:	3508      	adds	r5, #8
 80033a8:	2d0c      	cmp	r5, #12
 80033aa:	bf38      	it	cc
 80033ac:	250c      	movcc	r5, #12
 80033ae:	4629      	mov	r1, r5
 80033b0:	4638      	mov	r0, r7
 80033b2:	f7ff ffa5 	bl	8003300 <sbrk_aligned>
 80033b6:	3001      	adds	r0, #1
 80033b8:	d02b      	beq.n	8003412 <_malloc_r+0xd2>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	442b      	add	r3, r5
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	e00e      	b.n	80033e0 <_malloc_r+0xa0>
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	1b52      	subs	r2, r2, r5
 80033c6:	d41e      	bmi.n	8003406 <_malloc_r+0xc6>
 80033c8:	2a0b      	cmp	r2, #11
 80033ca:	d916      	bls.n	80033fa <_malloc_r+0xba>
 80033cc:	1961      	adds	r1, r4, r5
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	6025      	str	r5, [r4, #0]
 80033d2:	bf18      	it	ne
 80033d4:	6059      	strne	r1, [r3, #4]
 80033d6:	6863      	ldr	r3, [r4, #4]
 80033d8:	bf08      	it	eq
 80033da:	6031      	streq	r1, [r6, #0]
 80033dc:	5162      	str	r2, [r4, r5]
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	4638      	mov	r0, r7
 80033e2:	f104 060b 	add.w	r6, r4, #11
 80033e6:	f000 fbbd 	bl	8003b64 <__malloc_unlock>
 80033ea:	f026 0607 	bic.w	r6, r6, #7
 80033ee:	1d23      	adds	r3, r4, #4
 80033f0:	1af2      	subs	r2, r6, r3
 80033f2:	d0b6      	beq.n	8003362 <_malloc_r+0x22>
 80033f4:	1b9b      	subs	r3, r3, r6
 80033f6:	50a3      	str	r3, [r4, r2]
 80033f8:	e7b3      	b.n	8003362 <_malloc_r+0x22>
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	bf0c      	ite	eq
 8003400:	6032      	streq	r2, [r6, #0]
 8003402:	605a      	strne	r2, [r3, #4]
 8003404:	e7ec      	b.n	80033e0 <_malloc_r+0xa0>
 8003406:	4623      	mov	r3, r4
 8003408:	6864      	ldr	r4, [r4, #4]
 800340a:	e7b2      	b.n	8003372 <_malloc_r+0x32>
 800340c:	4634      	mov	r4, r6
 800340e:	6876      	ldr	r6, [r6, #4]
 8003410:	e7b9      	b.n	8003386 <_malloc_r+0x46>
 8003412:	230c      	movs	r3, #12
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4638      	mov	r0, r7
 8003418:	f000 fba4 	bl	8003b64 <__malloc_unlock>
 800341c:	e7a1      	b.n	8003362 <_malloc_r+0x22>
 800341e:	6025      	str	r5, [r4, #0]
 8003420:	e7de      	b.n	80033e0 <_malloc_r+0xa0>
 8003422:	bf00      	nop
 8003424:	20000564 	.word	0x20000564

08003428 <__sfputc_r>:
 8003428:	6893      	ldr	r3, [r2, #8]
 800342a:	3b01      	subs	r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	b410      	push	{r4}
 8003430:	6093      	str	r3, [r2, #8]
 8003432:	da08      	bge.n	8003446 <__sfputc_r+0x1e>
 8003434:	6994      	ldr	r4, [r2, #24]
 8003436:	42a3      	cmp	r3, r4
 8003438:	db01      	blt.n	800343e <__sfputc_r+0x16>
 800343a:	290a      	cmp	r1, #10
 800343c:	d103      	bne.n	8003446 <__sfputc_r+0x1e>
 800343e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003442:	f7ff bc31 	b.w	8002ca8 <__swbuf_r>
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	1c58      	adds	r0, r3, #1
 800344a:	6010      	str	r0, [r2, #0]
 800344c:	7019      	strb	r1, [r3, #0]
 800344e:	4608      	mov	r0, r1
 8003450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003454:	4770      	bx	lr

08003456 <__sfputs_r>:
 8003456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003458:	4606      	mov	r6, r0
 800345a:	460f      	mov	r7, r1
 800345c:	4614      	mov	r4, r2
 800345e:	18d5      	adds	r5, r2, r3
 8003460:	42ac      	cmp	r4, r5
 8003462:	d101      	bne.n	8003468 <__sfputs_r+0x12>
 8003464:	2000      	movs	r0, #0
 8003466:	e007      	b.n	8003478 <__sfputs_r+0x22>
 8003468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800346c:	463a      	mov	r2, r7
 800346e:	4630      	mov	r0, r6
 8003470:	f7ff ffda 	bl	8003428 <__sfputc_r>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d1f3      	bne.n	8003460 <__sfputs_r+0xa>
 8003478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800347c <_vfiprintf_r>:
 800347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003480:	460d      	mov	r5, r1
 8003482:	b09d      	sub	sp, #116	; 0x74
 8003484:	4614      	mov	r4, r2
 8003486:	4698      	mov	r8, r3
 8003488:	4606      	mov	r6, r0
 800348a:	b118      	cbz	r0, 8003494 <_vfiprintf_r+0x18>
 800348c:	6983      	ldr	r3, [r0, #24]
 800348e:	b90b      	cbnz	r3, 8003494 <_vfiprintf_r+0x18>
 8003490:	f7ff fde4 	bl	800305c <__sinit>
 8003494:	4b89      	ldr	r3, [pc, #548]	; (80036bc <_vfiprintf_r+0x240>)
 8003496:	429d      	cmp	r5, r3
 8003498:	d11b      	bne.n	80034d2 <_vfiprintf_r+0x56>
 800349a:	6875      	ldr	r5, [r6, #4]
 800349c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800349e:	07d9      	lsls	r1, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_vfiprintf_r+0x32>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_vfiprintf_r+0x32>
 80034a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034aa:	f7ff fe75 	bl	8003198 <__retarget_lock_acquire_recursive>
 80034ae:	89ab      	ldrh	r3, [r5, #12]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	d501      	bpl.n	80034b8 <_vfiprintf_r+0x3c>
 80034b4:	692b      	ldr	r3, [r5, #16]
 80034b6:	b9eb      	cbnz	r3, 80034f4 <_vfiprintf_r+0x78>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7ff fc46 	bl	8002d4c <__swsetup_r>
 80034c0:	b1c0      	cbz	r0, 80034f4 <_vfiprintf_r+0x78>
 80034c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034c4:	07dc      	lsls	r4, r3, #31
 80034c6:	d50e      	bpl.n	80034e6 <_vfiprintf_r+0x6a>
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	b01d      	add	sp, #116	; 0x74
 80034ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d2:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <_vfiprintf_r+0x244>)
 80034d4:	429d      	cmp	r5, r3
 80034d6:	d101      	bne.n	80034dc <_vfiprintf_r+0x60>
 80034d8:	68b5      	ldr	r5, [r6, #8]
 80034da:	e7df      	b.n	800349c <_vfiprintf_r+0x20>
 80034dc:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <_vfiprintf_r+0x248>)
 80034de:	429d      	cmp	r5, r3
 80034e0:	bf08      	it	eq
 80034e2:	68f5      	ldreq	r5, [r6, #12]
 80034e4:	e7da      	b.n	800349c <_vfiprintf_r+0x20>
 80034e6:	89ab      	ldrh	r3, [r5, #12]
 80034e8:	0598      	lsls	r0, r3, #22
 80034ea:	d4ed      	bmi.n	80034c8 <_vfiprintf_r+0x4c>
 80034ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ee:	f7ff fe54 	bl	800319a <__retarget_lock_release_recursive>
 80034f2:	e7e9      	b.n	80034c8 <_vfiprintf_r+0x4c>
 80034f4:	2300      	movs	r3, #0
 80034f6:	9309      	str	r3, [sp, #36]	; 0x24
 80034f8:	2320      	movs	r3, #32
 80034fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003502:	2330      	movs	r3, #48	; 0x30
 8003504:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80036c8 <_vfiprintf_r+0x24c>
 8003508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800350c:	f04f 0901 	mov.w	r9, #1
 8003510:	4623      	mov	r3, r4
 8003512:	469a      	mov	sl, r3
 8003514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003518:	b10a      	cbz	r2, 800351e <_vfiprintf_r+0xa2>
 800351a:	2a25      	cmp	r2, #37	; 0x25
 800351c:	d1f9      	bne.n	8003512 <_vfiprintf_r+0x96>
 800351e:	ebba 0b04 	subs.w	fp, sl, r4
 8003522:	d00b      	beq.n	800353c <_vfiprintf_r+0xc0>
 8003524:	465b      	mov	r3, fp
 8003526:	4622      	mov	r2, r4
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff ff93 	bl	8003456 <__sfputs_r>
 8003530:	3001      	adds	r0, #1
 8003532:	f000 80aa 	beq.w	800368a <_vfiprintf_r+0x20e>
 8003536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003538:	445a      	add	r2, fp
 800353a:	9209      	str	r2, [sp, #36]	; 0x24
 800353c:	f89a 3000 	ldrb.w	r3, [sl]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a2 	beq.w	800368a <_vfiprintf_r+0x20e>
 8003546:	2300      	movs	r3, #0
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003550:	f10a 0a01 	add.w	sl, sl, #1
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	9307      	str	r3, [sp, #28]
 8003558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800355c:	931a      	str	r3, [sp, #104]	; 0x68
 800355e:	4654      	mov	r4, sl
 8003560:	2205      	movs	r2, #5
 8003562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003566:	4858      	ldr	r0, [pc, #352]	; (80036c8 <_vfiprintf_r+0x24c>)
 8003568:	f7fc fe3a 	bl	80001e0 <memchr>
 800356c:	9a04      	ldr	r2, [sp, #16]
 800356e:	b9d8      	cbnz	r0, 80035a8 <_vfiprintf_r+0x12c>
 8003570:	06d1      	lsls	r1, r2, #27
 8003572:	bf44      	itt	mi
 8003574:	2320      	movmi	r3, #32
 8003576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800357a:	0713      	lsls	r3, r2, #28
 800357c:	bf44      	itt	mi
 800357e:	232b      	movmi	r3, #43	; 0x2b
 8003580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003584:	f89a 3000 	ldrb.w	r3, [sl]
 8003588:	2b2a      	cmp	r3, #42	; 0x2a
 800358a:	d015      	beq.n	80035b8 <_vfiprintf_r+0x13c>
 800358c:	9a07      	ldr	r2, [sp, #28]
 800358e:	4654      	mov	r4, sl
 8003590:	2000      	movs	r0, #0
 8003592:	f04f 0c0a 	mov.w	ip, #10
 8003596:	4621      	mov	r1, r4
 8003598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800359c:	3b30      	subs	r3, #48	; 0x30
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d94e      	bls.n	8003640 <_vfiprintf_r+0x1c4>
 80035a2:	b1b0      	cbz	r0, 80035d2 <_vfiprintf_r+0x156>
 80035a4:	9207      	str	r2, [sp, #28]
 80035a6:	e014      	b.n	80035d2 <_vfiprintf_r+0x156>
 80035a8:	eba0 0308 	sub.w	r3, r0, r8
 80035ac:	fa09 f303 	lsl.w	r3, r9, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	46a2      	mov	sl, r4
 80035b6:	e7d2      	b.n	800355e <_vfiprintf_r+0xe2>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	1d19      	adds	r1, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	9103      	str	r1, [sp, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bfbb      	ittet	lt
 80035c4:	425b      	neglt	r3, r3
 80035c6:	f042 0202 	orrlt.w	r2, r2, #2
 80035ca:	9307      	strge	r3, [sp, #28]
 80035cc:	9307      	strlt	r3, [sp, #28]
 80035ce:	bfb8      	it	lt
 80035d0:	9204      	strlt	r2, [sp, #16]
 80035d2:	7823      	ldrb	r3, [r4, #0]
 80035d4:	2b2e      	cmp	r3, #46	; 0x2e
 80035d6:	d10c      	bne.n	80035f2 <_vfiprintf_r+0x176>
 80035d8:	7863      	ldrb	r3, [r4, #1]
 80035da:	2b2a      	cmp	r3, #42	; 0x2a
 80035dc:	d135      	bne.n	800364a <_vfiprintf_r+0x1ce>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	9203      	str	r2, [sp, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bfb8      	it	lt
 80035ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80035ee:	3402      	adds	r4, #2
 80035f0:	9305      	str	r3, [sp, #20]
 80035f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80036d8 <_vfiprintf_r+0x25c>
 80035f6:	7821      	ldrb	r1, [r4, #0]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4650      	mov	r0, sl
 80035fc:	f7fc fdf0 	bl	80001e0 <memchr>
 8003600:	b140      	cbz	r0, 8003614 <_vfiprintf_r+0x198>
 8003602:	2340      	movs	r3, #64	; 0x40
 8003604:	eba0 000a 	sub.w	r0, r0, sl
 8003608:	fa03 f000 	lsl.w	r0, r3, r0
 800360c:	9b04      	ldr	r3, [sp, #16]
 800360e:	4303      	orrs	r3, r0
 8003610:	3401      	adds	r4, #1
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003618:	482c      	ldr	r0, [pc, #176]	; (80036cc <_vfiprintf_r+0x250>)
 800361a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800361e:	2206      	movs	r2, #6
 8003620:	f7fc fdde 	bl	80001e0 <memchr>
 8003624:	2800      	cmp	r0, #0
 8003626:	d03f      	beq.n	80036a8 <_vfiprintf_r+0x22c>
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <_vfiprintf_r+0x254>)
 800362a:	bb1b      	cbnz	r3, 8003674 <_vfiprintf_r+0x1f8>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	3307      	adds	r3, #7
 8003630:	f023 0307 	bic.w	r3, r3, #7
 8003634:	3308      	adds	r3, #8
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363a:	443b      	add	r3, r7
 800363c:	9309      	str	r3, [sp, #36]	; 0x24
 800363e:	e767      	b.n	8003510 <_vfiprintf_r+0x94>
 8003640:	fb0c 3202 	mla	r2, ip, r2, r3
 8003644:	460c      	mov	r4, r1
 8003646:	2001      	movs	r0, #1
 8003648:	e7a5      	b.n	8003596 <_vfiprintf_r+0x11a>
 800364a:	2300      	movs	r3, #0
 800364c:	3401      	adds	r4, #1
 800364e:	9305      	str	r3, [sp, #20]
 8003650:	4619      	mov	r1, r3
 8003652:	f04f 0c0a 	mov.w	ip, #10
 8003656:	4620      	mov	r0, r4
 8003658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800365c:	3a30      	subs	r2, #48	; 0x30
 800365e:	2a09      	cmp	r2, #9
 8003660:	d903      	bls.n	800366a <_vfiprintf_r+0x1ee>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0c5      	beq.n	80035f2 <_vfiprintf_r+0x176>
 8003666:	9105      	str	r1, [sp, #20]
 8003668:	e7c3      	b.n	80035f2 <_vfiprintf_r+0x176>
 800366a:	fb0c 2101 	mla	r1, ip, r1, r2
 800366e:	4604      	mov	r4, r0
 8003670:	2301      	movs	r3, #1
 8003672:	e7f0      	b.n	8003656 <_vfiprintf_r+0x1da>
 8003674:	ab03      	add	r3, sp, #12
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	462a      	mov	r2, r5
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <_vfiprintf_r+0x258>)
 800367c:	a904      	add	r1, sp, #16
 800367e:	4630      	mov	r0, r6
 8003680:	f3af 8000 	nop.w
 8003684:	4607      	mov	r7, r0
 8003686:	1c78      	adds	r0, r7, #1
 8003688:	d1d6      	bne.n	8003638 <_vfiprintf_r+0x1bc>
 800368a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800368c:	07d9      	lsls	r1, r3, #31
 800368e:	d405      	bmi.n	800369c <_vfiprintf_r+0x220>
 8003690:	89ab      	ldrh	r3, [r5, #12]
 8003692:	059a      	lsls	r2, r3, #22
 8003694:	d402      	bmi.n	800369c <_vfiprintf_r+0x220>
 8003696:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003698:	f7ff fd7f 	bl	800319a <__retarget_lock_release_recursive>
 800369c:	89ab      	ldrh	r3, [r5, #12]
 800369e:	065b      	lsls	r3, r3, #25
 80036a0:	f53f af12 	bmi.w	80034c8 <_vfiprintf_r+0x4c>
 80036a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a6:	e711      	b.n	80034cc <_vfiprintf_r+0x50>
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462a      	mov	r2, r5
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <_vfiprintf_r+0x258>)
 80036b0:	a904      	add	r1, sp, #16
 80036b2:	4630      	mov	r0, r6
 80036b4:	f000 f880 	bl	80037b8 <_printf_i>
 80036b8:	e7e4      	b.n	8003684 <_vfiprintf_r+0x208>
 80036ba:	bf00      	nop
 80036bc:	08003d2c 	.word	0x08003d2c
 80036c0:	08003d4c 	.word	0x08003d4c
 80036c4:	08003d0c 	.word	0x08003d0c
 80036c8:	08003d6c 	.word	0x08003d6c
 80036cc:	08003d76 	.word	0x08003d76
 80036d0:	00000000 	.word	0x00000000
 80036d4:	08003457 	.word	0x08003457
 80036d8:	08003d72 	.word	0x08003d72

080036dc <_printf_common>:
 80036dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e0:	4616      	mov	r6, r2
 80036e2:	4699      	mov	r9, r3
 80036e4:	688a      	ldr	r2, [r1, #8]
 80036e6:	690b      	ldr	r3, [r1, #16]
 80036e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bfb8      	it	lt
 80036f0:	4613      	movlt	r3, r2
 80036f2:	6033      	str	r3, [r6, #0]
 80036f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036f8:	4607      	mov	r7, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	b10a      	cbz	r2, 8003702 <_printf_common+0x26>
 80036fe:	3301      	adds	r3, #1
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	0699      	lsls	r1, r3, #26
 8003706:	bf42      	ittt	mi
 8003708:	6833      	ldrmi	r3, [r6, #0]
 800370a:	3302      	addmi	r3, #2
 800370c:	6033      	strmi	r3, [r6, #0]
 800370e:	6825      	ldr	r5, [r4, #0]
 8003710:	f015 0506 	ands.w	r5, r5, #6
 8003714:	d106      	bne.n	8003724 <_printf_common+0x48>
 8003716:	f104 0a19 	add.w	sl, r4, #25
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	6832      	ldr	r2, [r6, #0]
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	42ab      	cmp	r3, r5
 8003722:	dc26      	bgt.n	8003772 <_printf_common+0x96>
 8003724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003728:	1e13      	subs	r3, r2, #0
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	bf18      	it	ne
 800372e:	2301      	movne	r3, #1
 8003730:	0692      	lsls	r2, r2, #26
 8003732:	d42b      	bmi.n	800378c <_printf_common+0xb0>
 8003734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003738:	4649      	mov	r1, r9
 800373a:	4638      	mov	r0, r7
 800373c:	47c0      	blx	r8
 800373e:	3001      	adds	r0, #1
 8003740:	d01e      	beq.n	8003780 <_printf_common+0xa4>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	68e5      	ldr	r5, [r4, #12]
 8003746:	6832      	ldr	r2, [r6, #0]
 8003748:	f003 0306 	and.w	r3, r3, #6
 800374c:	2b04      	cmp	r3, #4
 800374e:	bf08      	it	eq
 8003750:	1aad      	subeq	r5, r5, r2
 8003752:	68a3      	ldr	r3, [r4, #8]
 8003754:	6922      	ldr	r2, [r4, #16]
 8003756:	bf0c      	ite	eq
 8003758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800375c:	2500      	movne	r5, #0
 800375e:	4293      	cmp	r3, r2
 8003760:	bfc4      	itt	gt
 8003762:	1a9b      	subgt	r3, r3, r2
 8003764:	18ed      	addgt	r5, r5, r3
 8003766:	2600      	movs	r6, #0
 8003768:	341a      	adds	r4, #26
 800376a:	42b5      	cmp	r5, r6
 800376c:	d11a      	bne.n	80037a4 <_printf_common+0xc8>
 800376e:	2000      	movs	r0, #0
 8003770:	e008      	b.n	8003784 <_printf_common+0xa8>
 8003772:	2301      	movs	r3, #1
 8003774:	4652      	mov	r2, sl
 8003776:	4649      	mov	r1, r9
 8003778:	4638      	mov	r0, r7
 800377a:	47c0      	blx	r8
 800377c:	3001      	adds	r0, #1
 800377e:	d103      	bne.n	8003788 <_printf_common+0xac>
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003788:	3501      	adds	r5, #1
 800378a:	e7c6      	b.n	800371a <_printf_common+0x3e>
 800378c:	18e1      	adds	r1, r4, r3
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	2030      	movs	r0, #48	; 0x30
 8003792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003796:	4422      	add	r2, r4
 8003798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800379c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a0:	3302      	adds	r3, #2
 80037a2:	e7c7      	b.n	8003734 <_printf_common+0x58>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4622      	mov	r2, r4
 80037a8:	4649      	mov	r1, r9
 80037aa:	4638      	mov	r0, r7
 80037ac:	47c0      	blx	r8
 80037ae:	3001      	adds	r0, #1
 80037b0:	d0e6      	beq.n	8003780 <_printf_common+0xa4>
 80037b2:	3601      	adds	r6, #1
 80037b4:	e7d9      	b.n	800376a <_printf_common+0x8e>
	...

080037b8 <_printf_i>:
 80037b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037bc:	7e0f      	ldrb	r7, [r1, #24]
 80037be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037c0:	2f78      	cmp	r7, #120	; 0x78
 80037c2:	4691      	mov	r9, r2
 80037c4:	4680      	mov	r8, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	469a      	mov	sl, r3
 80037ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ce:	d807      	bhi.n	80037e0 <_printf_i+0x28>
 80037d0:	2f62      	cmp	r7, #98	; 0x62
 80037d2:	d80a      	bhi.n	80037ea <_printf_i+0x32>
 80037d4:	2f00      	cmp	r7, #0
 80037d6:	f000 80d8 	beq.w	800398a <_printf_i+0x1d2>
 80037da:	2f58      	cmp	r7, #88	; 0x58
 80037dc:	f000 80a3 	beq.w	8003926 <_printf_i+0x16e>
 80037e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037e8:	e03a      	b.n	8003860 <_printf_i+0xa8>
 80037ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037ee:	2b15      	cmp	r3, #21
 80037f0:	d8f6      	bhi.n	80037e0 <_printf_i+0x28>
 80037f2:	a101      	add	r1, pc, #4	; (adr r1, 80037f8 <_printf_i+0x40>)
 80037f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f8:	08003851 	.word	0x08003851
 80037fc:	08003865 	.word	0x08003865
 8003800:	080037e1 	.word	0x080037e1
 8003804:	080037e1 	.word	0x080037e1
 8003808:	080037e1 	.word	0x080037e1
 800380c:	080037e1 	.word	0x080037e1
 8003810:	08003865 	.word	0x08003865
 8003814:	080037e1 	.word	0x080037e1
 8003818:	080037e1 	.word	0x080037e1
 800381c:	080037e1 	.word	0x080037e1
 8003820:	080037e1 	.word	0x080037e1
 8003824:	08003971 	.word	0x08003971
 8003828:	08003895 	.word	0x08003895
 800382c:	08003953 	.word	0x08003953
 8003830:	080037e1 	.word	0x080037e1
 8003834:	080037e1 	.word	0x080037e1
 8003838:	08003993 	.word	0x08003993
 800383c:	080037e1 	.word	0x080037e1
 8003840:	08003895 	.word	0x08003895
 8003844:	080037e1 	.word	0x080037e1
 8003848:	080037e1 	.word	0x080037e1
 800384c:	0800395b 	.word	0x0800395b
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	1d1a      	adds	r2, r3, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	602a      	str	r2, [r5, #0]
 8003858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800385c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003860:	2301      	movs	r3, #1
 8003862:	e0a3      	b.n	80039ac <_printf_i+0x1f4>
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	6829      	ldr	r1, [r5, #0]
 8003868:	0606      	lsls	r6, r0, #24
 800386a:	f101 0304 	add.w	r3, r1, #4
 800386e:	d50a      	bpl.n	8003886 <_printf_i+0xce>
 8003870:	680e      	ldr	r6, [r1, #0]
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	2e00      	cmp	r6, #0
 8003876:	da03      	bge.n	8003880 <_printf_i+0xc8>
 8003878:	232d      	movs	r3, #45	; 0x2d
 800387a:	4276      	negs	r6, r6
 800387c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003880:	485e      	ldr	r0, [pc, #376]	; (80039fc <_printf_i+0x244>)
 8003882:	230a      	movs	r3, #10
 8003884:	e019      	b.n	80038ba <_printf_i+0x102>
 8003886:	680e      	ldr	r6, [r1, #0]
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800388e:	bf18      	it	ne
 8003890:	b236      	sxthne	r6, r6
 8003892:	e7ef      	b.n	8003874 <_printf_i+0xbc>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	1d19      	adds	r1, r3, #4
 800389a:	6029      	str	r1, [r5, #0]
 800389c:	0601      	lsls	r1, r0, #24
 800389e:	d501      	bpl.n	80038a4 <_printf_i+0xec>
 80038a0:	681e      	ldr	r6, [r3, #0]
 80038a2:	e002      	b.n	80038aa <_printf_i+0xf2>
 80038a4:	0646      	lsls	r6, r0, #25
 80038a6:	d5fb      	bpl.n	80038a0 <_printf_i+0xe8>
 80038a8:	881e      	ldrh	r6, [r3, #0]
 80038aa:	4854      	ldr	r0, [pc, #336]	; (80039fc <_printf_i+0x244>)
 80038ac:	2f6f      	cmp	r7, #111	; 0x6f
 80038ae:	bf0c      	ite	eq
 80038b0:	2308      	moveq	r3, #8
 80038b2:	230a      	movne	r3, #10
 80038b4:	2100      	movs	r1, #0
 80038b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038ba:	6865      	ldr	r5, [r4, #4]
 80038bc:	60a5      	str	r5, [r4, #8]
 80038be:	2d00      	cmp	r5, #0
 80038c0:	bfa2      	ittt	ge
 80038c2:	6821      	ldrge	r1, [r4, #0]
 80038c4:	f021 0104 	bicge.w	r1, r1, #4
 80038c8:	6021      	strge	r1, [r4, #0]
 80038ca:	b90e      	cbnz	r6, 80038d0 <_printf_i+0x118>
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	d04d      	beq.n	800396c <_printf_i+0x1b4>
 80038d0:	4615      	mov	r5, r2
 80038d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80038d6:	fb03 6711 	mls	r7, r3, r1, r6
 80038da:	5dc7      	ldrb	r7, [r0, r7]
 80038dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038e0:	4637      	mov	r7, r6
 80038e2:	42bb      	cmp	r3, r7
 80038e4:	460e      	mov	r6, r1
 80038e6:	d9f4      	bls.n	80038d2 <_printf_i+0x11a>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d10b      	bne.n	8003904 <_printf_i+0x14c>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	07de      	lsls	r6, r3, #31
 80038f0:	d508      	bpl.n	8003904 <_printf_i+0x14c>
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	6861      	ldr	r1, [r4, #4]
 80038f6:	4299      	cmp	r1, r3
 80038f8:	bfde      	ittt	le
 80038fa:	2330      	movle	r3, #48	; 0x30
 80038fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003900:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003904:	1b52      	subs	r2, r2, r5
 8003906:	6122      	str	r2, [r4, #16]
 8003908:	f8cd a000 	str.w	sl, [sp]
 800390c:	464b      	mov	r3, r9
 800390e:	aa03      	add	r2, sp, #12
 8003910:	4621      	mov	r1, r4
 8003912:	4640      	mov	r0, r8
 8003914:	f7ff fee2 	bl	80036dc <_printf_common>
 8003918:	3001      	adds	r0, #1
 800391a:	d14c      	bne.n	80039b6 <_printf_i+0x1fe>
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	b004      	add	sp, #16
 8003922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003926:	4835      	ldr	r0, [pc, #212]	; (80039fc <_printf_i+0x244>)
 8003928:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800392c:	6829      	ldr	r1, [r5, #0]
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	f851 6b04 	ldr.w	r6, [r1], #4
 8003934:	6029      	str	r1, [r5, #0]
 8003936:	061d      	lsls	r5, r3, #24
 8003938:	d514      	bpl.n	8003964 <_printf_i+0x1ac>
 800393a:	07df      	lsls	r7, r3, #31
 800393c:	bf44      	itt	mi
 800393e:	f043 0320 	orrmi.w	r3, r3, #32
 8003942:	6023      	strmi	r3, [r4, #0]
 8003944:	b91e      	cbnz	r6, 800394e <_printf_i+0x196>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	f023 0320 	bic.w	r3, r3, #32
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	2310      	movs	r3, #16
 8003950:	e7b0      	b.n	80038b4 <_printf_i+0xfc>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	f043 0320 	orr.w	r3, r3, #32
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	2378      	movs	r3, #120	; 0x78
 800395c:	4828      	ldr	r0, [pc, #160]	; (8003a00 <_printf_i+0x248>)
 800395e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003962:	e7e3      	b.n	800392c <_printf_i+0x174>
 8003964:	0659      	lsls	r1, r3, #25
 8003966:	bf48      	it	mi
 8003968:	b2b6      	uxthmi	r6, r6
 800396a:	e7e6      	b.n	800393a <_printf_i+0x182>
 800396c:	4615      	mov	r5, r2
 800396e:	e7bb      	b.n	80038e8 <_printf_i+0x130>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6826      	ldr	r6, [r4, #0]
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	1d18      	adds	r0, r3, #4
 8003978:	6028      	str	r0, [r5, #0]
 800397a:	0635      	lsls	r5, r6, #24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	d501      	bpl.n	8003984 <_printf_i+0x1cc>
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	e002      	b.n	800398a <_printf_i+0x1d2>
 8003984:	0670      	lsls	r0, r6, #25
 8003986:	d5fb      	bpl.n	8003980 <_printf_i+0x1c8>
 8003988:	8019      	strh	r1, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	4615      	mov	r5, r2
 8003990:	e7ba      	b.n	8003908 <_printf_i+0x150>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	602a      	str	r2, [r5, #0]
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	2100      	movs	r1, #0
 800399e:	4628      	mov	r0, r5
 80039a0:	f7fc fc1e 	bl	80001e0 <memchr>
 80039a4:	b108      	cbz	r0, 80039aa <_printf_i+0x1f2>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	6060      	str	r0, [r4, #4]
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b4:	e7a8      	b.n	8003908 <_printf_i+0x150>
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	462a      	mov	r2, r5
 80039ba:	4649      	mov	r1, r9
 80039bc:	4640      	mov	r0, r8
 80039be:	47d0      	blx	sl
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0ab      	beq.n	800391c <_printf_i+0x164>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079b      	lsls	r3, r3, #30
 80039c8:	d413      	bmi.n	80039f2 <_printf_i+0x23a>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	4298      	cmp	r0, r3
 80039d0:	bfb8      	it	lt
 80039d2:	4618      	movlt	r0, r3
 80039d4:	e7a4      	b.n	8003920 <_printf_i+0x168>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4632      	mov	r2, r6
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d09b      	beq.n	800391c <_printf_i+0x164>
 80039e4:	3501      	adds	r5, #1
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	9903      	ldr	r1, [sp, #12]
 80039ea:	1a5b      	subs	r3, r3, r1
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dcf2      	bgt.n	80039d6 <_printf_i+0x21e>
 80039f0:	e7eb      	b.n	80039ca <_printf_i+0x212>
 80039f2:	2500      	movs	r5, #0
 80039f4:	f104 0619 	add.w	r6, r4, #25
 80039f8:	e7f5      	b.n	80039e6 <_printf_i+0x22e>
 80039fa:	bf00      	nop
 80039fc:	08003d7d 	.word	0x08003d7d
 8003a00:	08003d8e 	.word	0x08003d8e

08003a04 <_sbrk_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d06      	ldr	r5, [pc, #24]	; (8003a20 <_sbrk_r+0x1c>)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	f7fd f9d4 	bl	8000dbc <_sbrk>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	d102      	bne.n	8003a1e <_sbrk_r+0x1a>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b103      	cbz	r3, 8003a1e <_sbrk_r+0x1a>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	2000056c 	.word	0x2000056c

08003a24 <__sread>:
 8003a24:	b510      	push	{r4, lr}
 8003a26:	460c      	mov	r4, r1
 8003a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2c:	f000 f8a0 	bl	8003b70 <_read_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	bfab      	itete	ge
 8003a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a36:	89a3      	ldrhlt	r3, [r4, #12]
 8003a38:	181b      	addge	r3, r3, r0
 8003a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a3e:	bfac      	ite	ge
 8003a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a42:	81a3      	strhlt	r3, [r4, #12]
 8003a44:	bd10      	pop	{r4, pc}

08003a46 <__swrite>:
 8003a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	461f      	mov	r7, r3
 8003a4c:	898b      	ldrh	r3, [r1, #12]
 8003a4e:	05db      	lsls	r3, r3, #23
 8003a50:	4605      	mov	r5, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	4616      	mov	r6, r2
 8003a56:	d505      	bpl.n	8003a64 <__swrite+0x1e>
 8003a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f000 f868 	bl	8003b34 <_lseek_r>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	4628      	mov	r0, r5
 8003a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7a:	f000 b817 	b.w	8003aac <_write_r>

08003a7e <__sseek>:
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	460c      	mov	r4, r1
 8003a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a86:	f000 f855 	bl	8003b34 <_lseek_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	bf15      	itete	ne
 8003a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a9a:	81a3      	strheq	r3, [r4, #12]
 8003a9c:	bf18      	it	ne
 8003a9e:	81a3      	strhne	r3, [r4, #12]
 8003aa0:	bd10      	pop	{r4, pc}

08003aa2 <__sclose>:
 8003aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa6:	f000 b813 	b.w	8003ad0 <_close_r>
	...

08003aac <_write_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d07      	ldr	r5, [pc, #28]	; (8003acc <_write_r+0x20>)
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4608      	mov	r0, r1
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	602a      	str	r2, [r5, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f7fd f92d 	bl	8000d1a <_write>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d102      	bne.n	8003aca <_write_r+0x1e>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	b103      	cbz	r3, 8003aca <_write_r+0x1e>
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	2000056c 	.word	0x2000056c

08003ad0 <_close_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4d06      	ldr	r5, [pc, #24]	; (8003aec <_close_r+0x1c>)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	602b      	str	r3, [r5, #0]
 8003adc:	f7fd f939 	bl	8000d52 <_close>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_close_r+0x1a>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_close_r+0x1a>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	2000056c 	.word	0x2000056c

08003af0 <_fstat_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d07      	ldr	r5, [pc, #28]	; (8003b10 <_fstat_r+0x20>)
 8003af4:	2300      	movs	r3, #0
 8003af6:	4604      	mov	r4, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	602b      	str	r3, [r5, #0]
 8003afe:	f7fd f934 	bl	8000d6a <_fstat>
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d102      	bne.n	8003b0c <_fstat_r+0x1c>
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	b103      	cbz	r3, 8003b0c <_fstat_r+0x1c>
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	bd38      	pop	{r3, r4, r5, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000056c 	.word	0x2000056c

08003b14 <_isatty_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4d06      	ldr	r5, [pc, #24]	; (8003b30 <_isatty_r+0x1c>)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	f7fd f933 	bl	8000d8a <_isatty>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_isatty_r+0x1a>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_isatty_r+0x1a>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	2000056c 	.word	0x2000056c

08003b34 <_lseek_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4d07      	ldr	r5, [pc, #28]	; (8003b54 <_lseek_r+0x20>)
 8003b38:	4604      	mov	r4, r0
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fd f92c 	bl	8000da0 <_lseek>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_lseek_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_lseek_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	2000056c 	.word	0x2000056c

08003b58 <__malloc_lock>:
 8003b58:	4801      	ldr	r0, [pc, #4]	; (8003b60 <__malloc_lock+0x8>)
 8003b5a:	f7ff bb1d 	b.w	8003198 <__retarget_lock_acquire_recursive>
 8003b5e:	bf00      	nop
 8003b60:	20000560 	.word	0x20000560

08003b64 <__malloc_unlock>:
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <__malloc_unlock+0x8>)
 8003b66:	f7ff bb18 	b.w	800319a <__retarget_lock_release_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000560 	.word	0x20000560

08003b70 <_read_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d07      	ldr	r5, [pc, #28]	; (8003b90 <_read_r+0x20>)
 8003b74:	4604      	mov	r4, r0
 8003b76:	4608      	mov	r0, r1
 8003b78:	4611      	mov	r1, r2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	602a      	str	r2, [r5, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f7fd f8ae 	bl	8000ce0 <_read>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d102      	bne.n	8003b8e <_read_r+0x1e>
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	b103      	cbz	r3, 8003b8e <_read_r+0x1e>
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	2000056c 	.word	0x2000056c

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
